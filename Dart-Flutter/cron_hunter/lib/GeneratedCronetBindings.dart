// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Cronet for Dart
class CronetDart {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CronetDart(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CronetDart.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_start_ptr =
      _lookup<ffi.NativeFunction<Native___va_start>>('__va_start');
  late final _dart___va_start ___va_start =
      ___va_start_ptr.asFunction<_dart___va_start>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookie_ptr =
      _lookup<ffi.NativeFunction<Native___security_init_cookie>>(
          '__security_init_cookie');
  late final _dart___security_init_cookie ___security_init_cookie =
      ___security_init_cookie_ptr.asFunction<_dart___security_init_cookie>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookie_ptr =
      _lookup<ffi.NativeFunction<Native___security_check_cookie>>(
          '__security_check_cookie');
  late final _dart___security_check_cookie ___security_check_cookie =
      ___security_check_cookie_ptr.asFunction<_dart___security_check_cookie>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailure_ptr =
      _lookup<ffi.NativeFunction<Native___report_gsfailure>>(
          '__report_gsfailure');
  late final _dart___report_gsfailure ___report_gsfailure =
      ___report_gsfailure_ptr.asFunction<_dart___report_gsfailure>();

  late final ffi.Pointer<ffi.Uint64> ___security_cookie =
      _lookup<ffi.Uint64>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfo_ptr =
      _lookup<ffi.NativeFunction<Native__invalid_parameter_noinfo>>(
          '_invalid_parameter_noinfo');
  late final _dart__invalid_parameter_noinfo __invalid_parameter_noinfo =
      __invalid_parameter_noinfo_ptr
          .asFunction<_dart__invalid_parameter_noinfo>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturn_ptr =
      _lookup<ffi.NativeFunction<Native__invalid_parameter_noinfo_noreturn>>(
          '_invalid_parameter_noinfo_noreturn');
  late final _dart__invalid_parameter_noinfo_noreturn
      __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturn_ptr
          .asFunction<_dart__invalid_parameter_noinfo_noreturn>();

  void _invoke_watson(
    ffi.Pointer<ffi.Uint16> _Expression,
    ffi.Pointer<ffi.Uint16> _FunctionName,
    ffi.Pointer<ffi.Uint16> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watson_ptr =
      _lookup<ffi.NativeFunction<Native__invoke_watson>>('_invoke_watson');
  late final _dart__invoke_watson __invoke_watson =
      __invoke_watson_ptr.asFunction<_dart__invoke_watson>();

  late final ffi.Pointer<ffi.Int32> _std = _lookup<ffi.Int32>('std');

  int get std => _std.value;

  set std(int value) => _std.value = value;

  int _set_errno(
    int _Value,
  ) {
    return __set_errno(
      _Value,
    );
  }

  late final __set_errno_ptr =
      _lookup<ffi.NativeFunction<Native__set_errno>>('_set_errno');
  late final _dart__set_errno __set_errno =
      __set_errno_ptr.asFunction<_dart__set_errno>();

  int _get_errno(
    ffi.Pointer<ffi.Int32> _Value,
  ) {
    return __get_errno(
      _Value,
    );
  }

  late final __get_errno_ptr =
      _lookup<ffi.NativeFunction<Native__get_errno>>('_get_errno');
  late final _dart__get_errno __get_errno =
      __get_errno_ptr.asFunction<_dart__get_errno>();

  int __threadid() {
    return ___threadid();
  }

  late final ___threadid_ptr =
      _lookup<ffi.NativeFunction<Native___threadid>>('__threadid');
  late final _dart___threadid ___threadid =
      ___threadid_ptr.asFunction<_dart___threadid>();

  int __threadhandle() {
    return ___threadhandle();
  }

  late final ___threadhandle_ptr =
      _lookup<ffi.NativeFunction<Native___threadhandle>>('__threadhandle');
  late final _dart___threadhandle ___threadhandle =
      ___threadhandle_ptr.asFunction<_dart___threadhandle>();

  late final ffi.Pointer<ffi.Double> __HUGE = _lookup<ffi.Double>('_HUGE');

  double get _HUGE => __HUGE.value;

  set _HUGE(double value) => __HUGE.value = value;

  void _fperrraise(
    int _Except,
  ) {
    return __fperrraise(
      _Except,
    );
  }

  late final __fperrraise_ptr =
      _lookup<ffi.NativeFunction<Native__fperrraise>>('_fperrraise');
  late final _dart__fperrraise __fperrraise =
      __fperrraise_ptr.asFunction<_dart__fperrraise>();

  int _dclass(
    double _X,
  ) {
    return __dclass(
      _X,
    );
  }

  late final __dclass_ptr =
      _lookup<ffi.NativeFunction<Native__dclass>>('_dclass');
  late final _dart__dclass __dclass = __dclass_ptr.asFunction<_dart__dclass>();

  int _fdclass(
    double _X,
  ) {
    return __fdclass(
      _X,
    );
  }

  late final __fdclass_ptr =
      _lookup<ffi.NativeFunction<Native__fdclass>>('_fdclass');
  late final _dart__fdclass __fdclass =
      __fdclass_ptr.asFunction<_dart__fdclass>();

  int _dsign(
    double _X,
  ) {
    return __dsign(
      _X,
    );
  }

  late final __dsign_ptr = _lookup<ffi.NativeFunction<Native__dsign>>('_dsign');
  late final _dart__dsign __dsign = __dsign_ptr.asFunction<_dart__dsign>();

  int _fdsign(
    double _X,
  ) {
    return __fdsign(
      _X,
    );
  }

  late final __fdsign_ptr =
      _lookup<ffi.NativeFunction<Native__fdsign>>('_fdsign');
  late final _dart__fdsign __fdsign = __fdsign_ptr.asFunction<_dart__fdsign>();

  int _dpcomp(
    double _X,
    double _Y,
  ) {
    return __dpcomp(
      _X,
      _Y,
    );
  }

  late final __dpcomp_ptr =
      _lookup<ffi.NativeFunction<Native__dpcomp>>('_dpcomp');
  late final _dart__dpcomp __dpcomp = __dpcomp_ptr.asFunction<_dart__dpcomp>();

  int _fdpcomp(
    double _X,
    double _Y,
  ) {
    return __fdpcomp(
      _X,
      _Y,
    );
  }

  late final __fdpcomp_ptr =
      _lookup<ffi.NativeFunction<Native__fdpcomp>>('_fdpcomp');
  late final _dart__fdpcomp __fdpcomp =
      __fdpcomp_ptr.asFunction<_dart__fdpcomp>();

  int _dtest(
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return __dtest(
      _Px,
    );
  }

  late final __dtest_ptr = _lookup<ffi.NativeFunction<Native__dtest>>('_dtest');
  late final _dart__dtest __dtest = __dtest_ptr.asFunction<_dart__dtest>();

  int _fdtest(
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return __fdtest(
      _Px,
    );
  }

  late final __fdtest_ptr =
      _lookup<ffi.NativeFunction<Native__fdtest>>('_fdtest');
  late final _dart__fdtest __fdtest = __fdtest_ptr.asFunction<_dart__fdtest>();

  int _d_int(
    ffi.Pointer<ffi.Double> _Px,
    int _Xexp,
  ) {
    return __d_int(
      _Px,
      _Xexp,
    );
  }

  late final __d_int_ptr = _lookup<ffi.NativeFunction<Native__d_int>>('_d_int');
  late final _dart__d_int __d_int = __d_int_ptr.asFunction<_dart__d_int>();

  int _fd_int(
    ffi.Pointer<ffi.Float> _Px,
    int _Xexp,
  ) {
    return __fd_int(
      _Px,
      _Xexp,
    );
  }

  late final __fd_int_ptr =
      _lookup<ffi.NativeFunction<Native__fd_int>>('_fd_int');
  late final _dart__fd_int __fd_int = __fd_int_ptr.asFunction<_dart__fd_int>();

  int _dscale(
    ffi.Pointer<ffi.Double> _Px,
    int _Lexp,
  ) {
    return __dscale(
      _Px,
      _Lexp,
    );
  }

  late final __dscale_ptr =
      _lookup<ffi.NativeFunction<Native__dscale>>('_dscale');
  late final _dart__dscale __dscale = __dscale_ptr.asFunction<_dart__dscale>();

  int _fdscale(
    ffi.Pointer<ffi.Float> _Px,
    int _Lexp,
  ) {
    return __fdscale(
      _Px,
      _Lexp,
    );
  }

  late final __fdscale_ptr =
      _lookup<ffi.NativeFunction<Native__fdscale>>('_fdscale');
  late final _dart__fdscale __fdscale =
      __fdscale_ptr.asFunction<_dart__fdscale>();

  int _dunscale(
    ffi.Pointer<ffi.Int16> _Pex,
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return __dunscale(
      _Pex,
      _Px,
    );
  }

  late final __dunscale_ptr =
      _lookup<ffi.NativeFunction<Native__dunscale>>('_dunscale');
  late final _dart__dunscale __dunscale =
      __dunscale_ptr.asFunction<_dart__dunscale>();

  int _fdunscale(
    ffi.Pointer<ffi.Int16> _Pex,
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return __fdunscale(
      _Pex,
      _Px,
    );
  }

  late final __fdunscale_ptr =
      _lookup<ffi.NativeFunction<Native__fdunscale>>('_fdunscale');
  late final _dart__fdunscale __fdunscale =
      __fdunscale_ptr.asFunction<_dart__fdunscale>();

  int _dexp(
    ffi.Pointer<ffi.Double> _Px,
    double _Y,
    int _Eoff,
  ) {
    return __dexp(
      _Px,
      _Y,
      _Eoff,
    );
  }

  late final __dexp_ptr = _lookup<ffi.NativeFunction<Native__dexp>>('_dexp');
  late final _dart__dexp __dexp = __dexp_ptr.asFunction<_dart__dexp>();

  int _fdexp(
    ffi.Pointer<ffi.Float> _Px,
    double _Y,
    int _Eoff,
  ) {
    return __fdexp(
      _Px,
      _Y,
      _Eoff,
    );
  }

  late final __fdexp_ptr = _lookup<ffi.NativeFunction<Native__fdexp>>('_fdexp');
  late final _dart__fdexp __fdexp = __fdexp_ptr.asFunction<_dart__fdexp>();

  int _dnorm(
    ffi.Pointer<ffi.Uint16> _Ps,
  ) {
    return __dnorm(
      _Ps,
    );
  }

  late final __dnorm_ptr = _lookup<ffi.NativeFunction<Native__dnorm>>('_dnorm');
  late final _dart__dnorm __dnorm = __dnorm_ptr.asFunction<_dart__dnorm>();

  int _fdnorm(
    ffi.Pointer<ffi.Uint16> _Ps,
  ) {
    return __fdnorm(
      _Ps,
    );
  }

  late final __fdnorm_ptr =
      _lookup<ffi.NativeFunction<Native__fdnorm>>('_fdnorm');
  late final _dart__fdnorm __fdnorm = __fdnorm_ptr.asFunction<_dart__fdnorm>();

  double _dpoly(
    double _X,
    ffi.Pointer<ffi.Double> _Tab,
    int _N,
  ) {
    return __dpoly(
      _X,
      _Tab,
      _N,
    );
  }

  late final __dpoly_ptr = _lookup<ffi.NativeFunction<Native__dpoly>>('_dpoly');
  late final _dart__dpoly __dpoly = __dpoly_ptr.asFunction<_dart__dpoly>();

  double _fdpoly(
    double _X,
    ffi.Pointer<ffi.Float> _Tab,
    int _N,
  ) {
    return __fdpoly(
      _X,
      _Tab,
      _N,
    );
  }

  late final __fdpoly_ptr =
      _lookup<ffi.NativeFunction<Native__fdpoly>>('_fdpoly');
  late final _dart__fdpoly __fdpoly = __fdpoly_ptr.asFunction<_dart__fdpoly>();

  double _dlog(
    double _X,
    int _Baseflag,
  ) {
    return __dlog(
      _X,
      _Baseflag,
    );
  }

  late final __dlog_ptr = _lookup<ffi.NativeFunction<Native__dlog>>('_dlog');
  late final _dart__dlog __dlog = __dlog_ptr.asFunction<_dart__dlog>();

  double _fdlog(
    double _X,
    int _Baseflag,
  ) {
    return __fdlog(
      _X,
      _Baseflag,
    );
  }

  late final __fdlog_ptr = _lookup<ffi.NativeFunction<Native__fdlog>>('_fdlog');
  late final _dart__fdlog __fdlog = __fdlog_ptr.asFunction<_dart__fdlog>();

  double _dsin(
    double _X,
    int _Qoff,
  ) {
    return __dsin(
      _X,
      _Qoff,
    );
  }

  late final __dsin_ptr = _lookup<ffi.NativeFunction<Native__dsin>>('_dsin');
  late final _dart__dsin __dsin = __dsin_ptr.asFunction<_dart__dsin>();

  double _fdsin(
    double _X,
    int _Qoff,
  ) {
    return __fdsin(
      _X,
      _Qoff,
    );
  }

  late final __fdsin_ptr = _lookup<ffi.NativeFunction<Native__fdsin>>('_fdsin');
  late final _dart__fdsin __fdsin = __fdsin_ptr.asFunction<_dart__fdsin>();

  late final ffi.Pointer<ffi.Double> __Zero_C = _lookup<ffi.Double>('_Zero_C');

  double get _Zero_C => __Zero_C.value;

  set _Zero_C(double value) => __Zero_C.value = value;

  late final ffi.Pointer<ffi.Double> __Xbig_C = _lookup<ffi.Double>('_Xbig_C');

  double get _Xbig_C => __Xbig_C.value;

  set _Xbig_C(double value) => __Xbig_C.value = value;

  late final ffi.Pointer<ffi.Float> __FZero_C = _lookup<ffi.Float>('_FZero_C');

  double get _FZero_C => __FZero_C.value;

  set _FZero_C(double value) => __FZero_C.value = value;

  late final ffi.Pointer<ffi.Float> __FXbig_C = _lookup<ffi.Float>('_FXbig_C');

  double get _FXbig_C => __FXbig_C.value;

  set _FXbig_C(double value) => __FXbig_C.value = value;

  int abs(
    int _X,
  ) {
    return _abs(
      _X,
    );
  }

  late final _abs_ptr = _lookup<ffi.NativeFunction<Native_abs>>('abs');
  late final _dart_abs _abs = _abs_ptr.asFunction<_dart_abs>();

  int labs(
    int _X,
  ) {
    return _labs(
      _X,
    );
  }

  late final _labs_ptr = _lookup<ffi.NativeFunction<Native_labs>>('labs');
  late final _dart_labs _labs = _labs_ptr.asFunction<_dart_labs>();

  int llabs(
    int _X,
  ) {
    return _llabs(
      _X,
    );
  }

  late final _llabs_ptr = _lookup<ffi.NativeFunction<Native_llabs>>('llabs');
  late final _dart_llabs _llabs = _llabs_ptr.asFunction<_dart_llabs>();

  double acos(
    double _X,
  ) {
    return _acos(
      _X,
    );
  }

  late final _acos_ptr = _lookup<ffi.NativeFunction<Native_acos>>('acos');
  late final _dart_acos _acos = _acos_ptr.asFunction<_dart_acos>();

  double asin(
    double _X,
  ) {
    return _asin(
      _X,
    );
  }

  late final _asin_ptr = _lookup<ffi.NativeFunction<Native_asin>>('asin');
  late final _dart_asin _asin = _asin_ptr.asFunction<_dart_asin>();

  double atan(
    double _X,
  ) {
    return _atan(
      _X,
    );
  }

  late final _atan_ptr = _lookup<ffi.NativeFunction<Native_atan>>('atan');
  late final _dart_atan _atan = _atan_ptr.asFunction<_dart_atan>();

  double atan2(
    double _Y,
    double _X,
  ) {
    return _atan2(
      _Y,
      _X,
    );
  }

  late final _atan2_ptr = _lookup<ffi.NativeFunction<Native_atan2>>('atan2');
  late final _dart_atan2 _atan2 = _atan2_ptr.asFunction<_dart_atan2>();

  double cos(
    double _X,
  ) {
    return _cos(
      _X,
    );
  }

  late final _cos_ptr = _lookup<ffi.NativeFunction<Native_cos>>('cos');
  late final _dart_cos _cos = _cos_ptr.asFunction<_dart_cos>();

  double cosh(
    double _X,
  ) {
    return _cosh(
      _X,
    );
  }

  late final _cosh_ptr = _lookup<ffi.NativeFunction<Native_cosh>>('cosh');
  late final _dart_cosh _cosh = _cosh_ptr.asFunction<_dart_cosh>();

  double exp(
    double _X,
  ) {
    return _exp(
      _X,
    );
  }

  late final _exp_ptr = _lookup<ffi.NativeFunction<Native_exp>>('exp');
  late final _dart_exp _exp = _exp_ptr.asFunction<_dart_exp>();

  double fabs(
    double _X,
  ) {
    return _fabs(
      _X,
    );
  }

  late final _fabs_ptr = _lookup<ffi.NativeFunction<Native_fabs>>('fabs');
  late final _dart_fabs _fabs = _fabs_ptr.asFunction<_dart_fabs>();

  double fmod(
    double _X,
    double _Y,
  ) {
    return _fmod(
      _X,
      _Y,
    );
  }

  late final _fmod_ptr = _lookup<ffi.NativeFunction<Native_fmod>>('fmod');
  late final _dart_fmod _fmod = _fmod_ptr.asFunction<_dart_fmod>();

  double log(
    double _X,
  ) {
    return _log(
      _X,
    );
  }

  late final _log_ptr = _lookup<ffi.NativeFunction<Native_log>>('log');
  late final _dart_log _log = _log_ptr.asFunction<_dart_log>();

  double log10(
    double _X,
  ) {
    return _log10(
      _X,
    );
  }

  late final _log10_ptr = _lookup<ffi.NativeFunction<Native_log10>>('log10');
  late final _dart_log10 _log10 = _log10_ptr.asFunction<_dart_log10>();

  double pow(
    double _X,
    double _Y,
  ) {
    return _pow(
      _X,
      _Y,
    );
  }

  late final _pow_ptr = _lookup<ffi.NativeFunction<Native_pow>>('pow');
  late final _dart_pow _pow = _pow_ptr.asFunction<_dart_pow>();

  double sin(
    double _X,
  ) {
    return _sin(
      _X,
    );
  }

  late final _sin_ptr = _lookup<ffi.NativeFunction<Native_sin>>('sin');
  late final _dart_sin _sin = _sin_ptr.asFunction<_dart_sin>();

  double sinh(
    double _X,
  ) {
    return _sinh(
      _X,
    );
  }

  late final _sinh_ptr = _lookup<ffi.NativeFunction<Native_sinh>>('sinh');
  late final _dart_sinh _sinh = _sinh_ptr.asFunction<_dart_sinh>();

  double sqrt(
    double _X,
  ) {
    return _sqrt(
      _X,
    );
  }

  late final _sqrt_ptr = _lookup<ffi.NativeFunction<Native_sqrt>>('sqrt');
  late final _dart_sqrt _sqrt = _sqrt_ptr.asFunction<_dart_sqrt>();

  double tan(
    double _X,
  ) {
    return _tan(
      _X,
    );
  }

  late final _tan_ptr = _lookup<ffi.NativeFunction<Native_tan>>('tan');
  late final _dart_tan _tan = _tan_ptr.asFunction<_dart_tan>();

  double tanh(
    double _X,
  ) {
    return _tanh(
      _X,
    );
  }

  late final _tanh_ptr = _lookup<ffi.NativeFunction<Native_tanh>>('tanh');
  late final _dart_tanh _tanh = _tanh_ptr.asFunction<_dart_tanh>();

  double acosh(
    double _X,
  ) {
    return _acosh(
      _X,
    );
  }

  late final _acosh_ptr = _lookup<ffi.NativeFunction<Native_acosh>>('acosh');
  late final _dart_acosh _acosh = _acosh_ptr.asFunction<_dart_acosh>();

  double asinh(
    double _X,
  ) {
    return _asinh(
      _X,
    );
  }

  late final _asinh_ptr = _lookup<ffi.NativeFunction<Native_asinh>>('asinh');
  late final _dart_asinh _asinh = _asinh_ptr.asFunction<_dart_asinh>();

  double atanh(
    double _X,
  ) {
    return _atanh(
      _X,
    );
  }

  late final _atanh_ptr = _lookup<ffi.NativeFunction<Native_atanh>>('atanh');
  late final _dart_atanh _atanh = _atanh_ptr.asFunction<_dart_atanh>();

  double atof(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _atof(
      _String,
    );
  }

  late final _atof_ptr = _lookup<ffi.NativeFunction<Native_atof>>('atof');
  late final _dart_atof _atof = _atof_ptr.asFunction<_dart_atof>();

  double _atof_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __atof_l(
      _String,
      _Locale,
    );
  }

  late final __atof_l_ptr =
      _lookup<ffi.NativeFunction<Native__atof_l>>('_atof_l');
  late final _dart__atof_l __atof_l = __atof_l_ptr.asFunction<_dart__atof_l>();

  double _cabs(
    _complex _Complex_value,
  ) {
    return __cabs(
      _Complex_value,
    );
  }

  late final __cabs_ptr = _lookup<ffi.NativeFunction<Native__cabs>>('_cabs');
  late final _dart__cabs __cabs = __cabs_ptr.asFunction<_dart__cabs>();

  double cbrt(
    double _X,
  ) {
    return _cbrt(
      _X,
    );
  }

  late final _cbrt_ptr = _lookup<ffi.NativeFunction<Native_cbrt>>('cbrt');
  late final _dart_cbrt _cbrt = _cbrt_ptr.asFunction<_dart_cbrt>();

  double ceil(
    double _X,
  ) {
    return _ceil(
      _X,
    );
  }

  late final _ceil_ptr = _lookup<ffi.NativeFunction<Native_ceil>>('ceil');
  late final _dart_ceil _ceil = _ceil_ptr.asFunction<_dart_ceil>();

  double _chgsign(
    double _X,
  ) {
    return __chgsign(
      _X,
    );
  }

  late final __chgsign_ptr =
      _lookup<ffi.NativeFunction<Native__chgsign>>('_chgsign');
  late final _dart__chgsign __chgsign =
      __chgsign_ptr.asFunction<_dart__chgsign>();

  double copysign(
    double _Number,
    double _Sign,
  ) {
    return _copysign_1(
      _Number,
      _Sign,
    );
  }

  late final _copysign_ptr =
      _lookup<ffi.NativeFunction<Native_copysign>>('copysign');
  late final _dart_copysign _copysign_1 =
      _copysign_ptr.asFunction<_dart_copysign>();

  double _copysign(
    double _Number,
    double _Sign,
  ) {
    return __copysign_1(
      _Number,
      _Sign,
    );
  }

  late final __copysign_ptr =
      _lookup<ffi.NativeFunction<Native__copysign>>('_copysign');
  late final _dart__copysign __copysign_1 =
      __copysign_ptr.asFunction<_dart__copysign>();

  double erf(
    double _X,
  ) {
    return _erf(
      _X,
    );
  }

  late final _erf_ptr = _lookup<ffi.NativeFunction<Native_erf>>('erf');
  late final _dart_erf _erf = _erf_ptr.asFunction<_dart_erf>();

  double erfc(
    double _X,
  ) {
    return _erfc(
      _X,
    );
  }

  late final _erfc_ptr = _lookup<ffi.NativeFunction<Native_erfc>>('erfc');
  late final _dart_erfc _erfc = _erfc_ptr.asFunction<_dart_erfc>();

  double exp2(
    double _X,
  ) {
    return _exp2(
      _X,
    );
  }

  late final _exp2_ptr = _lookup<ffi.NativeFunction<Native_exp2>>('exp2');
  late final _dart_exp2 _exp2 = _exp2_ptr.asFunction<_dart_exp2>();

  double expm1(
    double _X,
  ) {
    return _expm1(
      _X,
    );
  }

  late final _expm1_ptr = _lookup<ffi.NativeFunction<Native_expm1>>('expm1');
  late final _dart_expm1 _expm1 = _expm1_ptr.asFunction<_dart_expm1>();

  double fdim(
    double _X,
    double _Y,
  ) {
    return _fdim(
      _X,
      _Y,
    );
  }

  late final _fdim_ptr = _lookup<ffi.NativeFunction<Native_fdim>>('fdim');
  late final _dart_fdim _fdim = _fdim_ptr.asFunction<_dart_fdim>();

  double floor(
    double _X,
  ) {
    return _floor(
      _X,
    );
  }

  late final _floor_ptr = _lookup<ffi.NativeFunction<Native_floor>>('floor');
  late final _dart_floor _floor = _floor_ptr.asFunction<_dart_floor>();

  double fma(
    double _X,
    double _Y,
    double _Z,
  ) {
    return _fma(
      _X,
      _Y,
      _Z,
    );
  }

  late final _fma_ptr = _lookup<ffi.NativeFunction<Native_fma>>('fma');
  late final _dart_fma _fma = _fma_ptr.asFunction<_dart_fma>();

  double fmax(
    double _X,
    double _Y,
  ) {
    return _fmax(
      _X,
      _Y,
    );
  }

  late final _fmax_ptr = _lookup<ffi.NativeFunction<Native_fmax>>('fmax');
  late final _dart_fmax _fmax = _fmax_ptr.asFunction<_dart_fmax>();

  double fmin(
    double _X,
    double _Y,
  ) {
    return _fmin(
      _X,
      _Y,
    );
  }

  late final _fmin_ptr = _lookup<ffi.NativeFunction<Native_fmin>>('fmin');
  late final _dart_fmin _fmin = _fmin_ptr.asFunction<_dart_fmin>();

  double frexp(
    double _X,
    ffi.Pointer<ffi.Int32> _Y,
  ) {
    return _frexp(
      _X,
      _Y,
    );
  }

  late final _frexp_ptr = _lookup<ffi.NativeFunction<Native_frexp>>('frexp');
  late final _dart_frexp _frexp = _frexp_ptr.asFunction<_dart_frexp>();

  double hypot(
    double _X,
    double _Y,
  ) {
    return _hypot_1(
      _X,
      _Y,
    );
  }

  late final _hypot_ptr = _lookup<ffi.NativeFunction<Native_hypot>>('hypot');
  late final _dart_hypot _hypot_1 = _hypot_ptr.asFunction<_dart_hypot>();

  double _hypot(
    double _X,
    double _Y,
  ) {
    return __hypot(
      _X,
      _Y,
    );
  }

  late final __hypot_ptr = _lookup<ffi.NativeFunction<Native__hypot>>('_hypot');
  late final _dart__hypot __hypot = __hypot_ptr.asFunction<_dart__hypot>();

  int ilogb(
    double _X,
  ) {
    return _ilogb(
      _X,
    );
  }

  late final _ilogb_ptr = _lookup<ffi.NativeFunction<Native_ilogb>>('ilogb');
  late final _dart_ilogb _ilogb = _ilogb_ptr.asFunction<_dart_ilogb>();

  double ldexp(
    double _X,
    int _Y,
  ) {
    return _ldexp(
      _X,
      _Y,
    );
  }

  late final _ldexp_ptr = _lookup<ffi.NativeFunction<Native_ldexp>>('ldexp');
  late final _dart_ldexp _ldexp = _ldexp_ptr.asFunction<_dart_ldexp>();

  double lgamma(
    double _X,
  ) {
    return _lgamma(
      _X,
    );
  }

  late final _lgamma_ptr = _lookup<ffi.NativeFunction<Native_lgamma>>('lgamma');
  late final _dart_lgamma _lgamma = _lgamma_ptr.asFunction<_dart_lgamma>();

  int llrint(
    double _X,
  ) {
    return _llrint(
      _X,
    );
  }

  late final _llrint_ptr = _lookup<ffi.NativeFunction<Native_llrint>>('llrint');
  late final _dart_llrint _llrint = _llrint_ptr.asFunction<_dart_llrint>();

  int llround(
    double _X,
  ) {
    return _llround(
      _X,
    );
  }

  late final _llround_ptr =
      _lookup<ffi.NativeFunction<Native_llround>>('llround');
  late final _dart_llround _llround = _llround_ptr.asFunction<_dart_llround>();

  double log1p(
    double _X,
  ) {
    return _log1p(
      _X,
    );
  }

  late final _log1p_ptr = _lookup<ffi.NativeFunction<Native_log1p>>('log1p');
  late final _dart_log1p _log1p = _log1p_ptr.asFunction<_dart_log1p>();

  double log2(
    double _X,
  ) {
    return _log2(
      _X,
    );
  }

  late final _log2_ptr = _lookup<ffi.NativeFunction<Native_log2>>('log2');
  late final _dart_log2 _log2 = _log2_ptr.asFunction<_dart_log2>();

  double logb(
    double _X,
  ) {
    return _logb_1(
      _X,
    );
  }

  late final _logb_ptr = _lookup<ffi.NativeFunction<Native_logb>>('logb');
  late final _dart_logb _logb_1 = _logb_ptr.asFunction<_dart_logb>();

  int lrint(
    double _X,
  ) {
    return _lrint(
      _X,
    );
  }

  late final _lrint_ptr = _lookup<ffi.NativeFunction<Native_lrint>>('lrint');
  late final _dart_lrint _lrint = _lrint_ptr.asFunction<_dart_lrint>();

  int lround(
    double _X,
  ) {
    return _lround(
      _X,
    );
  }

  late final _lround_ptr = _lookup<ffi.NativeFunction<Native_lround>>('lround');
  late final _dart_lround _lround = _lround_ptr.asFunction<_dart_lround>();

  int _matherr(
    ffi.Pointer<_exception> _Except,
  ) {
    return __matherr(
      _Except,
    );
  }

  late final __matherr_ptr =
      _lookup<ffi.NativeFunction<Native__matherr>>('_matherr');
  late final _dart__matherr __matherr =
      __matherr_ptr.asFunction<_dart__matherr>();

  double modf(
    double _X,
    ffi.Pointer<ffi.Double> _Y,
  ) {
    return _modf(
      _X,
      _Y,
    );
  }

  late final _modf_ptr = _lookup<ffi.NativeFunction<Native_modf>>('modf');
  late final _dart_modf _modf = _modf_ptr.asFunction<_dart_modf>();

  double nan(
    ffi.Pointer<ffi.Int8> _X,
  ) {
    return _nan(
      _X,
    );
  }

  late final _nan_ptr = _lookup<ffi.NativeFunction<Native_nan>>('nan');
  late final _dart_nan _nan = _nan_ptr.asFunction<_dart_nan>();

  double nearbyint(
    double _X,
  ) {
    return _nearbyint(
      _X,
    );
  }

  late final _nearbyint_ptr =
      _lookup<ffi.NativeFunction<Native_nearbyint>>('nearbyint');
  late final _dart_nearbyint _nearbyint =
      _nearbyint_ptr.asFunction<_dart_nearbyint>();

  double nextafter(
    double _X,
    double _Y,
  ) {
    return _nextafter_1(
      _X,
      _Y,
    );
  }

  late final _nextafter_ptr =
      _lookup<ffi.NativeFunction<Native_nextafter>>('nextafter');
  late final _dart_nextafter _nextafter_1 =
      _nextafter_ptr.asFunction<_dart_nextafter>();

  double remainder(
    double _X,
    double _Y,
  ) {
    return _remainder(
      _X,
      _Y,
    );
  }

  late final _remainder_ptr =
      _lookup<ffi.NativeFunction<Native_remainder>>('remainder');
  late final _dart_remainder _remainder =
      _remainder_ptr.asFunction<_dart_remainder>();

  double remquo(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int32> _Z,
  ) {
    return _remquo(
      _X,
      _Y,
      _Z,
    );
  }

  late final _remquo_ptr = _lookup<ffi.NativeFunction<Native_remquo>>('remquo');
  late final _dart_remquo _remquo = _remquo_ptr.asFunction<_dart_remquo>();

  double rint(
    double _X,
  ) {
    return _rint(
      _X,
    );
  }

  late final _rint_ptr = _lookup<ffi.NativeFunction<Native_rint>>('rint');
  late final _dart_rint _rint = _rint_ptr.asFunction<_dart_rint>();

  double round(
    double _X,
  ) {
    return _round(
      _X,
    );
  }

  late final _round_ptr = _lookup<ffi.NativeFunction<Native_round>>('round');
  late final _dart_round _round = _round_ptr.asFunction<_dart_round>();

  double scalbln(
    double _X,
    int _Y,
  ) {
    return _scalbln(
      _X,
      _Y,
    );
  }

  late final _scalbln_ptr =
      _lookup<ffi.NativeFunction<Native_scalbln>>('scalbln');
  late final _dart_scalbln _scalbln = _scalbln_ptr.asFunction<_dart_scalbln>();

  double scalbn(
    double _X,
    int _Y,
  ) {
    return _scalbn(
      _X,
      _Y,
    );
  }

  late final _scalbn_ptr = _lookup<ffi.NativeFunction<Native_scalbn>>('scalbn');
  late final _dart_scalbn _scalbn = _scalbn_ptr.asFunction<_dart_scalbn>();

  double tgamma(
    double _X,
  ) {
    return _tgamma(
      _X,
    );
  }

  late final _tgamma_ptr = _lookup<ffi.NativeFunction<Native_tgamma>>('tgamma');
  late final _dart_tgamma _tgamma = _tgamma_ptr.asFunction<_dart_tgamma>();

  double trunc(
    double _X,
  ) {
    return _trunc(
      _X,
    );
  }

  late final _trunc_ptr = _lookup<ffi.NativeFunction<Native_trunc>>('trunc');
  late final _dart_trunc _trunc = _trunc_ptr.asFunction<_dart_trunc>();

  double _j0(
    double _X,
  ) {
    return __j0(
      _X,
    );
  }

  late final __j0_ptr = _lookup<ffi.NativeFunction<Native__j0>>('_j0');
  late final _dart__j0 __j0 = __j0_ptr.asFunction<_dart__j0>();

  double _j1(
    double _X,
  ) {
    return __j1(
      _X,
    );
  }

  late final __j1_ptr = _lookup<ffi.NativeFunction<Native__j1>>('_j1');
  late final _dart__j1 __j1 = __j1_ptr.asFunction<_dart__j1>();

  double _jn(
    int _X,
    double _Y,
  ) {
    return __jn(
      _X,
      _Y,
    );
  }

  late final __jn_ptr = _lookup<ffi.NativeFunction<Native__jn>>('_jn');
  late final _dart__jn __jn = __jn_ptr.asFunction<_dart__jn>();

  double _y0(
    double _X,
  ) {
    return __y0(
      _X,
    );
  }

  late final __y0_ptr = _lookup<ffi.NativeFunction<Native__y0>>('_y0');
  late final _dart__y0 __y0 = __y0_ptr.asFunction<_dart__y0>();

  double _y1(
    double _X,
  ) {
    return __y1(
      _X,
    );
  }

  late final __y1_ptr = _lookup<ffi.NativeFunction<Native__y1>>('_y1');
  late final _dart__y1 __y1 = __y1_ptr.asFunction<_dart__y1>();

  double _yn(
    int _X,
    double _Y,
  ) {
    return __yn(
      _X,
      _Y,
    );
  }

  late final __yn_ptr = _lookup<ffi.NativeFunction<Native__yn>>('_yn');
  late final _dart__yn __yn = __yn_ptr.asFunction<_dart__yn>();

  double acoshf(
    double _X,
  ) {
    return _acoshf(
      _X,
    );
  }

  late final _acoshf_ptr = _lookup<ffi.NativeFunction<Native_acoshf>>('acoshf');
  late final _dart_acoshf _acoshf = _acoshf_ptr.asFunction<_dart_acoshf>();

  double asinhf(
    double _X,
  ) {
    return _asinhf(
      _X,
    );
  }

  late final _asinhf_ptr = _lookup<ffi.NativeFunction<Native_asinhf>>('asinhf');
  late final _dart_asinhf _asinhf = _asinhf_ptr.asFunction<_dart_asinhf>();

  double atanhf(
    double _X,
  ) {
    return _atanhf(
      _X,
    );
  }

  late final _atanhf_ptr = _lookup<ffi.NativeFunction<Native_atanhf>>('atanhf');
  late final _dart_atanhf _atanhf = _atanhf_ptr.asFunction<_dart_atanhf>();

  double cbrtf(
    double _X,
  ) {
    return _cbrtf(
      _X,
    );
  }

  late final _cbrtf_ptr = _lookup<ffi.NativeFunction<Native_cbrtf>>('cbrtf');
  late final _dart_cbrtf _cbrtf = _cbrtf_ptr.asFunction<_dart_cbrtf>();

  double _chgsignf(
    double _X,
  ) {
    return __chgsignf(
      _X,
    );
  }

  late final __chgsignf_ptr =
      _lookup<ffi.NativeFunction<Native__chgsignf>>('_chgsignf');
  late final _dart__chgsignf __chgsignf =
      __chgsignf_ptr.asFunction<_dart__chgsignf>();

  double copysignf(
    double _Number,
    double _Sign,
  ) {
    return _copysignf_1(
      _Number,
      _Sign,
    );
  }

  late final _copysignf_ptr =
      _lookup<ffi.NativeFunction<Native_copysignf>>('copysignf');
  late final _dart_copysignf _copysignf_1 =
      _copysignf_ptr.asFunction<_dart_copysignf>();

  double _copysignf(
    double _Number,
    double _Sign,
  ) {
    return __copysignf_1(
      _Number,
      _Sign,
    );
  }

  late final __copysignf_ptr =
      _lookup<ffi.NativeFunction<Native__copysignf>>('_copysignf');
  late final _dart__copysignf __copysignf_1 =
      __copysignf_ptr.asFunction<_dart__copysignf>();

  double erff(
    double _X,
  ) {
    return _erff(
      _X,
    );
  }

  late final _erff_ptr = _lookup<ffi.NativeFunction<Native_erff>>('erff');
  late final _dart_erff _erff = _erff_ptr.asFunction<_dart_erff>();

  double erfcf(
    double _X,
  ) {
    return _erfcf(
      _X,
    );
  }

  late final _erfcf_ptr = _lookup<ffi.NativeFunction<Native_erfcf>>('erfcf');
  late final _dart_erfcf _erfcf = _erfcf_ptr.asFunction<_dart_erfcf>();

  double expm1f(
    double _X,
  ) {
    return _expm1f(
      _X,
    );
  }

  late final _expm1f_ptr = _lookup<ffi.NativeFunction<Native_expm1f>>('expm1f');
  late final _dart_expm1f _expm1f = _expm1f_ptr.asFunction<_dart_expm1f>();

  double exp2f(
    double _X,
  ) {
    return _exp2f(
      _X,
    );
  }

  late final _exp2f_ptr = _lookup<ffi.NativeFunction<Native_exp2f>>('exp2f');
  late final _dart_exp2f _exp2f = _exp2f_ptr.asFunction<_dart_exp2f>();

  double fdimf(
    double _X,
    double _Y,
  ) {
    return _fdimf(
      _X,
      _Y,
    );
  }

  late final _fdimf_ptr = _lookup<ffi.NativeFunction<Native_fdimf>>('fdimf');
  late final _dart_fdimf _fdimf = _fdimf_ptr.asFunction<_dart_fdimf>();

  double fmaf(
    double _X,
    double _Y,
    double _Z,
  ) {
    return _fmaf(
      _X,
      _Y,
      _Z,
    );
  }

  late final _fmaf_ptr = _lookup<ffi.NativeFunction<Native_fmaf>>('fmaf');
  late final _dart_fmaf _fmaf = _fmaf_ptr.asFunction<_dart_fmaf>();

  double fmaxf(
    double _X,
    double _Y,
  ) {
    return _fmaxf(
      _X,
      _Y,
    );
  }

  late final _fmaxf_ptr = _lookup<ffi.NativeFunction<Native_fmaxf>>('fmaxf');
  late final _dart_fmaxf _fmaxf = _fmaxf_ptr.asFunction<_dart_fmaxf>();

  double fminf(
    double _X,
    double _Y,
  ) {
    return _fminf(
      _X,
      _Y,
    );
  }

  late final _fminf_ptr = _lookup<ffi.NativeFunction<Native_fminf>>('fminf');
  late final _dart_fminf _fminf = _fminf_ptr.asFunction<_dart_fminf>();

  double _hypotf(
    double _X,
    double _Y,
  ) {
    return __hypotf(
      _X,
      _Y,
    );
  }

  late final __hypotf_ptr =
      _lookup<ffi.NativeFunction<Native__hypotf>>('_hypotf');
  late final _dart__hypotf __hypotf = __hypotf_ptr.asFunction<_dart__hypotf>();

  int ilogbf(
    double _X,
  ) {
    return _ilogbf(
      _X,
    );
  }

  late final _ilogbf_ptr = _lookup<ffi.NativeFunction<Native_ilogbf>>('ilogbf');
  late final _dart_ilogbf _ilogbf = _ilogbf_ptr.asFunction<_dart_ilogbf>();

  double lgammaf(
    double _X,
  ) {
    return _lgammaf(
      _X,
    );
  }

  late final _lgammaf_ptr =
      _lookup<ffi.NativeFunction<Native_lgammaf>>('lgammaf');
  late final _dart_lgammaf _lgammaf = _lgammaf_ptr.asFunction<_dart_lgammaf>();

  int llrintf(
    double _X,
  ) {
    return _llrintf(
      _X,
    );
  }

  late final _llrintf_ptr =
      _lookup<ffi.NativeFunction<Native_llrintf>>('llrintf');
  late final _dart_llrintf _llrintf = _llrintf_ptr.asFunction<_dart_llrintf>();

  int llroundf(
    double _X,
  ) {
    return _llroundf(
      _X,
    );
  }

  late final _llroundf_ptr =
      _lookup<ffi.NativeFunction<Native_llroundf>>('llroundf');
  late final _dart_llroundf _llroundf =
      _llroundf_ptr.asFunction<_dart_llroundf>();

  double log1pf(
    double _X,
  ) {
    return _log1pf(
      _X,
    );
  }

  late final _log1pf_ptr = _lookup<ffi.NativeFunction<Native_log1pf>>('log1pf');
  late final _dart_log1pf _log1pf = _log1pf_ptr.asFunction<_dart_log1pf>();

  double log2f(
    double _X,
  ) {
    return _log2f(
      _X,
    );
  }

  late final _log2f_ptr = _lookup<ffi.NativeFunction<Native_log2f>>('log2f');
  late final _dart_log2f _log2f = _log2f_ptr.asFunction<_dart_log2f>();

  double logbf(
    double _X,
  ) {
    return _logbf_1(
      _X,
    );
  }

  late final _logbf_ptr = _lookup<ffi.NativeFunction<Native_logbf>>('logbf');
  late final _dart_logbf _logbf_1 = _logbf_ptr.asFunction<_dart_logbf>();

  int lrintf(
    double _X,
  ) {
    return _lrintf(
      _X,
    );
  }

  late final _lrintf_ptr = _lookup<ffi.NativeFunction<Native_lrintf>>('lrintf');
  late final _dart_lrintf _lrintf = _lrintf_ptr.asFunction<_dart_lrintf>();

  int lroundf(
    double _X,
  ) {
    return _lroundf(
      _X,
    );
  }

  late final _lroundf_ptr =
      _lookup<ffi.NativeFunction<Native_lroundf>>('lroundf');
  late final _dart_lroundf _lroundf = _lroundf_ptr.asFunction<_dart_lroundf>();

  double nanf(
    ffi.Pointer<ffi.Int8> _X,
  ) {
    return _nanf(
      _X,
    );
  }

  late final _nanf_ptr = _lookup<ffi.NativeFunction<Native_nanf>>('nanf');
  late final _dart_nanf _nanf = _nanf_ptr.asFunction<_dart_nanf>();

  double nearbyintf(
    double _X,
  ) {
    return _nearbyintf(
      _X,
    );
  }

  late final _nearbyintf_ptr =
      _lookup<ffi.NativeFunction<Native_nearbyintf>>('nearbyintf');
  late final _dart_nearbyintf _nearbyintf =
      _nearbyintf_ptr.asFunction<_dart_nearbyintf>();

  double nextafterf(
    double _X,
    double _Y,
  ) {
    return _nextafterf_1(
      _X,
      _Y,
    );
  }

  late final _nextafterf_ptr =
      _lookup<ffi.NativeFunction<Native_nextafterf>>('nextafterf');
  late final _dart_nextafterf _nextafterf_1 =
      _nextafterf_ptr.asFunction<_dart_nextafterf>();

  double remainderf(
    double _X,
    double _Y,
  ) {
    return _remainderf(
      _X,
      _Y,
    );
  }

  late final _remainderf_ptr =
      _lookup<ffi.NativeFunction<Native_remainderf>>('remainderf');
  late final _dart_remainderf _remainderf =
      _remainderf_ptr.asFunction<_dart_remainderf>();

  double remquof(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int32> _Z,
  ) {
    return _remquof(
      _X,
      _Y,
      _Z,
    );
  }

  late final _remquof_ptr =
      _lookup<ffi.NativeFunction<Native_remquof>>('remquof');
  late final _dart_remquof _remquof = _remquof_ptr.asFunction<_dart_remquof>();

  double rintf(
    double _X,
  ) {
    return _rintf(
      _X,
    );
  }

  late final _rintf_ptr = _lookup<ffi.NativeFunction<Native_rintf>>('rintf');
  late final _dart_rintf _rintf = _rintf_ptr.asFunction<_dart_rintf>();

  double roundf(
    double _X,
  ) {
    return _roundf(
      _X,
    );
  }

  late final _roundf_ptr = _lookup<ffi.NativeFunction<Native_roundf>>('roundf');
  late final _dart_roundf _roundf = _roundf_ptr.asFunction<_dart_roundf>();

  double scalblnf(
    double _X,
    int _Y,
  ) {
    return _scalblnf(
      _X,
      _Y,
    );
  }

  late final _scalblnf_ptr =
      _lookup<ffi.NativeFunction<Native_scalblnf>>('scalblnf');
  late final _dart_scalblnf _scalblnf =
      _scalblnf_ptr.asFunction<_dart_scalblnf>();

  double scalbnf(
    double _X,
    int _Y,
  ) {
    return _scalbnf(
      _X,
      _Y,
    );
  }

  late final _scalbnf_ptr =
      _lookup<ffi.NativeFunction<Native_scalbnf>>('scalbnf');
  late final _dart_scalbnf _scalbnf = _scalbnf_ptr.asFunction<_dart_scalbnf>();

  double tgammaf(
    double _X,
  ) {
    return _tgammaf(
      _X,
    );
  }

  late final _tgammaf_ptr =
      _lookup<ffi.NativeFunction<Native_tgammaf>>('tgammaf');
  late final _dart_tgammaf _tgammaf = _tgammaf_ptr.asFunction<_dart_tgammaf>();

  double truncf(
    double _X,
  ) {
    return _truncf(
      _X,
    );
  }

  late final _truncf_ptr = _lookup<ffi.NativeFunction<Native_truncf>>('truncf');
  late final _dart_truncf _truncf = _truncf_ptr.asFunction<_dart_truncf>();

  double _logbf(
    double _X,
  ) {
    return __logbf(
      _X,
    );
  }

  late final __logbf_ptr = _lookup<ffi.NativeFunction<Native__logbf>>('_logbf');
  late final _dart__logbf __logbf = __logbf_ptr.asFunction<_dart__logbf>();

  double _nextafterf(
    double _X,
    double _Y,
  ) {
    return __nextafterf(
      _X,
      _Y,
    );
  }

  late final __nextafterf_ptr =
      _lookup<ffi.NativeFunction<Native__nextafterf>>('_nextafterf');
  late final _dart__nextafterf __nextafterf =
      __nextafterf_ptr.asFunction<_dart__nextafterf>();

  int _finitef(
    double _X,
  ) {
    return __finitef(
      _X,
    );
  }

  late final __finitef_ptr =
      _lookup<ffi.NativeFunction<Native__finitef>>('_finitef');
  late final _dart__finitef __finitef =
      __finitef_ptr.asFunction<_dart__finitef>();

  int _isnanf(
    double _X,
  ) {
    return __isnanf(
      _X,
    );
  }

  late final __isnanf_ptr =
      _lookup<ffi.NativeFunction<Native__isnanf>>('_isnanf');
  late final _dart__isnanf __isnanf = __isnanf_ptr.asFunction<_dart__isnanf>();

  int _fpclassf(
    double _X,
  ) {
    return __fpclassf(
      _X,
    );
  }

  late final __fpclassf_ptr =
      _lookup<ffi.NativeFunction<Native__fpclassf>>('_fpclassf');
  late final _dart__fpclassf __fpclassf =
      __fpclassf_ptr.asFunction<_dart__fpclassf>();

  int _set_FMA3_enable(
    int _Flag,
  ) {
    return __set_FMA3_enable(
      _Flag,
    );
  }

  late final __set_FMA3_enable_ptr =
      _lookup<ffi.NativeFunction<Native__set_FMA3_enable>>('_set_FMA3_enable');
  late final _dart__set_FMA3_enable __set_FMA3_enable =
      __set_FMA3_enable_ptr.asFunction<_dart__set_FMA3_enable>();

  int _get_FMA3_enable() {
    return __get_FMA3_enable();
  }

  late final __get_FMA3_enable_ptr =
      _lookup<ffi.NativeFunction<Native__get_FMA3_enable>>('_get_FMA3_enable');
  late final _dart__get_FMA3_enable __get_FMA3_enable =
      __get_FMA3_enable_ptr.asFunction<_dart__get_FMA3_enable>();

  double acosf(
    double _X,
  ) {
    return _acosf(
      _X,
    );
  }

  late final _acosf_ptr = _lookup<ffi.NativeFunction<Native_acosf>>('acosf');
  late final _dart_acosf _acosf = _acosf_ptr.asFunction<_dart_acosf>();

  double asinf(
    double _X,
  ) {
    return _asinf(
      _X,
    );
  }

  late final _asinf_ptr = _lookup<ffi.NativeFunction<Native_asinf>>('asinf');
  late final _dart_asinf _asinf = _asinf_ptr.asFunction<_dart_asinf>();

  double atan2f(
    double _Y,
    double _X,
  ) {
    return _atan2f(
      _Y,
      _X,
    );
  }

  late final _atan2f_ptr = _lookup<ffi.NativeFunction<Native_atan2f>>('atan2f');
  late final _dart_atan2f _atan2f = _atan2f_ptr.asFunction<_dart_atan2f>();

  double atanf(
    double _X,
  ) {
    return _atanf(
      _X,
    );
  }

  late final _atanf_ptr = _lookup<ffi.NativeFunction<Native_atanf>>('atanf');
  late final _dart_atanf _atanf = _atanf_ptr.asFunction<_dart_atanf>();

  double ceilf(
    double _X,
  ) {
    return _ceilf(
      _X,
    );
  }

  late final _ceilf_ptr = _lookup<ffi.NativeFunction<Native_ceilf>>('ceilf');
  late final _dart_ceilf _ceilf = _ceilf_ptr.asFunction<_dart_ceilf>();

  double cosf(
    double _X,
  ) {
    return _cosf(
      _X,
    );
  }

  late final _cosf_ptr = _lookup<ffi.NativeFunction<Native_cosf>>('cosf');
  late final _dart_cosf _cosf = _cosf_ptr.asFunction<_dart_cosf>();

  double coshf(
    double _X,
  ) {
    return _coshf(
      _X,
    );
  }

  late final _coshf_ptr = _lookup<ffi.NativeFunction<Native_coshf>>('coshf');
  late final _dart_coshf _coshf = _coshf_ptr.asFunction<_dart_coshf>();

  double expf(
    double _X,
  ) {
    return _expf(
      _X,
    );
  }

  late final _expf_ptr = _lookup<ffi.NativeFunction<Native_expf>>('expf');
  late final _dart_expf _expf = _expf_ptr.asFunction<_dart_expf>();

  double floorf(
    double _X,
  ) {
    return _floorf(
      _X,
    );
  }

  late final _floorf_ptr = _lookup<ffi.NativeFunction<Native_floorf>>('floorf');
  late final _dart_floorf _floorf = _floorf_ptr.asFunction<_dart_floorf>();

  double fmodf(
    double _X,
    double _Y,
  ) {
    return _fmodf(
      _X,
      _Y,
    );
  }

  late final _fmodf_ptr = _lookup<ffi.NativeFunction<Native_fmodf>>('fmodf');
  late final _dart_fmodf _fmodf = _fmodf_ptr.asFunction<_dart_fmodf>();

  double log10f(
    double _X,
  ) {
    return _log10f(
      _X,
    );
  }

  late final _log10f_ptr = _lookup<ffi.NativeFunction<Native_log10f>>('log10f');
  late final _dart_log10f _log10f = _log10f_ptr.asFunction<_dart_log10f>();

  double logf(
    double _X,
  ) {
    return _logf(
      _X,
    );
  }

  late final _logf_ptr = _lookup<ffi.NativeFunction<Native_logf>>('logf');
  late final _dart_logf _logf = _logf_ptr.asFunction<_dart_logf>();

  double modff(
    double _X,
    ffi.Pointer<ffi.Float> _Y,
  ) {
    return _modff(
      _X,
      _Y,
    );
  }

  late final _modff_ptr = _lookup<ffi.NativeFunction<Native_modff>>('modff');
  late final _dart_modff _modff = _modff_ptr.asFunction<_dart_modff>();

  double powf(
    double _X,
    double _Y,
  ) {
    return _powf(
      _X,
      _Y,
    );
  }

  late final _powf_ptr = _lookup<ffi.NativeFunction<Native_powf>>('powf');
  late final _dart_powf _powf = _powf_ptr.asFunction<_dart_powf>();

  double sinf(
    double _X,
  ) {
    return _sinf(
      _X,
    );
  }

  late final _sinf_ptr = _lookup<ffi.NativeFunction<Native_sinf>>('sinf');
  late final _dart_sinf _sinf = _sinf_ptr.asFunction<_dart_sinf>();

  double sinhf(
    double _X,
  ) {
    return _sinhf(
      _X,
    );
  }

  late final _sinhf_ptr = _lookup<ffi.NativeFunction<Native_sinhf>>('sinhf');
  late final _dart_sinhf _sinhf = _sinhf_ptr.asFunction<_dart_sinhf>();

  double sqrtf(
    double _X,
  ) {
    return _sqrtf(
      _X,
    );
  }

  late final _sqrtf_ptr = _lookup<ffi.NativeFunction<Native_sqrtf>>('sqrtf');
  late final _dart_sqrtf _sqrtf = _sqrtf_ptr.asFunction<_dart_sqrtf>();

  double tanf(
    double _X,
  ) {
    return _tanf(
      _X,
    );
  }

  late final _tanf_ptr = _lookup<ffi.NativeFunction<Native_tanf>>('tanf');
  late final _dart_tanf _tanf = _tanf_ptr.asFunction<_dart_tanf>();

  double tanhf(
    double _X,
  ) {
    return _tanhf(
      _X,
    );
  }

  late final _tanhf_ptr = _lookup<ffi.NativeFunction<Native_tanhf>>('tanhf');
  late final _dart_tanhf _tanhf = _tanhf_ptr.asFunction<_dart_tanhf>();

  late final ffi.Pointer<ffi.Double> _HUGE_1 = _lookup<ffi.Double>('HUGE');

  double get HUGE => _HUGE_1.value;

  set HUGE(double value) => _HUGE_1.value = value;

  double j0(
    double _X,
  ) {
    return _j0_1(
      _X,
    );
  }

  late final _j0_ptr = _lookup<ffi.NativeFunction<Native_j0>>('j0');
  late final _dart_j0 _j0_1 = _j0_ptr.asFunction<_dart_j0>();

  double j1(
    double _X,
  ) {
    return _j1_1(
      _X,
    );
  }

  late final _j1_ptr = _lookup<ffi.NativeFunction<Native_j1>>('j1');
  late final _dart_j1 _j1_1 = _j1_ptr.asFunction<_dart_j1>();

  double jn(
    int _X,
    double _Y,
  ) {
    return _jn_1(
      _X,
      _Y,
    );
  }

  late final _jn_ptr = _lookup<ffi.NativeFunction<Native_jn>>('jn');
  late final _dart_jn _jn_1 = _jn_ptr.asFunction<_dart_jn>();

  double y0(
    double _X,
  ) {
    return _y0_1(
      _X,
    );
  }

  late final _y0_ptr = _lookup<ffi.NativeFunction<Native_y0>>('y0');
  late final _dart_y0 _y0_1 = _y0_ptr.asFunction<_dart_y0>();

  double y1(
    double _X,
  ) {
    return _y1_1(
      _X,
    );
  }

  late final _y1_ptr = _lookup<ffi.NativeFunction<Native_y1>>('y1');
  late final _dart_y1 _y1_1 = _y1_ptr.asFunction<_dart_y1>();

  double yn(
    int _X,
    double _Y,
  ) {
    return _yn_1(
      _X,
      _Y,
    );
  }

  late final _yn_ptr = _lookup<ffi.NativeFunction<Native_yn>>('yn');
  late final _dart_yn _yn_1 = _yn_ptr.asFunction<_dart_yn>();

  ffi.Pointer<ffi.Void> _calloc_base(
    int _Count,
    int _Size,
  ) {
    return __calloc_base(
      _Count,
      _Size,
    );
  }

  late final __calloc_base_ptr =
      _lookup<ffi.NativeFunction<Native__calloc_base>>('_calloc_base');
  late final _dart__calloc_base __calloc_base =
      __calloc_base_ptr.asFunction<_dart__calloc_base>();

  ffi.Pointer<ffi.Void> calloc(
    int _Count,
    int _Size,
  ) {
    return _calloc(
      _Count,
      _Size,
    );
  }

  late final _calloc_ptr = _lookup<ffi.NativeFunction<Native_calloc>>('calloc');
  late final _dart_calloc _calloc = _calloc_ptr.asFunction<_dart_calloc>();

  int _callnewh(
    int _Size,
  ) {
    return __callnewh(
      _Size,
    );
  }

  late final __callnewh_ptr =
      _lookup<ffi.NativeFunction<Native__callnewh>>('_callnewh');
  late final _dart__callnewh __callnewh =
      __callnewh_ptr.asFunction<_dart__callnewh>();

  ffi.Pointer<ffi.Void> _expand(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return __expand(
      _Block,
      _Size,
    );
  }

  late final __expand_ptr =
      _lookup<ffi.NativeFunction<Native__expand>>('_expand');
  late final _dart__expand __expand = __expand_ptr.asFunction<_dart__expand>();

  void _free_base(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __free_base(
      _Block,
    );
  }

  late final __free_base_ptr =
      _lookup<ffi.NativeFunction<Native__free_base>>('_free_base');
  late final _dart__free_base __free_base =
      __free_base_ptr.asFunction<_dart__free_base>();

  void free(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return _free(
      _Block,
    );
  }

  late final _free_ptr = _lookup<ffi.NativeFunction<Native_free>>('free');
  late final _dart_free _free = _free_ptr.asFunction<_dart_free>();

  ffi.Pointer<ffi.Void> _malloc_base(
    int _Size,
  ) {
    return __malloc_base(
      _Size,
    );
  }

  late final __malloc_base_ptr =
      _lookup<ffi.NativeFunction<Native__malloc_base>>('_malloc_base');
  late final _dart__malloc_base __malloc_base =
      __malloc_base_ptr.asFunction<_dart__malloc_base>();

  ffi.Pointer<ffi.Void> malloc(
    int _Size,
  ) {
    return _malloc(
      _Size,
    );
  }

  late final _malloc_ptr = _lookup<ffi.NativeFunction<Native_malloc>>('malloc');
  late final _dart_malloc _malloc = _malloc_ptr.asFunction<_dart_malloc>();

  int _msize_base(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __msize_base(
      _Block,
    );
  }

  late final __msize_base_ptr =
      _lookup<ffi.NativeFunction<Native__msize_base>>('_msize_base');
  late final _dart__msize_base __msize_base =
      __msize_base_ptr.asFunction<_dart__msize_base>();

  int _msize(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __msize(
      _Block,
    );
  }

  late final __msize_ptr = _lookup<ffi.NativeFunction<Native__msize>>('_msize');
  late final _dart__msize __msize = __msize_ptr.asFunction<_dart__msize>();

  ffi.Pointer<ffi.Void> _realloc_base(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return __realloc_base(
      _Block,
      _Size,
    );
  }

  late final __realloc_base_ptr =
      _lookup<ffi.NativeFunction<Native__realloc_base>>('_realloc_base');
  late final _dart__realloc_base __realloc_base =
      __realloc_base_ptr.asFunction<_dart__realloc_base>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return _realloc(
      _Block,
      _Size,
    );
  }

  late final _realloc_ptr =
      _lookup<ffi.NativeFunction<Native_realloc>>('realloc');
  late final _dart_realloc _realloc = _realloc_ptr.asFunction<_dart_realloc>();

  ffi.Pointer<ffi.Void> _recalloc_base(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
  ) {
    return __recalloc_base(
      _Block,
      _Count,
      _Size,
    );
  }

  late final __recalloc_base_ptr =
      _lookup<ffi.NativeFunction<Native__recalloc_base>>('_recalloc_base');
  late final _dart__recalloc_base __recalloc_base =
      __recalloc_base_ptr.asFunction<_dart__recalloc_base>();

  ffi.Pointer<ffi.Void> _recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
  ) {
    return __recalloc(
      _Block,
      _Count,
      _Size,
    );
  }

  late final __recalloc_ptr =
      _lookup<ffi.NativeFunction<Native__recalloc>>('_recalloc');
  late final _dart__recalloc __recalloc =
      __recalloc_ptr.asFunction<_dart__recalloc>();

  void _aligned_free(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __aligned_free(
      _Block,
    );
  }

  late final __aligned_free_ptr =
      _lookup<ffi.NativeFunction<Native__aligned_free>>('_aligned_free');
  late final _dart__aligned_free __aligned_free =
      __aligned_free_ptr.asFunction<_dart__aligned_free>();

  ffi.Pointer<ffi.Void> _aligned_malloc(
    int _Size,
    int _Alignment,
  ) {
    return __aligned_malloc(
      _Size,
      _Alignment,
    );
  }

  late final __aligned_malloc_ptr =
      _lookup<ffi.NativeFunction<Native__aligned_malloc>>('_aligned_malloc');
  late final _dart__aligned_malloc __aligned_malloc =
      __aligned_malloc_ptr.asFunction<_dart__aligned_malloc>();

  ffi.Pointer<ffi.Void> _aligned_offset_malloc(
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_offset_malloc(
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_offset_malloc_ptr =
      _lookup<ffi.NativeFunction<Native__aligned_offset_malloc>>(
          '_aligned_offset_malloc');
  late final _dart__aligned_offset_malloc __aligned_offset_malloc =
      __aligned_offset_malloc_ptr.asFunction<_dart__aligned_offset_malloc>();

  int _aligned_msize(
    ffi.Pointer<ffi.Void> _Block,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_msize(
      _Block,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_msize_ptr =
      _lookup<ffi.NativeFunction<Native__aligned_msize>>('_aligned_msize');
  late final _dart__aligned_msize __aligned_msize =
      __aligned_msize_ptr.asFunction<_dart__aligned_msize>();

  ffi.Pointer<ffi.Void> _aligned_offset_realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_offset_realloc(
      _Block,
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_offset_realloc_ptr =
      _lookup<ffi.NativeFunction<Native__aligned_offset_realloc>>(
          '_aligned_offset_realloc');
  late final _dart__aligned_offset_realloc __aligned_offset_realloc =
      __aligned_offset_realloc_ptr.asFunction<_dart__aligned_offset_realloc>();

  ffi.Pointer<ffi.Void> _aligned_offset_recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_offset_recalloc(
      _Block,
      _Count,
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_offset_recalloc_ptr =
      _lookup<ffi.NativeFunction<Native__aligned_offset_recalloc>>(
          '_aligned_offset_recalloc');
  late final _dart__aligned_offset_recalloc __aligned_offset_recalloc =
      __aligned_offset_recalloc_ptr
          .asFunction<_dart__aligned_offset_recalloc>();

  ffi.Pointer<ffi.Void> _aligned_realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
    int _Alignment,
  ) {
    return __aligned_realloc(
      _Block,
      _Size,
      _Alignment,
    );
  }

  late final __aligned_realloc_ptr =
      _lookup<ffi.NativeFunction<Native__aligned_realloc>>('_aligned_realloc');
  late final _dart__aligned_realloc __aligned_realloc =
      __aligned_realloc_ptr.asFunction<_dart__aligned_realloc>();

  ffi.Pointer<ffi.Void> _aligned_recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
    int _Alignment,
  ) {
    return __aligned_recalloc(
      _Block,
      _Count,
      _Size,
      _Alignment,
    );
  }

  late final __aligned_recalloc_ptr =
      _lookup<ffi.NativeFunction<Native__aligned_recalloc>>(
          '_aligned_recalloc');
  late final _dart__aligned_recalloc __aligned_recalloc =
      __aligned_recalloc_ptr.asFunction<_dart__aligned_recalloc>();

  ffi.Pointer<ffi.Void> bsearch_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
        _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return _bsearch_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final _bsearch_s_ptr =
      _lookup<ffi.NativeFunction<Native_bsearch_s>>('bsearch_s');
  late final _dart_bsearch_s _bsearch_s =
      _bsearch_s_ptr.asFunction<_dart_bsearch_s>();

  void qsort_s(
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
        _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return _qsort_s(
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final _qsort_s_ptr =
      _lookup<ffi.NativeFunction<Native_qsort_s>>('qsort_s');
  late final _dart_qsort_s _qsort_s = _qsort_s_ptr.asFunction<_dart_qsort_s>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
        _CompareFunction,
  ) {
    return _bsearch(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _bsearch_ptr =
      _lookup<ffi.NativeFunction<Native_bsearch>>('bsearch');
  late final _dart_bsearch _bsearch = _bsearch_ptr.asFunction<_dart_bsearch>();

  void qsort(
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
        _CompareFunction,
  ) {
    return _qsort(
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _qsort_ptr = _lookup<ffi.NativeFunction<Native_qsort>>('qsort');
  late final _dart_qsort _qsort = _qsort_ptr.asFunction<_dart_qsort>();

  ffi.Pointer<ffi.Void> _lfind_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
        _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return __lfind_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final __lfind_s_ptr =
      _lookup<ffi.NativeFunction<Native__lfind_s>>('_lfind_s');
  late final _dart__lfind_s __lfind_s =
      __lfind_s_ptr.asFunction<_dart__lfind_s>();

  ffi.Pointer<ffi.Void> _lfind(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
        _CompareFunction,
  ) {
    return __lfind(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final __lfind_ptr = _lookup<ffi.NativeFunction<Native__lfind>>('_lfind');
  late final _dart__lfind __lfind = __lfind_ptr.asFunction<_dart__lfind>();

  ffi.Pointer<ffi.Void> _lsearch_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
        _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return __lsearch_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final __lsearch_s_ptr =
      _lookup<ffi.NativeFunction<Native__lsearch_s>>('_lsearch_s');
  late final _dart__lsearch_s __lsearch_s =
      __lsearch_s_ptr.asFunction<_dart__lsearch_s>();

  ffi.Pointer<ffi.Void> _lsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
        _CompareFunction,
  ) {
    return __lsearch(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final __lsearch_ptr =
      _lookup<ffi.NativeFunction<Native__lsearch>>('_lsearch');
  late final _dart__lsearch __lsearch =
      __lsearch_ptr.asFunction<_dart__lsearch>();

  ffi.Pointer<ffi.Void> lfind(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
        _CompareFunction,
  ) {
    return _lfind_1(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _lfind_ptr = _lookup<ffi.NativeFunction<Native_lfind>>('lfind');
  late final _dart_lfind _lfind_1 = _lfind_ptr.asFunction<_dart_lfind>();

  ffi.Pointer<ffi.Void> lsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
        _CompareFunction,
  ) {
    return _lsearch_1(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _lsearch_ptr =
      _lookup<ffi.NativeFunction<Native_lsearch>>('lsearch');
  late final _dart_lsearch _lsearch_1 =
      _lsearch_ptr.asFunction<_dart_lsearch>();

  int _itow_s(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __itow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __itow_s_ptr =
      _lookup<ffi.NativeFunction<Native__itow_s>>('_itow_s');
  late final _dart__itow_s __itow_s = __itow_s_ptr.asFunction<_dart__itow_s>();

  ffi.Pointer<ffi.Uint16> _itow(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _Radix,
  ) {
    return __itow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __itow_ptr = _lookup<ffi.NativeFunction<Native__itow>>('_itow');
  late final _dart__itow __itow = __itow_ptr.asFunction<_dart__itow>();

  int _ltow_s(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ltow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ltow_s_ptr =
      _lookup<ffi.NativeFunction<Native__ltow_s>>('_ltow_s');
  late final _dart__ltow_s __ltow_s = __ltow_s_ptr.asFunction<_dart__ltow_s>();

  ffi.Pointer<ffi.Uint16> _ltow(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _Radix,
  ) {
    return __ltow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ltow_ptr = _lookup<ffi.NativeFunction<Native__ltow>>('_ltow');
  late final _dart__ltow __ltow = __ltow_ptr.asFunction<_dart__ltow>();

  int _ultow_s(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ultow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ultow_s_ptr =
      _lookup<ffi.NativeFunction<Native__ultow_s>>('_ultow_s');
  late final _dart__ultow_s __ultow_s =
      __ultow_s_ptr.asFunction<_dart__ultow_s>();

  ffi.Pointer<ffi.Uint16> _ultow(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _Radix,
  ) {
    return __ultow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ultow_ptr = _lookup<ffi.NativeFunction<Native__ultow>>('_ultow');
  late final _dart__ultow __ultow = __ultow_ptr.asFunction<_dart__ultow>();

  double wcstod(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ) {
    return _wcstod(
      _String,
      _EndPtr,
    );
  }

  late final _wcstod_ptr = _lookup<ffi.NativeFunction<Native_wcstod>>('wcstod');
  late final _dart_wcstod _wcstod = _wcstod_ptr.asFunction<_dart_wcstod>();

  double _wcstod_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcstod_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __wcstod_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcstod_l>>('_wcstod_l');
  late final _dart__wcstod_l __wcstod_l =
      __wcstod_l_ptr.asFunction<_dart__wcstod_l>();

  int wcstol(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
  ) {
    return _wcstol(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstol_ptr = _lookup<ffi.NativeFunction<Native_wcstol>>('wcstol');
  late final _dart_wcstol _wcstol = _wcstol_ptr.asFunction<_dart_wcstol>();

  int _wcstol_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcstol_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstol_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcstol_l>>('_wcstol_l');
  late final _dart__wcstol_l __wcstol_l =
      __wcstol_l_ptr.asFunction<_dart__wcstol_l>();

  int wcstoll(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoll(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoll_ptr =
      _lookup<ffi.NativeFunction<Native_wcstoll>>('wcstoll');
  late final _dart_wcstoll _wcstoll = _wcstoll_ptr.asFunction<_dart_wcstoll>();

  int _wcstoll_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcstoll_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoll_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcstoll_l>>('_wcstoll_l');
  late final _dart__wcstoll_l __wcstoll_l =
      __wcstoll_l_ptr.asFunction<_dart__wcstoll_l>();

  int wcstoul(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoul(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoul_ptr =
      _lookup<ffi.NativeFunction<Native_wcstoul>>('wcstoul');
  late final _dart_wcstoul _wcstoul = _wcstoul_ptr.asFunction<_dart_wcstoul>();

  int _wcstoul_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcstoul_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoul_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcstoul_l>>('_wcstoul_l');
  late final _dart__wcstoul_l __wcstoul_l =
      __wcstoul_l_ptr.asFunction<_dart__wcstoul_l>();

  int wcstoull(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoull(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoull_ptr =
      _lookup<ffi.NativeFunction<Native_wcstoull>>('wcstoull');
  late final _dart_wcstoull _wcstoull =
      _wcstoull_ptr.asFunction<_dart_wcstoull>();

  int _wcstoull_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcstoull_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoull_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcstoull_l>>('_wcstoull_l');
  late final _dart__wcstoull_l __wcstoull_l =
      __wcstoull_l_ptr.asFunction<_dart__wcstoull_l>();

  double wcstof(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ) {
    return _wcstof(
      _String,
      _EndPtr,
    );
  }

  late final _wcstof_ptr = _lookup<ffi.NativeFunction<Native_wcstof>>('wcstof');
  late final _dart_wcstof _wcstof = _wcstof_ptr.asFunction<_dart_wcstof>();

  double _wcstof_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcstof_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __wcstof_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcstof_l>>('_wcstof_l');
  late final _dart__wcstof_l __wcstof_l =
      __wcstof_l_ptr.asFunction<_dart__wcstof_l>();

  double _wtof(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return __wtof(
      _String,
    );
  }

  late final __wtof_ptr = _lookup<ffi.NativeFunction<Native__wtof>>('_wtof');
  late final _dart__wtof __wtof = __wtof_ptr.asFunction<_dart__wtof>();

  double _wtof_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wtof_l(
      _String,
      _Locale,
    );
  }

  late final __wtof_l_ptr =
      _lookup<ffi.NativeFunction<Native__wtof_l>>('_wtof_l');
  late final _dart__wtof_l __wtof_l = __wtof_l_ptr.asFunction<_dart__wtof_l>();

  int _wtoi(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return __wtoi(
      _String,
    );
  }

  late final __wtoi_ptr = _lookup<ffi.NativeFunction<Native__wtoi>>('_wtoi');
  late final _dart__wtoi __wtoi = __wtoi_ptr.asFunction<_dart__wtoi>();

  int _wtoi_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wtoi_l(
      _String,
      _Locale,
    );
  }

  late final __wtoi_l_ptr =
      _lookup<ffi.NativeFunction<Native__wtoi_l>>('_wtoi_l');
  late final _dart__wtoi_l __wtoi_l = __wtoi_l_ptr.asFunction<_dart__wtoi_l>();

  int _wtol(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return __wtol(
      _String,
    );
  }

  late final __wtol_ptr = _lookup<ffi.NativeFunction<Native__wtol>>('_wtol');
  late final _dart__wtol __wtol = __wtol_ptr.asFunction<_dart__wtol>();

  int _wtol_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wtol_l(
      _String,
      _Locale,
    );
  }

  late final __wtol_l_ptr =
      _lookup<ffi.NativeFunction<Native__wtol_l>>('_wtol_l');
  late final _dart__wtol_l __wtol_l = __wtol_l_ptr.asFunction<_dart__wtol_l>();

  int _wtoll(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return __wtoll(
      _String,
    );
  }

  late final __wtoll_ptr = _lookup<ffi.NativeFunction<Native__wtoll>>('_wtoll');
  late final _dart__wtoll __wtoll = __wtoll_ptr.asFunction<_dart__wtoll>();

  int _wtoll_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wtoll_l(
      _String,
      _Locale,
    );
  }

  late final __wtoll_l_ptr =
      _lookup<ffi.NativeFunction<Native__wtoll_l>>('_wtoll_l');
  late final _dart__wtoll_l __wtoll_l =
      __wtoll_l_ptr.asFunction<_dart__wtoll_l>();

  int _i64tow_s(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __i64tow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __i64tow_s_ptr =
      _lookup<ffi.NativeFunction<Native__i64tow_s>>('_i64tow_s');
  late final _dart__i64tow_s __i64tow_s =
      __i64tow_s_ptr.asFunction<_dart__i64tow_s>();

  ffi.Pointer<ffi.Uint16> _i64tow(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _Radix,
  ) {
    return __i64tow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __i64tow_ptr =
      _lookup<ffi.NativeFunction<Native__i64tow>>('_i64tow');
  late final _dart__i64tow __i64tow = __i64tow_ptr.asFunction<_dart__i64tow>();

  int _ui64tow_s(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ui64tow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ui64tow_s_ptr =
      _lookup<ffi.NativeFunction<Native__ui64tow_s>>('_ui64tow_s');
  late final _dart__ui64tow_s __ui64tow_s =
      __ui64tow_s_ptr.asFunction<_dart__ui64tow_s>();

  ffi.Pointer<ffi.Uint16> _ui64tow(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _Radix,
  ) {
    return __ui64tow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ui64tow_ptr =
      _lookup<ffi.NativeFunction<Native__ui64tow>>('_ui64tow');
  late final _dart__ui64tow __ui64tow =
      __ui64tow_ptr.asFunction<_dart__ui64tow>();

  int _wtoi64(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return __wtoi64(
      _String,
    );
  }

  late final __wtoi64_ptr =
      _lookup<ffi.NativeFunction<Native__wtoi64>>('_wtoi64');
  late final _dart__wtoi64 __wtoi64 = __wtoi64_ptr.asFunction<_dart__wtoi64>();

  int _wtoi64_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wtoi64_l(
      _String,
      _Locale,
    );
  }

  late final __wtoi64_l_ptr =
      _lookup<ffi.NativeFunction<Native__wtoi64_l>>('_wtoi64_l');
  late final _dart__wtoi64_l __wtoi64_l =
      __wtoi64_l_ptr.asFunction<_dart__wtoi64_l>();

  int _wcstoi64(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
  ) {
    return __wcstoi64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __wcstoi64_ptr =
      _lookup<ffi.NativeFunction<Native__wcstoi64>>('_wcstoi64');
  late final _dart__wcstoi64 __wcstoi64 =
      __wcstoi64_ptr.asFunction<_dart__wcstoi64>();

  int _wcstoi64_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcstoi64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoi64_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcstoi64_l>>('_wcstoi64_l');
  late final _dart__wcstoi64_l __wcstoi64_l =
      __wcstoi64_l_ptr.asFunction<_dart__wcstoi64_l>();

  int _wcstoui64(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
  ) {
    return __wcstoui64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __wcstoui64_ptr =
      _lookup<ffi.NativeFunction<Native__wcstoui64>>('_wcstoui64');
  late final _dart__wcstoui64 __wcstoui64 =
      __wcstoui64_ptr.asFunction<_dart__wcstoui64>();

  int _wcstoui64_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcstoui64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoui64_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcstoui64_l>>('_wcstoui64_l');
  late final _dart__wcstoui64_l __wcstoui64_l =
      __wcstoui64_l_ptr.asFunction<_dart__wcstoui64_l>();

  ffi.Pointer<ffi.Uint16> _wfullpath(
    ffi.Pointer<ffi.Uint16> _Buffer,
    ffi.Pointer<ffi.Uint16> _Path,
    int _BufferCount,
  ) {
    return __wfullpath(
      _Buffer,
      _Path,
      _BufferCount,
    );
  }

  late final __wfullpath_ptr =
      _lookup<ffi.NativeFunction<Native__wfullpath>>('_wfullpath');
  late final _dart__wfullpath __wfullpath =
      __wfullpath_ptr.asFunction<_dart__wfullpath>();

  int _wmakepath_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Uint16> _Drive,
    ffi.Pointer<ffi.Uint16> _Dir,
    ffi.Pointer<ffi.Uint16> _Filename,
    ffi.Pointer<ffi.Uint16> _Ext,
  ) {
    return __wmakepath_s(
      _Buffer,
      _BufferCount,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wmakepath_s_ptr =
      _lookup<ffi.NativeFunction<Native__wmakepath_s>>('_wmakepath_s');
  late final _dart__wmakepath_s __wmakepath_s =
      __wmakepath_s_ptr.asFunction<_dart__wmakepath_s>();

  void _wmakepath(
    ffi.Pointer<ffi.Uint16> _Buffer,
    ffi.Pointer<ffi.Uint16> _Drive,
    ffi.Pointer<ffi.Uint16> _Dir,
    ffi.Pointer<ffi.Uint16> _Filename,
    ffi.Pointer<ffi.Uint16> _Ext,
  ) {
    return __wmakepath(
      _Buffer,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wmakepath_ptr =
      _lookup<ffi.NativeFunction<Native__wmakepath>>('_wmakepath');
  late final _dart__wmakepath __wmakepath =
      __wmakepath_ptr.asFunction<_dart__wmakepath>();

  void _wperror(
    ffi.Pointer<ffi.Uint16> _ErrorMessage,
  ) {
    return __wperror(
      _ErrorMessage,
    );
  }

  late final __wperror_ptr =
      _lookup<ffi.NativeFunction<Native__wperror>>('_wperror');
  late final _dart__wperror __wperror =
      __wperror_ptr.asFunction<_dart__wperror>();

  void _wsplitpath(
    ffi.Pointer<ffi.Uint16> _FullPath,
    ffi.Pointer<ffi.Uint16> _Drive,
    ffi.Pointer<ffi.Uint16> _Dir,
    ffi.Pointer<ffi.Uint16> _Filename,
    ffi.Pointer<ffi.Uint16> _Ext,
  ) {
    return __wsplitpath(
      _FullPath,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wsplitpath_ptr =
      _lookup<ffi.NativeFunction<Native__wsplitpath>>('_wsplitpath');
  late final _dart__wsplitpath __wsplitpath =
      __wsplitpath_ptr.asFunction<_dart__wsplitpath>();

  int _wsplitpath_s(
    ffi.Pointer<ffi.Uint16> _FullPath,
    ffi.Pointer<ffi.Uint16> _Drive,
    int _DriveCount,
    ffi.Pointer<ffi.Uint16> _Dir,
    int _DirCount,
    ffi.Pointer<ffi.Uint16> _Filename,
    int _FilenameCount,
    ffi.Pointer<ffi.Uint16> _Ext,
    int _ExtCount,
  ) {
    return __wsplitpath_s(
      _FullPath,
      _Drive,
      _DriveCount,
      _Dir,
      _DirCount,
      _Filename,
      _FilenameCount,
      _Ext,
      _ExtCount,
    );
  }

  late final __wsplitpath_s_ptr =
      _lookup<ffi.NativeFunction<Native__wsplitpath_s>>('_wsplitpath_s');
  late final _dart__wsplitpath_s __wsplitpath_s =
      __wsplitpath_s_ptr.asFunction<_dart__wsplitpath_s>();

  int _wdupenv_s(
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Buffer,
    ffi.Pointer<ffi.Uint64> _BufferCount,
    ffi.Pointer<ffi.Uint16> _VarName,
  ) {
    return __wdupenv_s(
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __wdupenv_s_ptr =
      _lookup<ffi.NativeFunction<Native__wdupenv_s>>('_wdupenv_s');
  late final _dart__wdupenv_s __wdupenv_s =
      __wdupenv_s_ptr.asFunction<_dart__wdupenv_s>();

  ffi.Pointer<ffi.Uint16> _wgetenv(
    ffi.Pointer<ffi.Uint16> _VarName,
  ) {
    return __wgetenv(
      _VarName,
    );
  }

  late final __wgetenv_ptr =
      _lookup<ffi.NativeFunction<Native__wgetenv>>('_wgetenv');
  late final _dart__wgetenv __wgetenv =
      __wgetenv_ptr.asFunction<_dart__wgetenv>();

  int _wgetenv_s(
    ffi.Pointer<ffi.Uint64> _RequiredCount,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Uint16> _VarName,
  ) {
    return __wgetenv_s(
      _RequiredCount,
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __wgetenv_s_ptr =
      _lookup<ffi.NativeFunction<Native__wgetenv_s>>('_wgetenv_s');
  late final _dart__wgetenv_s __wgetenv_s =
      __wgetenv_s_ptr.asFunction<_dart__wgetenv_s>();

  int _wputenv(
    ffi.Pointer<ffi.Uint16> _EnvString,
  ) {
    return __wputenv(
      _EnvString,
    );
  }

  late final __wputenv_ptr =
      _lookup<ffi.NativeFunction<Native__wputenv>>('_wputenv');
  late final _dart__wputenv __wputenv =
      __wputenv_ptr.asFunction<_dart__wputenv>();

  int _wputenv_s(
    ffi.Pointer<ffi.Uint16> _Name,
    ffi.Pointer<ffi.Uint16> _Value,
  ) {
    return __wputenv_s(
      _Name,
      _Value,
    );
  }

  late final __wputenv_s_ptr =
      _lookup<ffi.NativeFunction<Native__wputenv_s>>('_wputenv_s');
  late final _dart__wputenv_s __wputenv_s =
      __wputenv_s_ptr.asFunction<_dart__wputenv_s>();

  int _wsearchenv_s(
    ffi.Pointer<ffi.Uint16> _Filename,
    ffi.Pointer<ffi.Uint16> _VarName,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
  ) {
    return __wsearchenv_s(
      _Filename,
      _VarName,
      _Buffer,
      _BufferCount,
    );
  }

  late final __wsearchenv_s_ptr =
      _lookup<ffi.NativeFunction<Native__wsearchenv_s>>('_wsearchenv_s');
  late final _dart__wsearchenv_s __wsearchenv_s =
      __wsearchenv_s_ptr.asFunction<_dart__wsearchenv_s>();

  void _wsearchenv(
    ffi.Pointer<ffi.Uint16> _Filename,
    ffi.Pointer<ffi.Uint16> _VarName,
    ffi.Pointer<ffi.Uint16> _ResultPath,
  ) {
    return __wsearchenv(
      _Filename,
      _VarName,
      _ResultPath,
    );
  }

  late final __wsearchenv_ptr =
      _lookup<ffi.NativeFunction<Native__wsearchenv>>('_wsearchenv');
  late final _dart__wsearchenv __wsearchenv =
      __wsearchenv_ptr.asFunction<_dart__wsearchenv>();

  int _wsystem(
    ffi.Pointer<ffi.Uint16> _Command,
  ) {
    return __wsystem(
      _Command,
    );
  }

  late final __wsystem_ptr =
      _lookup<ffi.NativeFunction<Native__wsystem>>('_wsystem');
  late final _dart__wsystem __wsystem =
      __wsystem_ptr.asFunction<_dart__wsystem>();

  void _swab(
    ffi.Pointer<ffi.Int8> _Buf1,
    ffi.Pointer<ffi.Int8> _Buf2,
    int _SizeInBytes,
  ) {
    return __swab(
      _Buf1,
      _Buf2,
      _SizeInBytes,
    );
  }

  late final __swab_ptr = _lookup<ffi.NativeFunction<Native__swab>>('_swab');
  late final _dart__swab __swab = __swab_ptr.asFunction<_dart__swab>();

  void exit(
    int _Code,
  ) {
    return _exit_1(
      _Code,
    );
  }

  late final _exit_ptr = _lookup<ffi.NativeFunction<Native_exit>>('exit');
  late final _dart_exit _exit_1 = _exit_ptr.asFunction<_dart_exit>();

  void _exit(
    int _Code,
  ) {
    return __exit(
      _Code,
    );
  }

  late final __exit_ptr = _lookup<ffi.NativeFunction<Native__exit>>('_exit');
  late final _dart__exit __exit = __exit_ptr.asFunction<_dart__exit>();

  void _Exit(
    int _Code,
  ) {
    return __Exit(
      _Code,
    );
  }

  late final __Exit_ptr = _lookup<ffi.NativeFunction<Native__Exit>>('_Exit');
  late final _dart__Exit __Exit = __Exit_ptr.asFunction<_dart__Exit>();

  void quick_exit(
    int _Code,
  ) {
    return _quick_exit(
      _Code,
    );
  }

  late final _quick_exit_ptr =
      _lookup<ffi.NativeFunction<Native_quick_exit>>('quick_exit');
  late final _dart_quick_exit _quick_exit =
      _quick_exit_ptr.asFunction<_dart_quick_exit>();

  void abort() {
    return _abort();
  }

  late final _abort_ptr = _lookup<ffi.NativeFunction<Native_abort>>('abort');
  late final _dart_abort _abort = _abort_ptr.asFunction<_dart_abort>();

  int _set_abort_behavior(
    int _Flags,
    int _Mask,
  ) {
    return __set_abort_behavior(
      _Flags,
      _Mask,
    );
  }

  late final __set_abort_behavior_ptr =
      _lookup<ffi.NativeFunction<Native__set_abort_behavior>>(
          '_set_abort_behavior');
  late final _dart__set_abort_behavior __set_abort_behavior =
      __set_abort_behavior_ptr.asFunction<_dart__set_abort_behavior>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_1>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexit_ptr = _lookup<ffi.NativeFunction<Native_atexit>>('atexit');
  late final _dart_atexit _atexit = _atexit_ptr.asFunction<_dart_atexit>();

  ffi.Pointer<ffi.NativeFunction<_onexit_t>> _onexit(
    ffi.Pointer<ffi.NativeFunction<_onexit_t>> _Func,
  ) {
    return __onexit(
      _Func,
    );
  }

  late final __onexit_ptr =
      _lookup<ffi.NativeFunction<Native__onexit>>('_onexit');
  late final _dart__onexit __onexit = __onexit_ptr.asFunction<_dart__onexit>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_2>> arg0,
  ) {
    return _at_quick_exit(
      arg0,
    );
  }

  late final _at_quick_exit_ptr =
      _lookup<ffi.NativeFunction<Native_at_quick_exit>>('at_quick_exit');
  late final _dart_at_quick_exit _at_quick_exit =
      _at_quick_exit_ptr.asFunction<_dart_at_quick_exit>();

  ffi.Pointer<ffi.NativeFunction<_purecall_handler>> _set_purecall_handler(
    ffi.Pointer<ffi.NativeFunction<_purecall_handler>> _Handler,
  ) {
    return __set_purecall_handler(
      _Handler,
    );
  }

  late final __set_purecall_handler_ptr =
      _lookup<ffi.NativeFunction<Native__set_purecall_handler>>(
          '_set_purecall_handler');
  late final _dart__set_purecall_handler __set_purecall_handler =
      __set_purecall_handler_ptr.asFunction<_dart__set_purecall_handler>();

  ffi.Pointer<ffi.NativeFunction<_purecall_handler>> _get_purecall_handler() {
    return __get_purecall_handler();
  }

  late final __get_purecall_handler_ptr =
      _lookup<ffi.NativeFunction<Native__get_purecall_handler>>(
          '_get_purecall_handler');
  late final _dart__get_purecall_handler __get_purecall_handler =
      __get_purecall_handler_ptr.asFunction<_dart__get_purecall_handler>();

  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>>
      _set_invalid_parameter_handler(
    ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> _Handler,
  ) {
    return __set_invalid_parameter_handler(
      _Handler,
    );
  }

  late final __set_invalid_parameter_handler_ptr =
      _lookup<ffi.NativeFunction<Native__set_invalid_parameter_handler>>(
          '_set_invalid_parameter_handler');
  late final _dart__set_invalid_parameter_handler
      __set_invalid_parameter_handler = __set_invalid_parameter_handler_ptr
          .asFunction<_dart__set_invalid_parameter_handler>();

  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>>
      _get_invalid_parameter_handler() {
    return __get_invalid_parameter_handler();
  }

  late final __get_invalid_parameter_handler_ptr =
      _lookup<ffi.NativeFunction<Native__get_invalid_parameter_handler>>(
          '_get_invalid_parameter_handler');
  late final _dart__get_invalid_parameter_handler
      __get_invalid_parameter_handler = __get_invalid_parameter_handler_ptr
          .asFunction<_dart__get_invalid_parameter_handler>();

  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>>
      _set_thread_local_invalid_parameter_handler(
    ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> _Handler,
  ) {
    return __set_thread_local_invalid_parameter_handler(
      _Handler,
    );
  }

  late final __set_thread_local_invalid_parameter_handler_ptr = _lookup<
          ffi.NativeFunction<
              Native__set_thread_local_invalid_parameter_handler>>(
      '_set_thread_local_invalid_parameter_handler');
  late final _dart__set_thread_local_invalid_parameter_handler
      __set_thread_local_invalid_parameter_handler =
      __set_thread_local_invalid_parameter_handler_ptr
          .asFunction<_dart__set_thread_local_invalid_parameter_handler>();

  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>>
      _get_thread_local_invalid_parameter_handler() {
    return __get_thread_local_invalid_parameter_handler();
  }

  late final __get_thread_local_invalid_parameter_handler_ptr = _lookup<
          ffi.NativeFunction<
              Native__get_thread_local_invalid_parameter_handler>>(
      '_get_thread_local_invalid_parameter_handler');
  late final _dart__get_thread_local_invalid_parameter_handler
      __get_thread_local_invalid_parameter_handler =
      __get_thread_local_invalid_parameter_handler_ptr
          .asFunction<_dart__get_thread_local_invalid_parameter_handler>();

  int _set_error_mode(
    int _Mode,
  ) {
    return __set_error_mode(
      _Mode,
    );
  }

  late final __set_error_mode_ptr =
      _lookup<ffi.NativeFunction<Native__set_error_mode>>('_set_error_mode');
  late final _dart__set_error_mode __set_error_mode =
      __set_error_mode_ptr.asFunction<_dart__set_error_mode>();

  ffi.Pointer<ffi.Int32> _errno() {
    return __errno();
  }

  late final __errno_ptr = _lookup<ffi.NativeFunction<Native__errno>>('_errno');
  late final _dart__errno __errno = __errno_ptr.asFunction<_dart__errno>();

  ffi.Pointer<ffi.Uint64> __doserrno() {
    return ___doserrno();
  }

  late final ___doserrno_ptr =
      _lookup<ffi.NativeFunction<Native___doserrno>>('__doserrno');
  late final _dart___doserrno ___doserrno =
      ___doserrno_ptr.asFunction<_dart___doserrno>();

  int _set_doserrno(
    int _Value,
  ) {
    return __set_doserrno(
      _Value,
    );
  }

  late final __set_doserrno_ptr =
      _lookup<ffi.NativeFunction<Native__set_doserrno>>('_set_doserrno');
  late final _dart__set_doserrno __set_doserrno =
      __set_doserrno_ptr.asFunction<_dart__set_doserrno>();

  int _get_doserrno(
    ffi.Pointer<ffi.Uint64> _Value,
  ) {
    return __get_doserrno(
      _Value,
    );
  }

  late final __get_doserrno_ptr =
      _lookup<ffi.NativeFunction<Native__get_doserrno>>('_get_doserrno');
  late final _dart__get_doserrno __get_doserrno =
      __get_doserrno_ptr.asFunction<_dart__get_doserrno>();

  ffi.Pointer<ffi.Pointer<ffi.Int8>> __sys_errlist() {
    return ___sys_errlist();
  }

  late final ___sys_errlist_ptr =
      _lookup<ffi.NativeFunction<Native___sys_errlist>>('__sys_errlist');
  late final _dart___sys_errlist ___sys_errlist =
      ___sys_errlist_ptr.asFunction<_dart___sys_errlist>();

  ffi.Pointer<ffi.Int32> __sys_nerr() {
    return ___sys_nerr();
  }

  late final ___sys_nerr_ptr =
      _lookup<ffi.NativeFunction<Native___sys_nerr>>('__sys_nerr');
  late final _dart___sys_nerr ___sys_nerr =
      ___sys_nerr_ptr.asFunction<_dart___sys_nerr>();

  void perror(
    ffi.Pointer<ffi.Int8> _ErrMsg,
  ) {
    return _perror(
      _ErrMsg,
    );
  }

  late final _perror_ptr = _lookup<ffi.NativeFunction<Native_perror>>('perror');
  late final _dart_perror _perror = _perror_ptr.asFunction<_dart_perror>();

  ffi.Pointer<ffi.Pointer<ffi.Int8>> __p__pgmptr() {
    return ___p__pgmptr();
  }

  late final ___p__pgmptr_ptr =
      _lookup<ffi.NativeFunction<Native___p__pgmptr>>('__p__pgmptr');
  late final _dart___p__pgmptr ___p__pgmptr =
      ___p__pgmptr_ptr.asFunction<_dart___p__pgmptr>();

  ffi.Pointer<ffi.Pointer<ffi.Uint16>> __p__wpgmptr() {
    return ___p__wpgmptr();
  }

  late final ___p__wpgmptr_ptr =
      _lookup<ffi.NativeFunction<Native___p__wpgmptr>>('__p__wpgmptr');
  late final _dart___p__wpgmptr ___p__wpgmptr =
      ___p__wpgmptr_ptr.asFunction<_dart___p__wpgmptr>();

  ffi.Pointer<ffi.Int32> __p__fmode() {
    return ___p__fmode();
  }

  late final ___p__fmode_ptr =
      _lookup<ffi.NativeFunction<Native___p__fmode>>('__p__fmode');
  late final _dart___p__fmode ___p__fmode =
      ___p__fmode_ptr.asFunction<_dart___p__fmode>();

  int _get_pgmptr(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Value,
  ) {
    return __get_pgmptr(
      _Value,
    );
  }

  late final __get_pgmptr_ptr =
      _lookup<ffi.NativeFunction<Native__get_pgmptr>>('_get_pgmptr');
  late final _dart__get_pgmptr __get_pgmptr =
      __get_pgmptr_ptr.asFunction<_dart__get_pgmptr>();

  int _get_wpgmptr(
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Value,
  ) {
    return __get_wpgmptr(
      _Value,
    );
  }

  late final __get_wpgmptr_ptr =
      _lookup<ffi.NativeFunction<Native__get_wpgmptr>>('_get_wpgmptr');
  late final _dart__get_wpgmptr __get_wpgmptr =
      __get_wpgmptr_ptr.asFunction<_dart__get_wpgmptr>();

  int _set_fmode(
    int _Mode,
  ) {
    return __set_fmode(
      _Mode,
    );
  }

  late final __set_fmode_ptr =
      _lookup<ffi.NativeFunction<Native__set_fmode>>('_set_fmode');
  late final _dart__set_fmode __set_fmode =
      __set_fmode_ptr.asFunction<_dart__set_fmode>();

  int _get_fmode(
    ffi.Pointer<ffi.Int32> _PMode,
  ) {
    return __get_fmode(
      _PMode,
    );
  }

  late final __get_fmode_ptr =
      _lookup<ffi.NativeFunction<Native__get_fmode>>('_get_fmode');
  late final _dart__get_fmode __get_fmode =
      __get_fmode_ptr.asFunction<_dart__get_fmode>();

  int _abs64(
    int _Number,
  ) {
    return __abs64(
      _Number,
    );
  }

  late final __abs64_ptr = _lookup<ffi.NativeFunction<Native__abs64>>('_abs64');
  late final _dart__abs64 __abs64 = __abs64_ptr.asFunction<_dart__abs64>();

  int _byteswap_ushort(
    int _Number,
  ) {
    return __byteswap_ushort(
      _Number,
    );
  }

  late final __byteswap_ushort_ptr =
      _lookup<ffi.NativeFunction<Native__byteswap_ushort>>('_byteswap_ushort');
  late final _dart__byteswap_ushort __byteswap_ushort =
      __byteswap_ushort_ptr.asFunction<_dart__byteswap_ushort>();

  int _byteswap_ulong(
    int _Number,
  ) {
    return __byteswap_ulong(
      _Number,
    );
  }

  late final __byteswap_ulong_ptr =
      _lookup<ffi.NativeFunction<Native__byteswap_ulong>>('_byteswap_ulong');
  late final _dart__byteswap_ulong __byteswap_ulong =
      __byteswap_ulong_ptr.asFunction<_dart__byteswap_ulong>();

  int _byteswap_uint64(
    int _Number,
  ) {
    return __byteswap_uint64(
      _Number,
    );
  }

  late final __byteswap_uint64_ptr =
      _lookup<ffi.NativeFunction<Native__byteswap_uint64>>('_byteswap_uint64');
  late final _dart__byteswap_uint64 __byteswap_uint64 =
      __byteswap_uint64_ptr.asFunction<_dart__byteswap_uint64>();

  div_t div(
    int _Numerator,
    int _Denominator,
  ) {
    return _div(
      _Numerator,
      _Denominator,
    );
  }

  late final _div_ptr = _lookup<ffi.NativeFunction<Native_div>>('div');
  late final _dart_div _div = _div_ptr.asFunction<_dart_div>();

  ldiv_t ldiv(
    int _Numerator,
    int _Denominator,
  ) {
    return _ldiv(
      _Numerator,
      _Denominator,
    );
  }

  late final _ldiv_ptr = _lookup<ffi.NativeFunction<Native_ldiv>>('ldiv');
  late final _dart_ldiv _ldiv = _ldiv_ptr.asFunction<_dart_ldiv>();

  lldiv_t lldiv(
    int _Numerator,
    int _Denominator,
  ) {
    return _lldiv(
      _Numerator,
      _Denominator,
    );
  }

  late final _lldiv_ptr = _lookup<ffi.NativeFunction<Native_lldiv>>('lldiv');
  late final _dart_lldiv _lldiv = _lldiv_ptr.asFunction<_dart_lldiv>();

  int _rotl(
    int _Value,
    int _Shift,
  ) {
    return __rotl(
      _Value,
      _Shift,
    );
  }

  late final __rotl_ptr = _lookup<ffi.NativeFunction<Native__rotl>>('_rotl');
  late final _dart__rotl __rotl = __rotl_ptr.asFunction<_dart__rotl>();

  int _lrotl(
    int _Value,
    int _Shift,
  ) {
    return __lrotl(
      _Value,
      _Shift,
    );
  }

  late final __lrotl_ptr = _lookup<ffi.NativeFunction<Native__lrotl>>('_lrotl');
  late final _dart__lrotl __lrotl = __lrotl_ptr.asFunction<_dart__lrotl>();

  int _rotl64(
    int _Value,
    int _Shift,
  ) {
    return __rotl64(
      _Value,
      _Shift,
    );
  }

  late final __rotl64_ptr =
      _lookup<ffi.NativeFunction<Native__rotl64>>('_rotl64');
  late final _dart__rotl64 __rotl64 = __rotl64_ptr.asFunction<_dart__rotl64>();

  int _rotr(
    int _Value,
    int _Shift,
  ) {
    return __rotr(
      _Value,
      _Shift,
    );
  }

  late final __rotr_ptr = _lookup<ffi.NativeFunction<Native__rotr>>('_rotr');
  late final _dart__rotr __rotr = __rotr_ptr.asFunction<_dart__rotr>();

  int _lrotr(
    int _Value,
    int _Shift,
  ) {
    return __lrotr(
      _Value,
      _Shift,
    );
  }

  late final __lrotr_ptr = _lookup<ffi.NativeFunction<Native__lrotr>>('_lrotr');
  late final _dart__lrotr __lrotr = __lrotr_ptr.asFunction<_dart__lrotr>();

  int _rotr64(
    int _Value,
    int _Shift,
  ) {
    return __rotr64(
      _Value,
      _Shift,
    );
  }

  late final __rotr64_ptr =
      _lookup<ffi.NativeFunction<Native__rotr64>>('_rotr64');
  late final _dart__rotr64 __rotr64 = __rotr64_ptr.asFunction<_dart__rotr64>();

  void srand(
    int _Seed,
  ) {
    return _srand(
      _Seed,
    );
  }

  late final _srand_ptr = _lookup<ffi.NativeFunction<Native_srand>>('srand');
  late final _dart_srand _srand = _srand_ptr.asFunction<_dart_srand>();

  int rand() {
    return _rand();
  }

  late final _rand_ptr = _lookup<ffi.NativeFunction<Native_rand>>('rand');
  late final _dart_rand _rand = _rand_ptr.asFunction<_dart_rand>();

  int atoi(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _atoi(
      _String,
    );
  }

  late final _atoi_ptr = _lookup<ffi.NativeFunction<Native_atoi>>('atoi');
  late final _dart_atoi _atoi = _atoi_ptr.asFunction<_dart_atoi>();

  int atol(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _atol(
      _String,
    );
  }

  late final _atol_ptr = _lookup<ffi.NativeFunction<Native_atol>>('atol');
  late final _dart_atol _atol = _atol_ptr.asFunction<_dart_atol>();

  int atoll(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _atoll(
      _String,
    );
  }

  late final _atoll_ptr = _lookup<ffi.NativeFunction<Native_atoll>>('atoll');
  late final _dart_atoll _atoll = _atoll_ptr.asFunction<_dart_atoll>();

  int _atoi64(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return __atoi64(
      _String,
    );
  }

  late final __atoi64_ptr =
      _lookup<ffi.NativeFunction<Native__atoi64>>('_atoi64');
  late final _dart__atoi64 __atoi64 = __atoi64_ptr.asFunction<_dart__atoi64>();

  int _atoi_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __atoi_l(
      _String,
      _Locale,
    );
  }

  late final __atoi_l_ptr =
      _lookup<ffi.NativeFunction<Native__atoi_l>>('_atoi_l');
  late final _dart__atoi_l __atoi_l = __atoi_l_ptr.asFunction<_dart__atoi_l>();

  int _atol_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __atol_l(
      _String,
      _Locale,
    );
  }

  late final __atol_l_ptr =
      _lookup<ffi.NativeFunction<Native__atol_l>>('_atol_l');
  late final _dart__atol_l __atol_l = __atol_l_ptr.asFunction<_dart__atol_l>();

  int _atoll_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __atoll_l(
      _String,
      _Locale,
    );
  }

  late final __atoll_l_ptr =
      _lookup<ffi.NativeFunction<Native__atoll_l>>('_atoll_l');
  late final _dart__atoll_l __atoll_l =
      __atoll_l_ptr.asFunction<_dart__atoll_l>();

  int _atoi64_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __atoi64_l(
      _String,
      _Locale,
    );
  }

  late final __atoi64_l_ptr =
      _lookup<ffi.NativeFunction<Native__atoi64_l>>('_atoi64_l');
  late final _dart__atoi64_l __atoi64_l =
      __atoi64_l_ptr.asFunction<_dart__atoi64_l>();

  int _atoflt(
    ffi.Pointer<_CRT_FLOAT> _Result,
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return __atoflt(
      _Result,
      _String,
    );
  }

  late final __atoflt_ptr =
      _lookup<ffi.NativeFunction<Native__atoflt>>('_atoflt');
  late final _dart__atoflt __atoflt = __atoflt_ptr.asFunction<_dart__atoflt>();

  int _atodbl(
    ffi.Pointer<_CRT_DOUBLE> _Result,
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return __atodbl(
      _Result,
      _String,
    );
  }

  late final __atodbl_ptr =
      _lookup<ffi.NativeFunction<Native__atodbl>>('_atodbl');
  late final _dart__atodbl __atodbl = __atodbl_ptr.asFunction<_dart__atodbl>();

  int _atoldbl(
    ffi.Pointer<_LDOUBLE> _Result,
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return __atoldbl(
      _Result,
      _String,
    );
  }

  late final __atoldbl_ptr =
      _lookup<ffi.NativeFunction<Native__atoldbl>>('_atoldbl');
  late final _dart__atoldbl __atoldbl =
      __atoldbl_ptr.asFunction<_dart__atoldbl>();

  int _atoflt_l(
    ffi.Pointer<_CRT_FLOAT> _Result,
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __atoflt_l(
      _Result,
      _String,
      _Locale,
    );
  }

  late final __atoflt_l_ptr =
      _lookup<ffi.NativeFunction<Native__atoflt_l>>('_atoflt_l');
  late final _dart__atoflt_l __atoflt_l =
      __atoflt_l_ptr.asFunction<_dart__atoflt_l>();

  int _atodbl_l(
    ffi.Pointer<_CRT_DOUBLE> _Result,
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __atodbl_l(
      _Result,
      _String,
      _Locale,
    );
  }

  late final __atodbl_l_ptr =
      _lookup<ffi.NativeFunction<Native__atodbl_l>>('_atodbl_l');
  late final _dart__atodbl_l __atodbl_l =
      __atodbl_l_ptr.asFunction<_dart__atodbl_l>();

  int _atoldbl_l(
    ffi.Pointer<_LDOUBLE> _Result,
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __atoldbl_l(
      _Result,
      _String,
      _Locale,
    );
  }

  late final __atoldbl_l_ptr =
      _lookup<ffi.NativeFunction<Native__atoldbl_l>>('_atoldbl_l');
  late final _dart__atoldbl_l __atoldbl_l =
      __atoldbl_l_ptr.asFunction<_dart__atoldbl_l>();

  double strtof(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ) {
    return _strtof(
      _String,
      _EndPtr,
    );
  }

  late final _strtof_ptr = _lookup<ffi.NativeFunction<Native_strtof>>('strtof');
  late final _dart_strtof _strtof = _strtof_ptr.asFunction<_dart_strtof>();

  double _strtof_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strtof_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __strtof_l_ptr =
      _lookup<ffi.NativeFunction<Native__strtof_l>>('_strtof_l');
  late final _dart__strtof_l __strtof_l =
      __strtof_l_ptr.asFunction<_dart__strtof_l>();

  double strtod(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ) {
    return _strtod(
      _String,
      _EndPtr,
    );
  }

  late final _strtod_ptr = _lookup<ffi.NativeFunction<Native_strtod>>('strtod');
  late final _dart_strtod _strtod = _strtod_ptr.asFunction<_dart_strtod>();

  double _strtod_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strtod_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __strtod_l_ptr =
      _lookup<ffi.NativeFunction<Native__strtod_l>>('_strtod_l');
  late final _dart__strtod_l __strtod_l =
      __strtod_l_ptr.asFunction<_dart__strtod_l>();

  int strtol(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return _strtol(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtol_ptr = _lookup<ffi.NativeFunction<Native_strtol>>('strtol');
  late final _dart_strtol _strtol = _strtol_ptr.asFunction<_dart_strtol>();

  int _strtol_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strtol_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtol_l_ptr =
      _lookup<ffi.NativeFunction<Native__strtol_l>>('_strtol_l');
  late final _dart__strtol_l __strtol_l =
      __strtol_l_ptr.asFunction<_dart__strtol_l>();

  int strtoll(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return _strtoll(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtoll_ptr =
      _lookup<ffi.NativeFunction<Native_strtoll>>('strtoll');
  late final _dart_strtoll _strtoll = _strtoll_ptr.asFunction<_dart_strtoll>();

  int _strtoll_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strtoll_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoll_l_ptr =
      _lookup<ffi.NativeFunction<Native__strtoll_l>>('_strtoll_l');
  late final _dart__strtoll_l __strtoll_l =
      __strtoll_l_ptr.asFunction<_dart__strtoll_l>();

  int strtoul(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return _strtoul(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtoul_ptr =
      _lookup<ffi.NativeFunction<Native_strtoul>>('strtoul');
  late final _dart_strtoul _strtoul = _strtoul_ptr.asFunction<_dart_strtoul>();

  int _strtoul_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strtoul_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoul_l_ptr =
      _lookup<ffi.NativeFunction<Native__strtoul_l>>('_strtoul_l');
  late final _dart__strtoul_l __strtoul_l =
      __strtoul_l_ptr.asFunction<_dart__strtoul_l>();

  int strtoull(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return _strtoull(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtoull_ptr =
      _lookup<ffi.NativeFunction<Native_strtoull>>('strtoull');
  late final _dart_strtoull _strtoull =
      _strtoull_ptr.asFunction<_dart_strtoull>();

  int _strtoull_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strtoull_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoull_l_ptr =
      _lookup<ffi.NativeFunction<Native__strtoull_l>>('_strtoull_l');
  late final _dart__strtoull_l __strtoull_l =
      __strtoull_l_ptr.asFunction<_dart__strtoull_l>();

  int _strtoi64(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return __strtoi64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __strtoi64_ptr =
      _lookup<ffi.NativeFunction<Native__strtoi64>>('_strtoi64');
  late final _dart__strtoi64 __strtoi64 =
      __strtoi64_ptr.asFunction<_dart__strtoi64>();

  int _strtoi64_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strtoi64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoi64_l_ptr =
      _lookup<ffi.NativeFunction<Native__strtoi64_l>>('_strtoi64_l');
  late final _dart__strtoi64_l __strtoi64_l =
      __strtoi64_l_ptr.asFunction<_dart__strtoi64_l>();

  int _strtoui64(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return __strtoui64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __strtoui64_ptr =
      _lookup<ffi.NativeFunction<Native__strtoui64>>('_strtoui64');
  late final _dart__strtoui64 __strtoui64 =
      __strtoui64_ptr.asFunction<_dart__strtoui64>();

  int _strtoui64_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strtoui64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoui64_l_ptr =
      _lookup<ffi.NativeFunction<Native__strtoui64_l>>('_strtoui64_l');
  late final _dart__strtoui64_l __strtoui64_l =
      __strtoui64_l_ptr.asFunction<_dart__strtoui64_l>();

  int _itoa_s(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __itoa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __itoa_s_ptr =
      _lookup<ffi.NativeFunction<Native__itoa_s>>('_itoa_s');
  late final _dart__itoa_s __itoa_s = __itoa_s_ptr.asFunction<_dart__itoa_s>();

  ffi.Pointer<ffi.Int8> _itoa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return __itoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __itoa_ptr = _lookup<ffi.NativeFunction<Native__itoa>>('_itoa');
  late final _dart__itoa __itoa = __itoa_ptr.asFunction<_dart__itoa>();

  int _ltoa_s(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ltoa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ltoa_s_ptr =
      _lookup<ffi.NativeFunction<Native__ltoa_s>>('_ltoa_s');
  late final _dart__ltoa_s __ltoa_s = __ltoa_s_ptr.asFunction<_dart__ltoa_s>();

  ffi.Pointer<ffi.Int8> _ltoa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return __ltoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ltoa_ptr = _lookup<ffi.NativeFunction<Native__ltoa>>('_ltoa');
  late final _dart__ltoa __ltoa = __ltoa_ptr.asFunction<_dart__ltoa>();

  int _ultoa_s(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ultoa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ultoa_s_ptr =
      _lookup<ffi.NativeFunction<Native__ultoa_s>>('_ultoa_s');
  late final _dart__ultoa_s __ultoa_s =
      __ultoa_s_ptr.asFunction<_dart__ultoa_s>();

  ffi.Pointer<ffi.Int8> _ultoa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return __ultoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ultoa_ptr = _lookup<ffi.NativeFunction<Native__ultoa>>('_ultoa');
  late final _dart__ultoa __ultoa = __ultoa_ptr.asFunction<_dart__ultoa>();

  int _i64toa_s(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __i64toa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __i64toa_s_ptr =
      _lookup<ffi.NativeFunction<Native__i64toa_s>>('_i64toa_s');
  late final _dart__i64toa_s __i64toa_s =
      __i64toa_s_ptr.asFunction<_dart__i64toa_s>();

  ffi.Pointer<ffi.Int8> _i64toa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return __i64toa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __i64toa_ptr =
      _lookup<ffi.NativeFunction<Native__i64toa>>('_i64toa');
  late final _dart__i64toa __i64toa = __i64toa_ptr.asFunction<_dart__i64toa>();

  int _ui64toa_s(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ui64toa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ui64toa_s_ptr =
      _lookup<ffi.NativeFunction<Native__ui64toa_s>>('_ui64toa_s');
  late final _dart__ui64toa_s __ui64toa_s =
      __ui64toa_s_ptr.asFunction<_dart__ui64toa_s>();

  ffi.Pointer<ffi.Int8> _ui64toa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return __ui64toa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ui64toa_ptr =
      _lookup<ffi.NativeFunction<Native__ui64toa>>('_ui64toa');
  late final _dart__ui64toa __ui64toa =
      __ui64toa_ptr.asFunction<_dart__ui64toa>();

  int _ecvt_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return __ecvt_s(
      _Buffer,
      _BufferCount,
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __ecvt_s_ptr =
      _lookup<ffi.NativeFunction<Native__ecvt_s>>('_ecvt_s');
  late final _dart__ecvt_s __ecvt_s = __ecvt_s_ptr.asFunction<_dart__ecvt_s>();

  ffi.Pointer<ffi.Int8> _ecvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return __ecvt(
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __ecvt_ptr = _lookup<ffi.NativeFunction<Native__ecvt>>('_ecvt');
  late final _dart__ecvt __ecvt = __ecvt_ptr.asFunction<_dart__ecvt>();

  int _fcvt_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return __fcvt_s(
      _Buffer,
      _BufferCount,
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __fcvt_s_ptr =
      _lookup<ffi.NativeFunction<Native__fcvt_s>>('_fcvt_s');
  late final _dart__fcvt_s __fcvt_s = __fcvt_s_ptr.asFunction<_dart__fcvt_s>();

  ffi.Pointer<ffi.Int8> _fcvt(
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return __fcvt(
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __fcvt_ptr = _lookup<ffi.NativeFunction<Native__fcvt>>('_fcvt');
  late final _dart__fcvt __fcvt = __fcvt_ptr.asFunction<_dart__fcvt>();

  int _gcvt_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    double _Value,
    int _DigitCount,
  ) {
    return __gcvt_s(
      _Buffer,
      _BufferCount,
      _Value,
      _DigitCount,
    );
  }

  late final __gcvt_s_ptr =
      _lookup<ffi.NativeFunction<Native__gcvt_s>>('_gcvt_s');
  late final _dart__gcvt_s __gcvt_s = __gcvt_s_ptr.asFunction<_dart__gcvt_s>();

  ffi.Pointer<ffi.Int8> _gcvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return __gcvt(
      _Value,
      _DigitCount,
      _Buffer,
    );
  }

  late final __gcvt_ptr = _lookup<ffi.NativeFunction<Native__gcvt>>('_gcvt');
  late final _dart__gcvt __gcvt = __gcvt_ptr.asFunction<_dart__gcvt>();

  int ___mb_cur_max_func() {
    return ____mb_cur_max_func();
  }

  late final ____mb_cur_max_func_ptr =
      _lookup<ffi.NativeFunction<Native____mb_cur_max_func>>(
          '___mb_cur_max_func');
  late final _dart____mb_cur_max_func ____mb_cur_max_func =
      ____mb_cur_max_func_ptr.asFunction<_dart____mb_cur_max_func>();

  int ___mb_cur_max_l_func(
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return ____mb_cur_max_l_func(
      _Locale,
    );
  }

  late final ____mb_cur_max_l_func_ptr =
      _lookup<ffi.NativeFunction<Native____mb_cur_max_l_func>>(
          '___mb_cur_max_l_func');
  late final _dart____mb_cur_max_l_func ____mb_cur_max_l_func =
      ____mb_cur_max_l_func_ptr.asFunction<_dart____mb_cur_max_l_func>();

  int mblen(
    ffi.Pointer<ffi.Int8> _Ch,
    int _MaxCount,
  ) {
    return _mblen(
      _Ch,
      _MaxCount,
    );
  }

  late final _mblen_ptr = _lookup<ffi.NativeFunction<Native_mblen>>('mblen');
  late final _dart_mblen _mblen = _mblen_ptr.asFunction<_dart_mblen>();

  int _mblen_l(
    ffi.Pointer<ffi.Int8> _Ch,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __mblen_l(
      _Ch,
      _MaxCount,
      _Locale,
    );
  }

  late final __mblen_l_ptr =
      _lookup<ffi.NativeFunction<Native__mblen_l>>('_mblen_l');
  late final _dart__mblen_l __mblen_l =
      __mblen_l_ptr.asFunction<_dart__mblen_l>();

  int _mbstrlen(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return __mbstrlen(
      _String,
    );
  }

  late final __mbstrlen_ptr =
      _lookup<ffi.NativeFunction<Native__mbstrlen>>('_mbstrlen');
  late final _dart__mbstrlen __mbstrlen =
      __mbstrlen_ptr.asFunction<_dart__mbstrlen>();

  int _mbstrlen_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __mbstrlen_l(
      _String,
      _Locale,
    );
  }

  late final __mbstrlen_l_ptr =
      _lookup<ffi.NativeFunction<Native__mbstrlen_l>>('_mbstrlen_l');
  late final _dart__mbstrlen_l __mbstrlen_l =
      __mbstrlen_l_ptr.asFunction<_dart__mbstrlen_l>();

  int _mbstrnlen(
    ffi.Pointer<ffi.Int8> _String,
    int _MaxCount,
  ) {
    return __mbstrnlen(
      _String,
      _MaxCount,
    );
  }

  late final __mbstrnlen_ptr =
      _lookup<ffi.NativeFunction<Native__mbstrnlen>>('_mbstrnlen');
  late final _dart__mbstrnlen __mbstrnlen =
      __mbstrnlen_ptr.asFunction<_dart__mbstrnlen>();

  int _mbstrnlen_l(
    ffi.Pointer<ffi.Int8> _String,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __mbstrnlen_l(
      _String,
      _MaxCount,
      _Locale,
    );
  }

  late final __mbstrnlen_l_ptr =
      _lookup<ffi.NativeFunction<Native__mbstrnlen_l>>('_mbstrnlen_l');
  late final _dart__mbstrnlen_l __mbstrnlen_l =
      __mbstrnlen_l_ptr.asFunction<_dart__mbstrnlen_l>();

  int mbtowc(
    ffi.Pointer<ffi.Uint16> _DstCh,
    ffi.Pointer<ffi.Int8> _SrcCh,
    int _SrcSizeInBytes,
  ) {
    return _mbtowc(
      _DstCh,
      _SrcCh,
      _SrcSizeInBytes,
    );
  }

  late final _mbtowc_ptr = _lookup<ffi.NativeFunction<Native_mbtowc>>('mbtowc');
  late final _dart_mbtowc _mbtowc = _mbtowc_ptr.asFunction<_dart_mbtowc>();

  int _mbtowc_l(
    ffi.Pointer<ffi.Uint16> _DstCh,
    ffi.Pointer<ffi.Int8> _SrcCh,
    int _SrcSizeInBytes,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __mbtowc_l(
      _DstCh,
      _SrcCh,
      _SrcSizeInBytes,
      _Locale,
    );
  }

  late final __mbtowc_l_ptr =
      _lookup<ffi.NativeFunction<Native__mbtowc_l>>('_mbtowc_l');
  late final _dart__mbtowc_l __mbtowc_l =
      __mbtowc_l_ptr.asFunction<_dart__mbtowc_l>();

  int mbstowcs_s(
    ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Uint16> _DstBuf,
    int _SizeInWords,
    ffi.Pointer<ffi.Int8> _SrcBuf,
    int _MaxCount,
  ) {
    return _mbstowcs_s(
      _PtNumOfCharConverted,
      _DstBuf,
      _SizeInWords,
      _SrcBuf,
      _MaxCount,
    );
  }

  late final _mbstowcs_s_ptr =
      _lookup<ffi.NativeFunction<Native_mbstowcs_s>>('mbstowcs_s');
  late final _dart_mbstowcs_s _mbstowcs_s =
      _mbstowcs_s_ptr.asFunction<_dart_mbstowcs_s>();

  int mbstowcs(
    ffi.Pointer<ffi.Uint16> _Dest,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
  ) {
    return _mbstowcs(
      _Dest,
      _Source,
      _MaxCount,
    );
  }

  late final _mbstowcs_ptr =
      _lookup<ffi.NativeFunction<Native_mbstowcs>>('mbstowcs');
  late final _dart_mbstowcs _mbstowcs =
      _mbstowcs_ptr.asFunction<_dart_mbstowcs>();

  int _mbstowcs_s_l(
    ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Uint16> _DstBuf,
    int _SizeInWords,
    ffi.Pointer<ffi.Int8> _SrcBuf,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __mbstowcs_s_l(
      _PtNumOfCharConverted,
      _DstBuf,
      _SizeInWords,
      _SrcBuf,
      _MaxCount,
      _Locale,
    );
  }

  late final __mbstowcs_s_l_ptr =
      _lookup<ffi.NativeFunction<Native__mbstowcs_s_l>>('_mbstowcs_s_l');
  late final _dart__mbstowcs_s_l __mbstowcs_s_l =
      __mbstowcs_s_l_ptr.asFunction<_dart__mbstowcs_s_l>();

  int _mbstowcs_l(
    ffi.Pointer<ffi.Uint16> _Dest,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __mbstowcs_l(
      _Dest,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __mbstowcs_l_ptr =
      _lookup<ffi.NativeFunction<Native__mbstowcs_l>>('_mbstowcs_l');
  late final _dart__mbstowcs_l __mbstowcs_l =
      __mbstowcs_l_ptr.asFunction<_dart__mbstowcs_l>();

  int wctomb(
    ffi.Pointer<ffi.Int8> _MbCh,
    int _WCh,
  ) {
    return _wctomb(
      _MbCh,
      _WCh,
    );
  }

  late final _wctomb_ptr = _lookup<ffi.NativeFunction<Native_wctomb>>('wctomb');
  late final _dart_wctomb _wctomb = _wctomb_ptr.asFunction<_dart_wctomb>();

  int _wctomb_l(
    ffi.Pointer<ffi.Int8> _MbCh,
    int _WCh,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wctomb_l(
      _MbCh,
      _WCh,
      _Locale,
    );
  }

  late final __wctomb_l_ptr =
      _lookup<ffi.NativeFunction<Native__wctomb_l>>('_wctomb_l');
  late final _dart__wctomb_l __wctomb_l =
      __wctomb_l_ptr.asFunction<_dart__wctomb_l>();

  int wctomb_s(
    ffi.Pointer<ffi.Int32> _SizeConverted,
    ffi.Pointer<ffi.Int8> _MbCh,
    int _SizeInBytes,
    int _WCh,
  ) {
    return _wctomb_s(
      _SizeConverted,
      _MbCh,
      _SizeInBytes,
      _WCh,
    );
  }

  late final _wctomb_s_ptr =
      _lookup<ffi.NativeFunction<Native_wctomb_s>>('wctomb_s');
  late final _dart_wctomb_s _wctomb_s =
      _wctomb_s_ptr.asFunction<_dart_wctomb_s>();

  int _wctomb_s_l(
    ffi.Pointer<ffi.Int32> _SizeConverted,
    ffi.Pointer<ffi.Int8> _MbCh,
    int _SizeInBytes,
    int _WCh,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wctomb_s_l(
      _SizeConverted,
      _MbCh,
      _SizeInBytes,
      _WCh,
      _Locale,
    );
  }

  late final __wctomb_s_l_ptr =
      _lookup<ffi.NativeFunction<Native__wctomb_s_l>>('_wctomb_s_l');
  late final _dart__wctomb_s_l __wctomb_s_l =
      __wctomb_s_l_ptr.asFunction<_dart__wctomb_s_l>();

  int wcstombs_s(
    ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Int8> _Dst,
    int _DstSizeInBytes,
    ffi.Pointer<ffi.Uint16> _Src,
    int _MaxCountInBytes,
  ) {
    return _wcstombs_s(
      _PtNumOfCharConverted,
      _Dst,
      _DstSizeInBytes,
      _Src,
      _MaxCountInBytes,
    );
  }

  late final _wcstombs_s_ptr =
      _lookup<ffi.NativeFunction<Native_wcstombs_s>>('wcstombs_s');
  late final _dart_wcstombs_s _wcstombs_s =
      _wcstombs_s_ptr.asFunction<_dart_wcstombs_s>();

  int wcstombs(
    ffi.Pointer<ffi.Int8> _Dest,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
  ) {
    return _wcstombs(
      _Dest,
      _Source,
      _MaxCount,
    );
  }

  late final _wcstombs_ptr =
      _lookup<ffi.NativeFunction<Native_wcstombs>>('wcstombs');
  late final _dart_wcstombs _wcstombs =
      _wcstombs_ptr.asFunction<_dart_wcstombs>();

  int _wcstombs_s_l(
    ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Int8> _Dst,
    int _DstSizeInBytes,
    ffi.Pointer<ffi.Uint16> _Src,
    int _MaxCountInBytes,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcstombs_s_l(
      _PtNumOfCharConverted,
      _Dst,
      _DstSizeInBytes,
      _Src,
      _MaxCountInBytes,
      _Locale,
    );
  }

  late final __wcstombs_s_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcstombs_s_l>>('_wcstombs_s_l');
  late final _dart__wcstombs_s_l __wcstombs_s_l =
      __wcstombs_s_l_ptr.asFunction<_dart__wcstombs_s_l>();

  int _wcstombs_l(
    ffi.Pointer<ffi.Int8> _Dest,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcstombs_l(
      _Dest,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcstombs_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcstombs_l>>('_wcstombs_l');
  late final _dart__wcstombs_l __wcstombs_l =
      __wcstombs_l_ptr.asFunction<_dart__wcstombs_l>();

  ffi.Pointer<ffi.Int8> _fullpath(
    ffi.Pointer<ffi.Int8> _Buffer,
    ffi.Pointer<ffi.Int8> _Path,
    int _BufferCount,
  ) {
    return __fullpath(
      _Buffer,
      _Path,
      _BufferCount,
    );
  }

  late final __fullpath_ptr =
      _lookup<ffi.NativeFunction<Native__fullpath>>('_fullpath');
  late final _dart__fullpath __fullpath =
      __fullpath_ptr.asFunction<_dart__fullpath>();

  int _makepath_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _Drive,
    ffi.Pointer<ffi.Int8> _Dir,
    ffi.Pointer<ffi.Int8> _Filename,
    ffi.Pointer<ffi.Int8> _Ext,
  ) {
    return __makepath_s(
      _Buffer,
      _BufferCount,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __makepath_s_ptr =
      _lookup<ffi.NativeFunction<Native__makepath_s>>('_makepath_s');
  late final _dart__makepath_s __makepath_s =
      __makepath_s_ptr.asFunction<_dart__makepath_s>();

  void _makepath(
    ffi.Pointer<ffi.Int8> _Buffer,
    ffi.Pointer<ffi.Int8> _Drive,
    ffi.Pointer<ffi.Int8> _Dir,
    ffi.Pointer<ffi.Int8> _Filename,
    ffi.Pointer<ffi.Int8> _Ext,
  ) {
    return __makepath(
      _Buffer,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __makepath_ptr =
      _lookup<ffi.NativeFunction<Native__makepath>>('_makepath');
  late final _dart__makepath __makepath =
      __makepath_ptr.asFunction<_dart__makepath>();

  void _splitpath(
    ffi.Pointer<ffi.Int8> _FullPath,
    ffi.Pointer<ffi.Int8> _Drive,
    ffi.Pointer<ffi.Int8> _Dir,
    ffi.Pointer<ffi.Int8> _Filename,
    ffi.Pointer<ffi.Int8> _Ext,
  ) {
    return __splitpath(
      _FullPath,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __splitpath_ptr =
      _lookup<ffi.NativeFunction<Native__splitpath>>('_splitpath');
  late final _dart__splitpath __splitpath =
      __splitpath_ptr.asFunction<_dart__splitpath>();

  int _splitpath_s(
    ffi.Pointer<ffi.Int8> _FullPath,
    ffi.Pointer<ffi.Int8> _Drive,
    int _DriveCount,
    ffi.Pointer<ffi.Int8> _Dir,
    int _DirCount,
    ffi.Pointer<ffi.Int8> _Filename,
    int _FilenameCount,
    ffi.Pointer<ffi.Int8> _Ext,
    int _ExtCount,
  ) {
    return __splitpath_s(
      _FullPath,
      _Drive,
      _DriveCount,
      _Dir,
      _DirCount,
      _Filename,
      _FilenameCount,
      _Ext,
      _ExtCount,
    );
  }

  late final __splitpath_s_ptr =
      _lookup<ffi.NativeFunction<Native__splitpath_s>>('_splitpath_s');
  late final _dart__splitpath_s __splitpath_s =
      __splitpath_s_ptr.asFunction<_dart__splitpath_s>();

  int getenv_s(
    ffi.Pointer<ffi.Uint64> _RequiredCount,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _VarName,
  ) {
    return _getenv_s(
      _RequiredCount,
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final _getenv_s_ptr =
      _lookup<ffi.NativeFunction<Native_getenv_s>>('getenv_s');
  late final _dart_getenv_s _getenv_s =
      _getenv_s_ptr.asFunction<_dart_getenv_s>();

  ffi.Pointer<ffi.Int32> __p___argc() {
    return ___p___argc();
  }

  late final ___p___argc_ptr =
      _lookup<ffi.NativeFunction<Native___p___argc>>('__p___argc');
  late final _dart___p___argc ___p___argc =
      ___p___argc_ptr.asFunction<_dart___p___argc>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> __p___argv() {
    return ___p___argv();
  }

  late final ___p___argv_ptr =
      _lookup<ffi.NativeFunction<Native___p___argv>>('__p___argv');
  late final _dart___p___argv ___p___argv =
      ___p___argv_ptr.asFunction<_dart___p___argv>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Uint16>>> __p___wargv() {
    return ___p___wargv();
  }

  late final ___p___wargv_ptr =
      _lookup<ffi.NativeFunction<Native___p___wargv>>('__p___wargv');
  late final _dart___p___wargv ___p___wargv =
      ___p___wargv_ptr.asFunction<_dart___p___wargv>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> __p__environ() {
    return ___p__environ();
  }

  late final ___p__environ_ptr =
      _lookup<ffi.NativeFunction<Native___p__environ>>('__p__environ');
  late final _dart___p__environ ___p__environ =
      ___p__environ_ptr.asFunction<_dart___p__environ>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Uint16>>> __p__wenviron() {
    return ___p__wenviron();
  }

  late final ___p__wenviron_ptr =
      _lookup<ffi.NativeFunction<Native___p__wenviron>>('__p__wenviron');
  late final _dart___p__wenviron ___p__wenviron =
      ___p__wenviron_ptr.asFunction<_dart___p__wenviron>();

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> _VarName,
  ) {
    return _getenv(
      _VarName,
    );
  }

  late final _getenv_ptr = _lookup<ffi.NativeFunction<Native_getenv>>('getenv');
  late final _dart_getenv _getenv = _getenv_ptr.asFunction<_dart_getenv>();

  int _dupenv_s(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Buffer,
    ffi.Pointer<ffi.Uint64> _BufferCount,
    ffi.Pointer<ffi.Int8> _VarName,
  ) {
    return __dupenv_s(
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __dupenv_s_ptr =
      _lookup<ffi.NativeFunction<Native__dupenv_s>>('_dupenv_s');
  late final _dart__dupenv_s __dupenv_s =
      __dupenv_s_ptr.asFunction<_dart__dupenv_s>();

  int system(
    ffi.Pointer<ffi.Int8> _Command,
  ) {
    return _system(
      _Command,
    );
  }

  late final _system_ptr = _lookup<ffi.NativeFunction<Native_system>>('system');
  late final _dart_system _system = _system_ptr.asFunction<_dart_system>();

  int _putenv(
    ffi.Pointer<ffi.Int8> _EnvString,
  ) {
    return __putenv(
      _EnvString,
    );
  }

  late final __putenv_ptr =
      _lookup<ffi.NativeFunction<Native__putenv>>('_putenv');
  late final _dart__putenv __putenv = __putenv_ptr.asFunction<_dart__putenv>();

  int _putenv_s(
    ffi.Pointer<ffi.Int8> _Name,
    ffi.Pointer<ffi.Int8> _Value,
  ) {
    return __putenv_s(
      _Name,
      _Value,
    );
  }

  late final __putenv_s_ptr =
      _lookup<ffi.NativeFunction<Native__putenv_s>>('_putenv_s');
  late final _dart__putenv_s __putenv_s =
      __putenv_s_ptr.asFunction<_dart__putenv_s>();

  int _searchenv_s(
    ffi.Pointer<ffi.Int8> _Filename,
    ffi.Pointer<ffi.Int8> _VarName,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
  ) {
    return __searchenv_s(
      _Filename,
      _VarName,
      _Buffer,
      _BufferCount,
    );
  }

  late final __searchenv_s_ptr =
      _lookup<ffi.NativeFunction<Native__searchenv_s>>('_searchenv_s');
  late final _dart__searchenv_s __searchenv_s =
      __searchenv_s_ptr.asFunction<_dart__searchenv_s>();

  void _searchenv(
    ffi.Pointer<ffi.Int8> _Filename,
    ffi.Pointer<ffi.Int8> _VarName,
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return __searchenv(
      _Filename,
      _VarName,
      _Buffer,
    );
  }

  late final __searchenv_ptr =
      _lookup<ffi.NativeFunction<Native__searchenv>>('_searchenv');
  late final _dart__searchenv __searchenv =
      __searchenv_ptr.asFunction<_dart__searchenv>();

  void _seterrormode(
    int _Mode,
  ) {
    return __seterrormode(
      _Mode,
    );
  }

  late final __seterrormode_ptr =
      _lookup<ffi.NativeFunction<Native__seterrormode>>('_seterrormode');
  late final _dart__seterrormode __seterrormode =
      __seterrormode_ptr.asFunction<_dart__seterrormode>();

  void _beep(
    int _Frequency,
    int _Duration,
  ) {
    return __beep(
      _Frequency,
      _Duration,
    );
  }

  late final __beep_ptr = _lookup<ffi.NativeFunction<Native__beep>>('_beep');
  late final _dart__beep __beep = __beep_ptr.asFunction<_dart__beep>();

  void _sleep(
    int _Duration,
  ) {
    return __sleep(
      _Duration,
    );
  }

  late final __sleep_ptr = _lookup<ffi.NativeFunction<Native__sleep>>('_sleep');
  late final _dart__sleep __sleep = __sleep_ptr.asFunction<_dart__sleep>();

  ffi.Pointer<ffi.Int8> ecvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return _ecvt_1(
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _ecvt_ptr = _lookup<ffi.NativeFunction<Native_ecvt>>('ecvt');
  late final _dart_ecvt _ecvt_1 = _ecvt_ptr.asFunction<_dart_ecvt>();

  ffi.Pointer<ffi.Int8> fcvt(
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return _fcvt_1(
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _fcvt_ptr = _lookup<ffi.NativeFunction<Native_fcvt>>('fcvt');
  late final _dart_fcvt _fcvt_1 = _fcvt_ptr.asFunction<_dart_fcvt>();

  ffi.Pointer<ffi.Int8> gcvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int8> _DstBuf,
  ) {
    return _gcvt_1(
      _Value,
      _DigitCount,
      _DstBuf,
    );
  }

  late final _gcvt_ptr = _lookup<ffi.NativeFunction<Native_gcvt>>('gcvt');
  late final _dart_gcvt _gcvt_1 = _gcvt_ptr.asFunction<_dart_gcvt>();

  ffi.Pointer<ffi.Int8> itoa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return _itoa_1(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _itoa_ptr = _lookup<ffi.NativeFunction<Native_itoa>>('itoa');
  late final _dart_itoa _itoa_1 = _itoa_ptr.asFunction<_dart_itoa>();

  ffi.Pointer<ffi.Int8> ltoa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return _ltoa_1(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ltoa_ptr = _lookup<ffi.NativeFunction<Native_ltoa>>('ltoa');
  late final _dart_ltoa _ltoa_1 = _ltoa_ptr.asFunction<_dart_ltoa>();

  void swab(
    ffi.Pointer<ffi.Int8> _Buf1,
    ffi.Pointer<ffi.Int8> _Buf2,
    int _SizeInBytes,
  ) {
    return _swab_1(
      _Buf1,
      _Buf2,
      _SizeInBytes,
    );
  }

  late final _swab_ptr = _lookup<ffi.NativeFunction<Native_swab>>('swab');
  late final _dart_swab _swab_1 = _swab_ptr.asFunction<_dart_swab>();

  ffi.Pointer<ffi.Int8> ultoa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return _ultoa_1(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ultoa_ptr = _lookup<ffi.NativeFunction<Native_ultoa>>('ultoa');
  late final _dart_ultoa _ultoa_1 = _ultoa_ptr.asFunction<_dart_ultoa>();

  int putenv(
    ffi.Pointer<ffi.Int8> _EnvString,
  ) {
    return _putenv_1(
      _EnvString,
    );
  }

  late final _putenv_ptr = _lookup<ffi.NativeFunction<Native_putenv>>('putenv');
  late final _dart_putenv _putenv_1 = _putenv_ptr.asFunction<_dart_putenv>();

  ffi.Pointer<ffi.NativeFunction<_onexit_t>> onexit(
    ffi.Pointer<ffi.NativeFunction<_onexit_t>> _Func,
  ) {
    return _onexit_1(
      _Func,
    );
  }

  late final _onexit_ptr = _lookup<ffi.NativeFunction<Native_onexit>>('onexit');
  late final _dart_onexit _onexit_1 = _onexit_ptr.asFunction<_dart_onexit>();

  ffi.Pointer<ffi.Void> _alloca(
    int _Size,
  ) {
    return __alloca(
      _Size,
    );
  }

  late final __alloca_ptr =
      _lookup<ffi.NativeFunction<Native__alloca>>('_alloca');
  late final _dart__alloca __alloca = __alloca_ptr.asFunction<_dart__alloca>();

  int _get_heap_handle() {
    return __get_heap_handle();
  }

  late final __get_heap_handle_ptr =
      _lookup<ffi.NativeFunction<Native__get_heap_handle>>('_get_heap_handle');
  late final _dart__get_heap_handle __get_heap_handle =
      __get_heap_handle_ptr.asFunction<_dart__get_heap_handle>();

  int _heapmin() {
    return __heapmin();
  }

  late final __heapmin_ptr =
      _lookup<ffi.NativeFunction<Native__heapmin>>('_heapmin');
  late final _dart__heapmin __heapmin =
      __heapmin_ptr.asFunction<_dart__heapmin>();

  int _heapwalk(
    ffi.Pointer<ffi.Int32> _EntryInfo,
  ) {
    return __heapwalk(
      _EntryInfo,
    );
  }

  late final __heapwalk_ptr =
      _lookup<ffi.NativeFunction<Native__heapwalk>>('_heapwalk');
  late final _dart__heapwalk __heapwalk =
      __heapwalk_ptr.asFunction<_dart__heapwalk>();

  int _heapchk() {
    return __heapchk();
  }

  late final __heapchk_ptr =
      _lookup<ffi.NativeFunction<Native__heapchk>>('_heapchk');
  late final _dart__heapchk __heapchk =
      __heapchk_ptr.asFunction<_dart__heapchk>();

  int _resetstkoflw() {
    return __resetstkoflw();
  }

  late final __resetstkoflw_ptr =
      _lookup<ffi.NativeFunction<Native__resetstkoflw>>('_resetstkoflw');
  late final _dart__resetstkoflw __resetstkoflw =
      __resetstkoflw_ptr.asFunction<_dart__resetstkoflw>();

  void __std_exception_copy(
    ffi.Pointer<__std_exception_data> _From,
    ffi.Pointer<__std_exception_data> _To,
  ) {
    return ___std_exception_copy(
      _From,
      _To,
    );
  }

  late final ___std_exception_copy_ptr =
      _lookup<ffi.NativeFunction<Native___std_exception_copy>>(
          '__std_exception_copy');
  late final _dart___std_exception_copy ___std_exception_copy =
      ___std_exception_copy_ptr.asFunction<_dart___std_exception_copy>();

  void __std_exception_destroy(
    ffi.Pointer<__std_exception_data> _Data,
  ) {
    return ___std_exception_destroy(
      _Data,
    );
  }

  late final ___std_exception_destroy_ptr =
      _lookup<ffi.NativeFunction<Native___std_exception_destroy>>(
          '__std_exception_destroy');
  late final _dart___std_exception_destroy ___std_exception_destroy =
      ___std_exception_destroy_ptr.asFunction<_dart___std_exception_destroy>();

  void __ExceptionPtrRethrow(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return ___ExceptionPtrRethrow(
      arg0,
    );
  }

  late final ___ExceptionPtrRethrow_ptr =
      _lookup<ffi.NativeFunction<Native___ExceptionPtrRethrow>>(
          '__ExceptionPtrRethrow');
  late final _dart___ExceptionPtrRethrow ___ExceptionPtrRethrow =
      ___ExceptionPtrRethrow_ptr.asFunction<_dart___ExceptionPtrRethrow>();

  ffi.Pointer<ffi.Int32> __acrt_iob_func(
    int _Ix,
  ) {
    return ___acrt_iob_func(
      _Ix,
    );
  }

  late final ___acrt_iob_func_ptr =
      _lookup<ffi.NativeFunction<Native___acrt_iob_func>>('__acrt_iob_func');
  late final _dart___acrt_iob_func ___acrt_iob_func =
      ___acrt_iob_func_ptr.asFunction<_dart___acrt_iob_func>();

  int fgetwc(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _fgetwc(
      _Stream,
    );
  }

  late final _fgetwc_ptr = _lookup<ffi.NativeFunction<Native_fgetwc>>('fgetwc');
  late final _dart_fgetwc _fgetwc = _fgetwc_ptr.asFunction<_dart_fgetwc>();

  int _fgetwchar() {
    return __fgetwchar();
  }

  late final __fgetwchar_ptr =
      _lookup<ffi.NativeFunction<Native__fgetwchar>>('_fgetwchar');
  late final _dart__fgetwchar __fgetwchar =
      __fgetwchar_ptr.asFunction<_dart__fgetwchar>();

  int fputwc(
    int _Character,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _fputwc(
      _Character,
      _Stream,
    );
  }

  late final _fputwc_ptr = _lookup<ffi.NativeFunction<Native_fputwc>>('fputwc');
  late final _dart_fputwc _fputwc = _fputwc_ptr.asFunction<_dart_fputwc>();

  int _fputwchar(
    int _Character,
  ) {
    return __fputwchar(
      _Character,
    );
  }

  late final __fputwchar_ptr =
      _lookup<ffi.NativeFunction<Native__fputwchar>>('_fputwchar');
  late final _dart__fputwchar __fputwchar =
      __fputwchar_ptr.asFunction<_dart__fputwchar>();

  int getwc(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _getwc(
      _Stream,
    );
  }

  late final _getwc_ptr = _lookup<ffi.NativeFunction<Native_getwc>>('getwc');
  late final _dart_getwc _getwc = _getwc_ptr.asFunction<_dart_getwc>();

  int getwchar() {
    return _getwchar();
  }

  late final _getwchar_ptr =
      _lookup<ffi.NativeFunction<Native_getwchar>>('getwchar');
  late final _dart_getwchar _getwchar =
      _getwchar_ptr.asFunction<_dart_getwchar>();

  ffi.Pointer<ffi.Uint16> fgetws(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _fgetws(
      _Buffer,
      _BufferCount,
      _Stream,
    );
  }

  late final _fgetws_ptr = _lookup<ffi.NativeFunction<Native_fgetws>>('fgetws');
  late final _dart_fgetws _fgetws = _fgetws_ptr.asFunction<_dart_fgetws>();

  int fputws(
    ffi.Pointer<ffi.Uint16> _Buffer,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _fputws(
      _Buffer,
      _Stream,
    );
  }

  late final _fputws_ptr = _lookup<ffi.NativeFunction<Native_fputws>>('fputws');
  late final _dart_fputws _fputws = _fputws_ptr.asFunction<_dart_fputws>();

  ffi.Pointer<ffi.Uint16> _getws_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
  ) {
    return __getws_s(
      _Buffer,
      _BufferCount,
    );
  }

  late final __getws_s_ptr =
      _lookup<ffi.NativeFunction<Native__getws_s>>('_getws_s');
  late final _dart__getws_s __getws_s =
      __getws_s_ptr.asFunction<_dart__getws_s>();

  int putwc(
    int _Character,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _putwc(
      _Character,
      _Stream,
    );
  }

  late final _putwc_ptr = _lookup<ffi.NativeFunction<Native_putwc>>('putwc');
  late final _dart_putwc _putwc = _putwc_ptr.asFunction<_dart_putwc>();

  int putwchar(
    int _Character,
  ) {
    return _putwchar(
      _Character,
    );
  }

  late final _putwchar_ptr =
      _lookup<ffi.NativeFunction<Native_putwchar>>('putwchar');
  late final _dart_putwchar _putwchar =
      _putwchar_ptr.asFunction<_dart_putwchar>();

  int _putws(
    ffi.Pointer<ffi.Uint16> _Buffer,
  ) {
    return __putws(
      _Buffer,
    );
  }

  late final __putws_ptr = _lookup<ffi.NativeFunction<Native__putws>>('_putws');
  late final _dart__putws __putws = __putws_ptr.asFunction<_dart__putws>();

  int ungetwc(
    int _Character,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _ungetwc(
      _Character,
      _Stream,
    );
  }

  late final _ungetwc_ptr =
      _lookup<ffi.NativeFunction<Native_ungetwc>>('ungetwc');
  late final _dart_ungetwc _ungetwc = _ungetwc_ptr.asFunction<_dart_ungetwc>();

  ffi.Pointer<ffi.Int32> _wfdopen(
    int _FileHandle,
    ffi.Pointer<ffi.Uint16> _Mode,
  ) {
    return __wfdopen(
      _FileHandle,
      _Mode,
    );
  }

  late final __wfdopen_ptr =
      _lookup<ffi.NativeFunction<Native__wfdopen>>('_wfdopen');
  late final _dart__wfdopen __wfdopen =
      __wfdopen_ptr.asFunction<_dart__wfdopen>();

  ffi.Pointer<ffi.Int32> _wfopen(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Uint16> _Mode,
  ) {
    return __wfopen(
      _FileName,
      _Mode,
    );
  }

  late final __wfopen_ptr =
      _lookup<ffi.NativeFunction<Native__wfopen>>('_wfopen');
  late final _dart__wfopen __wfopen = __wfopen_ptr.asFunction<_dart__wfopen>();

  int _wfopen_s(
    ffi.Pointer<ffi.Pointer<ffi.Int32>> _Stream,
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Uint16> _Mode,
  ) {
    return __wfopen_s(
      _Stream,
      _FileName,
      _Mode,
    );
  }

  late final __wfopen_s_ptr =
      _lookup<ffi.NativeFunction<Native__wfopen_s>>('_wfopen_s');
  late final _dart__wfopen_s __wfopen_s =
      __wfopen_s_ptr.asFunction<_dart__wfopen_s>();

  ffi.Pointer<ffi.Int32> _wfreopen(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Uint16> _Mode,
    ffi.Pointer<ffi.Int32> _OldStream,
  ) {
    return __wfreopen(
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final __wfreopen_ptr =
      _lookup<ffi.NativeFunction<Native__wfreopen>>('_wfreopen');
  late final _dart__wfreopen __wfreopen =
      __wfreopen_ptr.asFunction<_dart__wfreopen>();

  int _wfreopen_s(
    ffi.Pointer<ffi.Pointer<ffi.Int32>> _Stream,
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Uint16> _Mode,
    ffi.Pointer<ffi.Int32> _OldStream,
  ) {
    return __wfreopen_s(
      _Stream,
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final __wfreopen_s_ptr =
      _lookup<ffi.NativeFunction<Native__wfreopen_s>>('_wfreopen_s');
  late final _dart__wfreopen_s __wfreopen_s =
      __wfreopen_s_ptr.asFunction<_dart__wfreopen_s>();

  ffi.Pointer<ffi.Int32> _wfsopen(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Uint16> _Mode,
    int _ShFlag,
  ) {
    return __wfsopen(
      _FileName,
      _Mode,
      _ShFlag,
    );
  }

  late final __wfsopen_ptr =
      _lookup<ffi.NativeFunction<Native__wfsopen>>('_wfsopen');
  late final _dart__wfsopen __wfsopen =
      __wfsopen_ptr.asFunction<_dart__wfsopen>();

  ffi.Pointer<ffi.Int32> _wpopen(
    ffi.Pointer<ffi.Uint16> _Command,
    ffi.Pointer<ffi.Uint16> _Mode,
  ) {
    return __wpopen(
      _Command,
      _Mode,
    );
  }

  late final __wpopen_ptr =
      _lookup<ffi.NativeFunction<Native__wpopen>>('_wpopen');
  late final _dart__wpopen __wpopen = __wpopen_ptr.asFunction<_dart__wpopen>();

  int _wremove(
    ffi.Pointer<ffi.Uint16> _FileName,
  ) {
    return __wremove(
      _FileName,
    );
  }

  late final __wremove_ptr =
      _lookup<ffi.NativeFunction<Native__wremove>>('_wremove');
  late final _dart__wremove __wremove =
      __wremove_ptr.asFunction<_dart__wremove>();

  ffi.Pointer<ffi.Uint16> _wtempnam(
    ffi.Pointer<ffi.Uint16> _Directory,
    ffi.Pointer<ffi.Uint16> _FilePrefix,
  ) {
    return __wtempnam(
      _Directory,
      _FilePrefix,
    );
  }

  late final __wtempnam_ptr =
      _lookup<ffi.NativeFunction<Native__wtempnam>>('_wtempnam');
  late final _dart__wtempnam __wtempnam =
      __wtempnam_ptr.asFunction<_dart__wtempnam>();

  int _wtmpnam_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
  ) {
    return __wtmpnam_s(
      _Buffer,
      _BufferCount,
    );
  }

  late final __wtmpnam_s_ptr =
      _lookup<ffi.NativeFunction<Native__wtmpnam_s>>('_wtmpnam_s');
  late final _dart__wtmpnam_s __wtmpnam_s =
      __wtmpnam_s_ptr.asFunction<_dart__wtmpnam_s>();

  ffi.Pointer<ffi.Uint16> _wtmpnam(
    ffi.Pointer<ffi.Uint16> _Buffer,
  ) {
    return __wtmpnam(
      _Buffer,
    );
  }

  late final __wtmpnam_ptr =
      _lookup<ffi.NativeFunction<Native__wtmpnam>>('_wtmpnam');
  late final _dart__wtmpnam __wtmpnam =
      __wtmpnam_ptr.asFunction<_dart__wtmpnam>();

  int _fgetwc_nolock(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __fgetwc_nolock(
      _Stream,
    );
  }

  late final __fgetwc_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__fgetwc_nolock>>('_fgetwc_nolock');
  late final _dart__fgetwc_nolock __fgetwc_nolock =
      __fgetwc_nolock_ptr.asFunction<_dart__fgetwc_nolock>();

  int _fputwc_nolock(
    int _Character,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __fputwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __fputwc_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__fputwc_nolock>>('_fputwc_nolock');
  late final _dart__fputwc_nolock __fputwc_nolock =
      __fputwc_nolock_ptr.asFunction<_dart__fputwc_nolock>();

  int _getwc_nolock(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __getwc_nolock(
      _Stream,
    );
  }

  late final __getwc_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__getwc_nolock>>('_getwc_nolock');
  late final _dart__getwc_nolock __getwc_nolock =
      __getwc_nolock_ptr.asFunction<_dart__getwc_nolock>();

  int _putwc_nolock(
    int _Character,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __putwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __putwc_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__putwc_nolock>>('_putwc_nolock');
  late final _dart__putwc_nolock __putwc_nolock =
      __putwc_nolock_ptr.asFunction<_dart__putwc_nolock>();

  int _ungetwc_nolock(
    int _Character,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __ungetwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __ungetwc_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__ungetwc_nolock>>('_ungetwc_nolock');
  late final _dart__ungetwc_nolock __ungetwc_nolock =
      __ungetwc_nolock_ptr.asFunction<_dart__ungetwc_nolock>();

  int __stdio_common_vfwprintf(
    int _Options,
    ffi.Pointer<ffi.Int32> _Stream,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vfwprintf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintf_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vfwprintf>>(
          '__stdio_common_vfwprintf');
  late final _dart___stdio_common_vfwprintf ___stdio_common_vfwprintf =
      ___stdio_common_vfwprintf_ptr
          .asFunction<_dart___stdio_common_vfwprintf>();

  int __stdio_common_vfwprintf_s(
    int _Options,
    ffi.Pointer<ffi.Int32> _Stream,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vfwprintf_s(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintf_s_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vfwprintf_s>>(
          '__stdio_common_vfwprintf_s');
  late final _dart___stdio_common_vfwprintf_s ___stdio_common_vfwprintf_s =
      ___stdio_common_vfwprintf_s_ptr
          .asFunction<_dart___stdio_common_vfwprintf_s>();

  int __stdio_common_vfwprintf_p(
    int _Options,
    ffi.Pointer<ffi.Int32> _Stream,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vfwprintf_p(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintf_p_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vfwprintf_p>>(
          '__stdio_common_vfwprintf_p');
  late final _dart___stdio_common_vfwprintf_p ___stdio_common_vfwprintf_p =
      ___stdio_common_vfwprintf_p_ptr
          .asFunction<_dart___stdio_common_vfwprintf_p>();

  int __stdio_common_vfwscanf(
    int _Options,
    ffi.Pointer<ffi.Int32> _Stream,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vfwscanf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwscanf_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vfwscanf>>(
          '__stdio_common_vfwscanf');
  late final _dart___stdio_common_vfwscanf ___stdio_common_vfwscanf =
      ___stdio_common_vfwscanf_ptr.asFunction<_dart___stdio_common_vfwscanf>();

  int __stdio_common_vswprintf(
    int _Options,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vswprintf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintf_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vswprintf>>(
          '__stdio_common_vswprintf');
  late final _dart___stdio_common_vswprintf ___stdio_common_vswprintf =
      ___stdio_common_vswprintf_ptr
          .asFunction<_dart___stdio_common_vswprintf>();

  int __stdio_common_vswprintf_s(
    int _Options,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vswprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintf_s_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vswprintf_s>>(
          '__stdio_common_vswprintf_s');
  late final _dart___stdio_common_vswprintf_s ___stdio_common_vswprintf_s =
      ___stdio_common_vswprintf_s_ptr
          .asFunction<_dart___stdio_common_vswprintf_s>();

  int __stdio_common_vsnwprintf_s(
    int _Options,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vsnwprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _MaxCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsnwprintf_s_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vsnwprintf_s>>(
          '__stdio_common_vsnwprintf_s');
  late final _dart___stdio_common_vsnwprintf_s ___stdio_common_vsnwprintf_s =
      ___stdio_common_vsnwprintf_s_ptr
          .asFunction<_dart___stdio_common_vsnwprintf_s>();

  int __stdio_common_vswprintf_p(
    int _Options,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vswprintf_p(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintf_p_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vswprintf_p>>(
          '__stdio_common_vswprintf_p');
  late final _dart___stdio_common_vswprintf_p ___stdio_common_vswprintf_p =
      ___stdio_common_vswprintf_p_ptr
          .asFunction<_dart___stdio_common_vswprintf_p>();

  int __stdio_common_vswscanf(
    int _Options,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vswscanf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswscanf_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vswscanf>>(
          '__stdio_common_vswscanf');
  late final _dart___stdio_common_vswscanf ___stdio_common_vswscanf =
      ___stdio_common_vswscanf_ptr.asFunction<_dart___stdio_common_vswscanf>();

  int _get_stream_buffer_pointers(
    ffi.Pointer<ffi.Int32> _Stream,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _Base,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _Pointer,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> _Count,
  ) {
    return __get_stream_buffer_pointers(
      _Stream,
      _Base,
      _Pointer,
      _Count,
    );
  }

  late final __get_stream_buffer_pointers_ptr =
      _lookup<ffi.NativeFunction<Native__get_stream_buffer_pointers>>(
          '_get_stream_buffer_pointers');
  late final _dart__get_stream_buffer_pointers __get_stream_buffer_pointers =
      __get_stream_buffer_pointers_ptr
          .asFunction<_dart__get_stream_buffer_pointers>();

  int clearerr_s(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _clearerr_s(
      _Stream,
    );
  }

  late final _clearerr_s_ptr =
      _lookup<ffi.NativeFunction<Native_clearerr_s>>('clearerr_s');
  late final _dart_clearerr_s _clearerr_s =
      _clearerr_s_ptr.asFunction<_dart_clearerr_s>();

  int fopen_s(
    ffi.Pointer<ffi.Pointer<ffi.Int32>> _Stream,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Mode,
  ) {
    return _fopen_s(
      _Stream,
      _FileName,
      _Mode,
    );
  }

  late final _fopen_s_ptr =
      _lookup<ffi.NativeFunction<Native_fopen_s>>('fopen_s');
  late final _dart_fopen_s _fopen_s = _fopen_s_ptr.asFunction<_dart_fopen_s>();

  int fread_s(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _fread_s(
      _Buffer,
      _BufferSize,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fread_s_ptr =
      _lookup<ffi.NativeFunction<Native_fread_s>>('fread_s');
  late final _dart_fread_s _fread_s = _fread_s_ptr.asFunction<_dart_fread_s>();

  int freopen_s(
    ffi.Pointer<ffi.Pointer<ffi.Int32>> _Stream,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Mode,
    ffi.Pointer<ffi.Int32> _OldStream,
  ) {
    return _freopen_s(
      _Stream,
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final _freopen_s_ptr =
      _lookup<ffi.NativeFunction<Native_freopen_s>>('freopen_s');
  late final _dart_freopen_s _freopen_s =
      _freopen_s_ptr.asFunction<_dart_freopen_s>();

  ffi.Pointer<ffi.Int8> gets_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Size,
  ) {
    return _gets_s(
      _Buffer,
      _Size,
    );
  }

  late final _gets_s_ptr = _lookup<ffi.NativeFunction<Native_gets_s>>('gets_s');
  late final _dart_gets_s _gets_s = _gets_s_ptr.asFunction<_dart_gets_s>();

  int tmpfile_s(
    ffi.Pointer<ffi.Pointer<ffi.Int32>> _Stream,
  ) {
    return _tmpfile_s(
      _Stream,
    );
  }

  late final _tmpfile_s_ptr =
      _lookup<ffi.NativeFunction<Native_tmpfile_s>>('tmpfile_s');
  late final _dart_tmpfile_s _tmpfile_s =
      _tmpfile_s_ptr.asFunction<_dart_tmpfile_s>();

  int tmpnam_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Size,
  ) {
    return _tmpnam_s(
      _Buffer,
      _Size,
    );
  }

  late final _tmpnam_s_ptr =
      _lookup<ffi.NativeFunction<Native_tmpnam_s>>('tmpnam_s');
  late final _dart_tmpnam_s _tmpnam_s =
      _tmpnam_s_ptr.asFunction<_dart_tmpnam_s>();

  void clearerr(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _clearerr(
      _Stream,
    );
  }

  late final _clearerr_ptr =
      _lookup<ffi.NativeFunction<Native_clearerr>>('clearerr');
  late final _dart_clearerr _clearerr =
      _clearerr_ptr.asFunction<_dart_clearerr>();

  int fclose(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _fclose(
      _Stream,
    );
  }

  late final _fclose_ptr = _lookup<ffi.NativeFunction<Native_fclose>>('fclose');
  late final _dart_fclose _fclose = _fclose_ptr.asFunction<_dart_fclose>();

  int _fcloseall() {
    return __fcloseall();
  }

  late final __fcloseall_ptr =
      _lookup<ffi.NativeFunction<Native__fcloseall>>('_fcloseall');
  late final _dart__fcloseall __fcloseall =
      __fcloseall_ptr.asFunction<_dart__fcloseall>();

  ffi.Pointer<ffi.Int32> _fdopen(
    int _FileHandle,
    ffi.Pointer<ffi.Int8> _Mode,
  ) {
    return __fdopen(
      _FileHandle,
      _Mode,
    );
  }

  late final __fdopen_ptr =
      _lookup<ffi.NativeFunction<Native__fdopen>>('_fdopen');
  late final _dart__fdopen __fdopen = __fdopen_ptr.asFunction<_dart__fdopen>();

  int feof(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _feof(
      _Stream,
    );
  }

  late final _feof_ptr = _lookup<ffi.NativeFunction<Native_feof>>('feof');
  late final _dart_feof _feof = _feof_ptr.asFunction<_dart_feof>();

  int ferror(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _ferror(
      _Stream,
    );
  }

  late final _ferror_ptr = _lookup<ffi.NativeFunction<Native_ferror>>('ferror');
  late final _dart_ferror _ferror = _ferror_ptr.asFunction<_dart_ferror>();

  int fflush(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _fflush(
      _Stream,
    );
  }

  late final _fflush_ptr = _lookup<ffi.NativeFunction<Native_fflush>>('fflush');
  late final _dart_fflush _fflush = _fflush_ptr.asFunction<_dart_fflush>();

  int fgetc(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _fgetc(
      _Stream,
    );
  }

  late final _fgetc_ptr = _lookup<ffi.NativeFunction<Native_fgetc>>('fgetc');
  late final _dart_fgetc _fgetc = _fgetc_ptr.asFunction<_dart_fgetc>();

  int _fgetchar() {
    return __fgetchar();
  }

  late final __fgetchar_ptr =
      _lookup<ffi.NativeFunction<Native__fgetchar>>('_fgetchar');
  late final _dart__fgetchar __fgetchar =
      __fgetchar_ptr.asFunction<_dart__fgetchar>();

  int fgetpos(
    ffi.Pointer<ffi.Int32> _Stream,
    ffi.Pointer<ffi.Int64> _Position,
  ) {
    return _fgetpos(
      _Stream,
      _Position,
    );
  }

  late final _fgetpos_ptr =
      _lookup<ffi.NativeFunction<Native_fgetpos>>('fgetpos');
  late final _dart_fgetpos _fgetpos = _fgetpos_ptr.asFunction<_dart_fgetpos>();

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _MaxCount,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _fgets(
      _Buffer,
      _MaxCount,
      _Stream,
    );
  }

  late final _fgets_ptr = _lookup<ffi.NativeFunction<Native_fgets>>('fgets');
  late final _dart_fgets _fgets = _fgets_ptr.asFunction<_dart_fgets>();

  int _fileno(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __fileno(
      _Stream,
    );
  }

  late final __fileno_ptr =
      _lookup<ffi.NativeFunction<Native__fileno>>('_fileno');
  late final _dart__fileno __fileno = __fileno_ptr.asFunction<_dart__fileno>();

  int _flushall() {
    return __flushall();
  }

  late final __flushall_ptr =
      _lookup<ffi.NativeFunction<Native__flushall>>('_flushall');
  late final _dart__flushall __flushall =
      __flushall_ptr.asFunction<_dart__flushall>();

  ffi.Pointer<ffi.Int32> fopen(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Mode,
  ) {
    return _fopen(
      _FileName,
      _Mode,
    );
  }

  late final _fopen_ptr = _lookup<ffi.NativeFunction<Native_fopen>>('fopen');
  late final _dart_fopen _fopen = _fopen_ptr.asFunction<_dart_fopen>();

  int fputc(
    int _Character,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _fputc(
      _Character,
      _Stream,
    );
  }

  late final _fputc_ptr = _lookup<ffi.NativeFunction<Native_fputc>>('fputc');
  late final _dart_fputc _fputc = _fputc_ptr.asFunction<_dart_fputc>();

  int _fputchar(
    int _Character,
  ) {
    return __fputchar(
      _Character,
    );
  }

  late final __fputchar_ptr =
      _lookup<ffi.NativeFunction<Native__fputchar>>('_fputchar');
  late final _dart__fputchar __fputchar =
      __fputchar_ptr.asFunction<_dart__fputchar>();

  int fputs(
    ffi.Pointer<ffi.Int8> _Buffer,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _fputs(
      _Buffer,
      _Stream,
    );
  }

  late final _fputs_ptr = _lookup<ffi.NativeFunction<Native_fputs>>('fputs');
  late final _dart_fputs _fputs = _fputs_ptr.asFunction<_dart_fputs>();

  int fread(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _fread(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fread_ptr = _lookup<ffi.NativeFunction<Native_fread>>('fread');
  late final _dart_fread _fread = _fread_ptr.asFunction<_dart_fread>();

  ffi.Pointer<ffi.Int32> freopen(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Mode,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _freopen(
      _FileName,
      _Mode,
      _Stream,
    );
  }

  late final _freopen_ptr =
      _lookup<ffi.NativeFunction<Native_freopen>>('freopen');
  late final _dart_freopen _freopen = _freopen_ptr.asFunction<_dart_freopen>();

  ffi.Pointer<ffi.Int32> _fsopen(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Mode,
    int _ShFlag,
  ) {
    return __fsopen(
      _FileName,
      _Mode,
      _ShFlag,
    );
  }

  late final __fsopen_ptr =
      _lookup<ffi.NativeFunction<Native__fsopen>>('_fsopen');
  late final _dart__fsopen __fsopen = __fsopen_ptr.asFunction<_dart__fsopen>();

  int fsetpos(
    ffi.Pointer<ffi.Int32> _Stream,
    ffi.Pointer<ffi.Int64> _Position,
  ) {
    return _fsetpos(
      _Stream,
      _Position,
    );
  }

  late final _fsetpos_ptr =
      _lookup<ffi.NativeFunction<Native_fsetpos>>('fsetpos');
  late final _dart_fsetpos _fsetpos = _fsetpos_ptr.asFunction<_dart_fsetpos>();

  int fseek(
    ffi.Pointer<ffi.Int32> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return _fseek(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final _fseek_ptr = _lookup<ffi.NativeFunction<Native_fseek>>('fseek');
  late final _dart_fseek _fseek = _fseek_ptr.asFunction<_dart_fseek>();

  int _fseeki64(
    ffi.Pointer<ffi.Int32> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseeki64(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseeki64_ptr =
      _lookup<ffi.NativeFunction<Native__fseeki64>>('_fseeki64');
  late final _dart__fseeki64 __fseeki64 =
      __fseeki64_ptr.asFunction<_dart__fseeki64>();

  int ftell(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _ftell(
      _Stream,
    );
  }

  late final _ftell_ptr = _lookup<ffi.NativeFunction<Native_ftell>>('ftell');
  late final _dart_ftell _ftell = _ftell_ptr.asFunction<_dart_ftell>();

  int _ftelli64(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __ftelli64(
      _Stream,
    );
  }

  late final __ftelli64_ptr =
      _lookup<ffi.NativeFunction<Native__ftelli64>>('_ftelli64');
  late final _dart__ftelli64 __ftelli64 =
      __ftelli64_ptr.asFunction<_dart__ftelli64>();

  int fwrite(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _fwrite(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fwrite_ptr = _lookup<ffi.NativeFunction<Native_fwrite>>('fwrite');
  late final _dart_fwrite _fwrite = _fwrite_ptr.asFunction<_dart_fwrite>();

  int getc(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _getc(
      _Stream,
    );
  }

  late final _getc_ptr = _lookup<ffi.NativeFunction<Native_getc>>('getc');
  late final _dart_getc _getc = _getc_ptr.asFunction<_dart_getc>();

  int getchar() {
    return _getchar();
  }

  late final _getchar_ptr =
      _lookup<ffi.NativeFunction<Native_getchar>>('getchar');
  late final _dart_getchar _getchar = _getchar_ptr.asFunction<_dart_getchar>();

  int _getmaxstdio() {
    return __getmaxstdio();
  }

  late final __getmaxstdio_ptr =
      _lookup<ffi.NativeFunction<Native__getmaxstdio>>('_getmaxstdio');
  late final _dart__getmaxstdio __getmaxstdio =
      __getmaxstdio_ptr.asFunction<_dart__getmaxstdio>();

  int _getw(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __getw(
      _Stream,
    );
  }

  late final __getw_ptr = _lookup<ffi.NativeFunction<Native__getw>>('_getw');
  late final _dart__getw __getw = __getw_ptr.asFunction<_dart__getw>();

  int _pclose(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __pclose(
      _Stream,
    );
  }

  late final __pclose_ptr =
      _lookup<ffi.NativeFunction<Native__pclose>>('_pclose');
  late final _dart__pclose __pclose = __pclose_ptr.asFunction<_dart__pclose>();

  ffi.Pointer<ffi.Int32> _popen(
    ffi.Pointer<ffi.Int8> _Command,
    ffi.Pointer<ffi.Int8> _Mode,
  ) {
    return __popen(
      _Command,
      _Mode,
    );
  }

  late final __popen_ptr = _lookup<ffi.NativeFunction<Native__popen>>('_popen');
  late final _dart__popen __popen = __popen_ptr.asFunction<_dart__popen>();

  int putc(
    int _Character,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _putc(
      _Character,
      _Stream,
    );
  }

  late final _putc_ptr = _lookup<ffi.NativeFunction<Native_putc>>('putc');
  late final _dart_putc _putc = _putc_ptr.asFunction<_dart_putc>();

  int putchar(
    int _Character,
  ) {
    return _putchar(
      _Character,
    );
  }

  late final _putchar_ptr =
      _lookup<ffi.NativeFunction<Native_putchar>>('putchar');
  late final _dart_putchar _putchar = _putchar_ptr.asFunction<_dart_putchar>();

  int puts(
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return _puts(
      _Buffer,
    );
  }

  late final _puts_ptr = _lookup<ffi.NativeFunction<Native_puts>>('puts');
  late final _dart_puts _puts = _puts_ptr.asFunction<_dart_puts>();

  int _putw(
    int _Word,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __putw(
      _Word,
      _Stream,
    );
  }

  late final __putw_ptr = _lookup<ffi.NativeFunction<Native__putw>>('_putw');
  late final _dart__putw __putw = __putw_ptr.asFunction<_dart__putw>();

  int remove(
    ffi.Pointer<ffi.Int8> _FileName,
  ) {
    return _remove(
      _FileName,
    );
  }

  late final _remove_ptr = _lookup<ffi.NativeFunction<Native_remove>>('remove');
  late final _dart_remove _remove = _remove_ptr.asFunction<_dart_remove>();

  int rename(
    ffi.Pointer<ffi.Int8> _OldFileName,
    ffi.Pointer<ffi.Int8> _NewFileName,
  ) {
    return _rename(
      _OldFileName,
      _NewFileName,
    );
  }

  late final _rename_ptr = _lookup<ffi.NativeFunction<Native_rename>>('rename');
  late final _dart_rename _rename = _rename_ptr.asFunction<_dart_rename>();

  int _unlink(
    ffi.Pointer<ffi.Int8> _FileName,
  ) {
    return __unlink(
      _FileName,
    );
  }

  late final __unlink_ptr =
      _lookup<ffi.NativeFunction<Native__unlink>>('_unlink');
  late final _dart__unlink __unlink = __unlink_ptr.asFunction<_dart__unlink>();

  int unlink(
    ffi.Pointer<ffi.Int8> _FileName,
  ) {
    return _unlink_1(
      _FileName,
    );
  }

  late final _unlink_ptr = _lookup<ffi.NativeFunction<Native_unlink>>('unlink');
  late final _dart_unlink _unlink_1 = _unlink_ptr.asFunction<_dart_unlink>();

  void rewind(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _rewind(
      _Stream,
    );
  }

  late final _rewind_ptr = _lookup<ffi.NativeFunction<Native_rewind>>('rewind');
  late final _dart_rewind _rewind = _rewind_ptr.asFunction<_dart_rewind>();

  int _rmtmp() {
    return __rmtmp();
  }

  late final __rmtmp_ptr = _lookup<ffi.NativeFunction<Native__rmtmp>>('_rmtmp');
  late final _dart__rmtmp __rmtmp = __rmtmp_ptr.asFunction<_dart__rmtmp>();

  void setbuf(
    ffi.Pointer<ffi.Int32> _Stream,
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return _setbuf(
      _Stream,
      _Buffer,
    );
  }

  late final _setbuf_ptr = _lookup<ffi.NativeFunction<Native_setbuf>>('setbuf');
  late final _dart_setbuf _setbuf = _setbuf_ptr.asFunction<_dart_setbuf>();

  int _setmaxstdio(
    int _Maximum,
  ) {
    return __setmaxstdio(
      _Maximum,
    );
  }

  late final __setmaxstdio_ptr =
      _lookup<ffi.NativeFunction<Native__setmaxstdio>>('_setmaxstdio');
  late final _dart__setmaxstdio __setmaxstdio =
      __setmaxstdio_ptr.asFunction<_dart__setmaxstdio>();

  int setvbuf(
    ffi.Pointer<ffi.Int32> _Stream,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Mode,
    int _Size,
  ) {
    return _setvbuf(
      _Stream,
      _Buffer,
      _Mode,
      _Size,
    );
  }

  late final _setvbuf_ptr =
      _lookup<ffi.NativeFunction<Native_setvbuf>>('setvbuf');
  late final _dart_setvbuf _setvbuf = _setvbuf_ptr.asFunction<_dart_setvbuf>();

  ffi.Pointer<ffi.Int8> _tempnam(
    ffi.Pointer<ffi.Int8> _DirectoryName,
    ffi.Pointer<ffi.Int8> _FilePrefix,
  ) {
    return __tempnam(
      _DirectoryName,
      _FilePrefix,
    );
  }

  late final __tempnam_ptr =
      _lookup<ffi.NativeFunction<Native__tempnam>>('_tempnam');
  late final _dart__tempnam __tempnam =
      __tempnam_ptr.asFunction<_dart__tempnam>();

  ffi.Pointer<ffi.Int32> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfile_ptr =
      _lookup<ffi.NativeFunction<Native_tmpfile>>('tmpfile');
  late final _dart_tmpfile _tmpfile = _tmpfile_ptr.asFunction<_dart_tmpfile>();

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return _tmpnam(
      _Buffer,
    );
  }

  late final _tmpnam_ptr = _lookup<ffi.NativeFunction<Native_tmpnam>>('tmpnam');
  late final _dart_tmpnam _tmpnam = _tmpnam_ptr.asFunction<_dart_tmpnam>();

  int ungetc(
    int _Character,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _ungetc(
      _Character,
      _Stream,
    );
  }

  late final _ungetc_ptr = _lookup<ffi.NativeFunction<Native_ungetc>>('ungetc');
  late final _dart_ungetc _ungetc = _ungetc_ptr.asFunction<_dart_ungetc>();

  void _lock_file(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __lock_file(
      _Stream,
    );
  }

  late final __lock_file_ptr =
      _lookup<ffi.NativeFunction<Native__lock_file>>('_lock_file');
  late final _dart__lock_file __lock_file =
      __lock_file_ptr.asFunction<_dart__lock_file>();

  void _unlock_file(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __unlock_file(
      _Stream,
    );
  }

  late final __unlock_file_ptr =
      _lookup<ffi.NativeFunction<Native__unlock_file>>('_unlock_file');
  late final _dart__unlock_file __unlock_file =
      __unlock_file_ptr.asFunction<_dart__unlock_file>();

  int _fclose_nolock(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __fclose_nolock(
      _Stream,
    );
  }

  late final __fclose_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__fclose_nolock>>('_fclose_nolock');
  late final _dart__fclose_nolock __fclose_nolock =
      __fclose_nolock_ptr.asFunction<_dart__fclose_nolock>();

  int _fflush_nolock(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __fflush_nolock(
      _Stream,
    );
  }

  late final __fflush_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__fflush_nolock>>('_fflush_nolock');
  late final _dart__fflush_nolock __fflush_nolock =
      __fflush_nolock_ptr.asFunction<_dart__fflush_nolock>();

  int _fgetc_nolock(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __fgetc_nolock(
      _Stream,
    );
  }

  late final __fgetc_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__fgetc_nolock>>('_fgetc_nolock');
  late final _dart__fgetc_nolock __fgetc_nolock =
      __fgetc_nolock_ptr.asFunction<_dart__fgetc_nolock>();

  int _fputc_nolock(
    int _Character,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __fputc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __fputc_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__fputc_nolock>>('_fputc_nolock');
  late final _dart__fputc_nolock __fputc_nolock =
      __fputc_nolock_ptr.asFunction<_dart__fputc_nolock>();

  int _fread_nolock(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __fread_nolock(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fread_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__fread_nolock>>('_fread_nolock');
  late final _dart__fread_nolock __fread_nolock =
      __fread_nolock_ptr.asFunction<_dart__fread_nolock>();

  int _fread_nolock_s(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __fread_nolock_s(
      _Buffer,
      _BufferSize,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fread_nolock_s_ptr =
      _lookup<ffi.NativeFunction<Native__fread_nolock_s>>('_fread_nolock_s');
  late final _dart__fread_nolock_s __fread_nolock_s =
      __fread_nolock_s_ptr.asFunction<_dart__fread_nolock_s>();

  int _fseek_nolock(
    ffi.Pointer<ffi.Int32> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseek_nolock(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseek_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__fseek_nolock>>('_fseek_nolock');
  late final _dart__fseek_nolock __fseek_nolock =
      __fseek_nolock_ptr.asFunction<_dart__fseek_nolock>();

  int _fseeki64_nolock(
    ffi.Pointer<ffi.Int32> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseeki64_nolock(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseeki64_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__fseeki64_nolock>>('_fseeki64_nolock');
  late final _dart__fseeki64_nolock __fseeki64_nolock =
      __fseeki64_nolock_ptr.asFunction<_dart__fseeki64_nolock>();

  int _ftell_nolock(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __ftell_nolock(
      _Stream,
    );
  }

  late final __ftell_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__ftell_nolock>>('_ftell_nolock');
  late final _dart__ftell_nolock __ftell_nolock =
      __ftell_nolock_ptr.asFunction<_dart__ftell_nolock>();

  int _ftelli64_nolock(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __ftelli64_nolock(
      _Stream,
    );
  }

  late final __ftelli64_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__ftelli64_nolock>>('_ftelli64_nolock');
  late final _dart__ftelli64_nolock __ftelli64_nolock =
      __ftelli64_nolock_ptr.asFunction<_dart__ftelli64_nolock>();

  int _fwrite_nolock(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __fwrite_nolock(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fwrite_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__fwrite_nolock>>('_fwrite_nolock');
  late final _dart__fwrite_nolock __fwrite_nolock =
      __fwrite_nolock_ptr.asFunction<_dart__fwrite_nolock>();

  int _getc_nolock(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __getc_nolock(
      _Stream,
    );
  }

  late final __getc_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__getc_nolock>>('_getc_nolock');
  late final _dart__getc_nolock __getc_nolock =
      __getc_nolock_ptr.asFunction<_dart__getc_nolock>();

  int _putc_nolock(
    int _Character,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __putc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __putc_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__putc_nolock>>('_putc_nolock');
  late final _dart__putc_nolock __putc_nolock =
      __putc_nolock_ptr.asFunction<_dart__putc_nolock>();

  int _ungetc_nolock(
    int _Character,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return __ungetc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __ungetc_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__ungetc_nolock>>('_ungetc_nolock');
  late final _dart__ungetc_nolock __ungetc_nolock =
      __ungetc_nolock_ptr.asFunction<_dart__ungetc_nolock>();

  ffi.Pointer<ffi.Int32> __p__commode() {
    return ___p__commode();
  }

  late final ___p__commode_ptr =
      _lookup<ffi.NativeFunction<Native___p__commode>>('__p__commode');
  late final _dart___p__commode ___p__commode =
      ___p__commode_ptr.asFunction<_dart___p__commode>();

  int __stdio_common_vfprintf(
    int _Options,
    ffi.Pointer<ffi.Int32> _Stream,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vfprintf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintf_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vfprintf>>(
          '__stdio_common_vfprintf');
  late final _dart___stdio_common_vfprintf ___stdio_common_vfprintf =
      ___stdio_common_vfprintf_ptr.asFunction<_dart___stdio_common_vfprintf>();

  int __stdio_common_vfprintf_s(
    int _Options,
    ffi.Pointer<ffi.Int32> _Stream,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vfprintf_s(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintf_s_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vfprintf_s>>(
          '__stdio_common_vfprintf_s');
  late final _dart___stdio_common_vfprintf_s ___stdio_common_vfprintf_s =
      ___stdio_common_vfprintf_s_ptr
          .asFunction<_dart___stdio_common_vfprintf_s>();

  int __stdio_common_vfprintf_p(
    int _Options,
    ffi.Pointer<ffi.Int32> _Stream,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vfprintf_p(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintf_p_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vfprintf_p>>(
          '__stdio_common_vfprintf_p');
  late final _dart___stdio_common_vfprintf_p ___stdio_common_vfprintf_p =
      ___stdio_common_vfprintf_p_ptr
          .asFunction<_dart___stdio_common_vfprintf_p>();

  int _set_printf_count_output(
    int _Value,
  ) {
    return __set_printf_count_output(
      _Value,
    );
  }

  late final __set_printf_count_output_ptr =
      _lookup<ffi.NativeFunction<Native__set_printf_count_output>>(
          '_set_printf_count_output');
  late final _dart__set_printf_count_output __set_printf_count_output =
      __set_printf_count_output_ptr
          .asFunction<_dart__set_printf_count_output>();

  int _get_printf_count_output() {
    return __get_printf_count_output();
  }

  late final __get_printf_count_output_ptr =
      _lookup<ffi.NativeFunction<Native__get_printf_count_output>>(
          '_get_printf_count_output');
  late final _dart__get_printf_count_output __get_printf_count_output =
      __get_printf_count_output_ptr
          .asFunction<_dart__get_printf_count_output>();

  int __stdio_common_vfscanf(
    int _Options,
    ffi.Pointer<ffi.Int32> _Stream,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _Arglist,
  ) {
    return ___stdio_common_vfscanf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _Arglist,
    );
  }

  late final ___stdio_common_vfscanf_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vfscanf>>(
          '__stdio_common_vfscanf');
  late final _dart___stdio_common_vfscanf ___stdio_common_vfscanf =
      ___stdio_common_vfscanf_ptr.asFunction<_dart___stdio_common_vfscanf>();

  int __stdio_common_vsprintf(
    int _Options,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vsprintf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintf_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vsprintf>>(
          '__stdio_common_vsprintf');
  late final _dart___stdio_common_vsprintf ___stdio_common_vsprintf =
      ___stdio_common_vsprintf_ptr.asFunction<_dart___stdio_common_vsprintf>();

  int __stdio_common_vsprintf_s(
    int _Options,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vsprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintf_s_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vsprintf_s>>(
          '__stdio_common_vsprintf_s');
  late final _dart___stdio_common_vsprintf_s ___stdio_common_vsprintf_s =
      ___stdio_common_vsprintf_s_ptr
          .asFunction<_dart___stdio_common_vsprintf_s>();

  int __stdio_common_vsnprintf_s(
    int _Options,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vsnprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _MaxCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsnprintf_s_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vsnprintf_s>>(
          '__stdio_common_vsnprintf_s');
  late final _dart___stdio_common_vsnprintf_s ___stdio_common_vsnprintf_s =
      ___stdio_common_vsnprintf_s_ptr
          .asFunction<_dart___stdio_common_vsnprintf_s>();

  int __stdio_common_vsprintf_p(
    int _Options,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vsprintf_p(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintf_p_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vsprintf_p>>(
          '__stdio_common_vsprintf_p');
  late final _dart___stdio_common_vsprintf_p ___stdio_common_vsprintf_p =
      ___stdio_common_vsprintf_p_ptr
          .asFunction<_dart___stdio_common_vsprintf_p>();

  int __stdio_common_vsscanf(
    int _Options,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___stdio_common_vsscanf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsscanf_ptr =
      _lookup<ffi.NativeFunction<Native___stdio_common_vsscanf>>(
          '__stdio_common_vsscanf');
  late final _dart___stdio_common_vsscanf ___stdio_common_vsscanf =
      ___stdio_common_vsscanf_ptr.asFunction<_dart___stdio_common_vsscanf>();

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> _Directory,
    ffi.Pointer<ffi.Int8> _FilePrefix,
  ) {
    return _tempnam_1(
      _Directory,
      _FilePrefix,
    );
  }

  late final _tempnam_ptr =
      _lookup<ffi.NativeFunction<Native_tempnam>>('tempnam');
  late final _dart_tempnam _tempnam_1 =
      _tempnam_ptr.asFunction<_dart_tempnam>();

  int fcloseall() {
    return _fcloseall_1();
  }

  late final _fcloseall_ptr =
      _lookup<ffi.NativeFunction<Native_fcloseall>>('fcloseall');
  late final _dart_fcloseall _fcloseall_1 =
      _fcloseall_ptr.asFunction<_dart_fcloseall>();

  ffi.Pointer<ffi.Int32> fdopen(
    int _FileHandle,
    ffi.Pointer<ffi.Int8> _Format,
  ) {
    return _fdopen_1(
      _FileHandle,
      _Format,
    );
  }

  late final _fdopen_ptr = _lookup<ffi.NativeFunction<Native_fdopen>>('fdopen');
  late final _dart_fdopen _fdopen_1 = _fdopen_ptr.asFunction<_dart_fdopen>();

  int fgetchar() {
    return _fgetchar_1();
  }

  late final _fgetchar_ptr =
      _lookup<ffi.NativeFunction<Native_fgetchar>>('fgetchar');
  late final _dart_fgetchar _fgetchar_1 =
      _fgetchar_ptr.asFunction<_dart_fgetchar>();

  int fileno(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _fileno_1(
      _Stream,
    );
  }

  late final _fileno_ptr = _lookup<ffi.NativeFunction<Native_fileno>>('fileno');
  late final _dart_fileno _fileno_1 = _fileno_ptr.asFunction<_dart_fileno>();

  int flushall() {
    return _flushall_1();
  }

  late final _flushall_ptr =
      _lookup<ffi.NativeFunction<Native_flushall>>('flushall');
  late final _dart_flushall _flushall_1 =
      _flushall_ptr.asFunction<_dart_flushall>();

  int fputchar(
    int _Ch,
  ) {
    return _fputchar_1(
      _Ch,
    );
  }

  late final _fputchar_ptr =
      _lookup<ffi.NativeFunction<Native_fputchar>>('fputchar');
  late final _dart_fputchar _fputchar_1 =
      _fputchar_ptr.asFunction<_dart_fputchar>();

  int getw(
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _getw_1(
      _Stream,
    );
  }

  late final _getw_ptr = _lookup<ffi.NativeFunction<Native_getw>>('getw');
  late final _dart_getw _getw_1 = _getw_ptr.asFunction<_dart_getw>();

  int putw(
    int _Ch,
    ffi.Pointer<ffi.Int32> _Stream,
  ) {
    return _putw_1(
      _Ch,
      _Stream,
    );
  }

  late final _putw_ptr = _lookup<ffi.NativeFunction<Native_putw>>('putw');
  late final _dart_putw _putw_1 = _putw_ptr.asFunction<_dart_putw>();

  int rmtmp() {
    return _rmtmp_1();
  }

  late final _rmtmp_ptr = _lookup<ffi.NativeFunction<Native_rmtmp>>('rmtmp');
  late final _dart_rmtmp _rmtmp_1 = _rmtmp_ptr.asFunction<_dart_rmtmp>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> _Buf,
    int _Val,
    int _MaxCount,
  ) {
    return _memchr(
      _Buf,
      _Val,
      _MaxCount,
    );
  }

  late final _memchr_ptr = _lookup<ffi.NativeFunction<Native_memchr>>('memchr');
  late final _dart_memchr _memchr = _memchr_ptr.asFunction<_dart_memchr>();

  int memcmp(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return _memcmp(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  late final _memcmp_ptr = _lookup<ffi.NativeFunction<Native_memcmp>>('memcmp');
  late final _dart_memcmp _memcmp = _memcmp_ptr.asFunction<_dart_memcmp>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Size,
  ) {
    return _memcpy(
      _Dst,
      _Src,
      _Size,
    );
  }

  late final _memcpy_ptr = _lookup<ffi.NativeFunction<Native_memcpy>>('memcpy');
  late final _dart_memcpy _memcpy = _memcpy_ptr.asFunction<_dart_memcpy>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Size,
  ) {
    return _memmove(
      _Dst,
      _Src,
      _Size,
    );
  }

  late final _memmove_ptr =
      _lookup<ffi.NativeFunction<Native_memmove>>('memmove');
  late final _dart_memmove _memmove = _memmove_ptr.asFunction<_dart_memmove>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> _Dst,
    int _Val,
    int _Size,
  ) {
    return _memset(
      _Dst,
      _Val,
      _Size,
    );
  }

  late final _memset_ptr = _lookup<ffi.NativeFunction<Native_memset>>('memset');
  late final _dart_memset _memset = _memset_ptr.asFunction<_dart_memset>();

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> _Str,
    int _Val,
  ) {
    return _strchr(
      _Str,
      _Val,
    );
  }

  late final _strchr_ptr = _lookup<ffi.NativeFunction<Native_strchr>>('strchr');
  late final _dart_strchr _strchr = _strchr_ptr.asFunction<_dart_strchr>();

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> _Str,
    int _Ch,
  ) {
    return _strrchr(
      _Str,
      _Ch,
    );
  }

  late final _strrchr_ptr =
      _lookup<ffi.NativeFunction<Native_strrchr>>('strrchr');
  late final _dart_strrchr _strrchr = _strrchr_ptr.asFunction<_dart_strrchr>();

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _SubStr,
  ) {
    return _strstr(
      _Str,
      _SubStr,
    );
  }

  late final _strstr_ptr = _lookup<ffi.NativeFunction<Native_strstr>>('strstr');
  late final _dart_strstr _strstr = _strstr_ptr.asFunction<_dart_strstr>();

  ffi.Pointer<ffi.Uint16> wcschr(
    ffi.Pointer<ffi.Uint16> _Str,
    int _Ch,
  ) {
    return _wcschr(
      _Str,
      _Ch,
    );
  }

  late final _wcschr_ptr = _lookup<ffi.NativeFunction<Native_wcschr>>('wcschr');
  late final _dart_wcschr _wcschr = _wcschr_ptr.asFunction<_dart_wcschr>();

  ffi.Pointer<ffi.Uint16> wcsrchr(
    ffi.Pointer<ffi.Uint16> _Str,
    int _Ch,
  ) {
    return _wcsrchr(
      _Str,
      _Ch,
    );
  }

  late final _wcsrchr_ptr =
      _lookup<ffi.NativeFunction<Native_wcsrchr>>('wcsrchr');
  late final _dart_wcsrchr _wcsrchr = _wcsrchr_ptr.asFunction<_dart_wcsrchr>();

  ffi.Pointer<ffi.Uint16> wcsstr(
    ffi.Pointer<ffi.Uint16> _Str,
    ffi.Pointer<ffi.Uint16> _SubStr,
  ) {
    return _wcsstr(
      _Str,
      _SubStr,
    );
  }

  late final _wcsstr_ptr = _lookup<ffi.NativeFunction<Native_wcsstr>>('wcsstr');
  late final _dart_wcsstr _wcsstr = _wcsstr_ptr.asFunction<_dart_wcsstr>();

  int _memicmp(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return __memicmp(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  late final __memicmp_ptr =
      _lookup<ffi.NativeFunction<Native__memicmp>>('_memicmp');
  late final _dart__memicmp __memicmp =
      __memicmp_ptr.asFunction<_dart__memicmp>();

  int _memicmp_l(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __memicmp_l(
      _Buf1,
      _Buf2,
      _Size,
      _Locale,
    );
  }

  late final __memicmp_l_ptr =
      _lookup<ffi.NativeFunction<Native__memicmp_l>>('_memicmp_l');
  late final _dart__memicmp_l __memicmp_l =
      __memicmp_l_ptr.asFunction<_dart__memicmp_l>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Val,
    int _Size,
  ) {
    return _memccpy_1(
      _Dst,
      _Src,
      _Val,
      _Size,
    );
  }

  late final _memccpy_ptr =
      _lookup<ffi.NativeFunction<Native_memccpy>>('memccpy');
  late final _dart_memccpy _memccpy_1 =
      _memccpy_ptr.asFunction<_dart_memccpy>();

  int memicmp(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return _memicmp_1(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  late final _memicmp_ptr =
      _lookup<ffi.NativeFunction<Native_memicmp>>('memicmp');
  late final _dart_memicmp _memicmp_1 =
      _memicmp_ptr.asFunction<_dart_memicmp>();

  int wcscat_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Source,
  ) {
    return _wcscat_s(
      _Destination,
      _SizeInWords,
      _Source,
    );
  }

  late final _wcscat_s_ptr =
      _lookup<ffi.NativeFunction<Native_wcscat_s>>('wcscat_s');
  late final _dart_wcscat_s _wcscat_s =
      _wcscat_s_ptr.asFunction<_dart_wcscat_s>();

  int wcscpy_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Source,
  ) {
    return _wcscpy_s(
      _Destination,
      _SizeInWords,
      _Source,
    );
  }

  late final _wcscpy_s_ptr =
      _lookup<ffi.NativeFunction<Native_wcscpy_s>>('wcscpy_s');
  late final _dart_wcscpy_s _wcscpy_s =
      _wcscpy_s_ptr.asFunction<_dart_wcscpy_s>();

  int wcsncat_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
  ) {
    return _wcsncat_s(
      _Destination,
      _SizeInWords,
      _Source,
      _MaxCount,
    );
  }

  late final _wcsncat_s_ptr =
      _lookup<ffi.NativeFunction<Native_wcsncat_s>>('wcsncat_s');
  late final _dart_wcsncat_s _wcsncat_s =
      _wcsncat_s_ptr.asFunction<_dart_wcsncat_s>();

  int wcsncpy_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
  ) {
    return _wcsncpy_s(
      _Destination,
      _SizeInWords,
      _Source,
      _MaxCount,
    );
  }

  late final _wcsncpy_s_ptr =
      _lookup<ffi.NativeFunction<Native_wcsncpy_s>>('wcsncpy_s');
  late final _dart_wcsncpy_s _wcsncpy_s =
      _wcsncpy_s_ptr.asFunction<_dart_wcsncpy_s>();

  ffi.Pointer<ffi.Uint16> wcstok_s(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Delimiter,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
  ) {
    return _wcstok_s(
      _String,
      _Delimiter,
      _Context,
    );
  }

  late final _wcstok_s_ptr =
      _lookup<ffi.NativeFunction<Native_wcstok_s>>('wcstok_s');
  late final _dart_wcstok_s _wcstok_s =
      _wcstok_s_ptr.asFunction<_dart_wcstok_s>();

  ffi.Pointer<ffi.Uint16> _wcsdup(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return __wcsdup(
      _String,
    );
  }

  late final __wcsdup_ptr =
      _lookup<ffi.NativeFunction<Native__wcsdup>>('_wcsdup');
  late final _dart__wcsdup __wcsdup = __wcsdup_ptr.asFunction<_dart__wcsdup>();

  ffi.Pointer<ffi.Uint16> wcscat(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
  ) {
    return _wcscat(
      _Destination,
      _Source,
    );
  }

  late final _wcscat_ptr = _lookup<ffi.NativeFunction<Native_wcscat>>('wcscat');
  late final _dart_wcscat _wcscat = _wcscat_ptr.asFunction<_dart_wcscat>();

  int wcscmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return _wcscmp(
      _String1,
      _String2,
    );
  }

  late final _wcscmp_ptr = _lookup<ffi.NativeFunction<Native_wcscmp>>('wcscmp');
  late final _dart_wcscmp _wcscmp = _wcscmp_ptr.asFunction<_dart_wcscmp>();

  ffi.Pointer<ffi.Uint16> wcscpy(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
  ) {
    return _wcscpy(
      _Destination,
      _Source,
    );
  }

  late final _wcscpy_ptr = _lookup<ffi.NativeFunction<Native_wcscpy>>('wcscpy');
  late final _dart_wcscpy _wcscpy = _wcscpy_ptr.asFunction<_dart_wcscpy>();

  int wcscspn(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Control,
  ) {
    return _wcscspn(
      _String,
      _Control,
    );
  }

  late final _wcscspn_ptr =
      _lookup<ffi.NativeFunction<Native_wcscspn>>('wcscspn');
  late final _dart_wcscspn _wcscspn = _wcscspn_ptr.asFunction<_dart_wcscspn>();

  int wcslen(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return _wcslen(
      _String,
    );
  }

  late final _wcslen_ptr = _lookup<ffi.NativeFunction<Native_wcslen>>('wcslen');
  late final _dart_wcslen _wcslen = _wcslen_ptr.asFunction<_dart_wcslen>();

  int wcsnlen(
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
  ) {
    return _wcsnlen(
      _Source,
      _MaxCount,
    );
  }

  late final _wcsnlen_ptr =
      _lookup<ffi.NativeFunction<Native_wcsnlen>>('wcsnlen');
  late final _dart_wcsnlen _wcsnlen = _wcsnlen_ptr.asFunction<_dart_wcsnlen>();

  ffi.Pointer<ffi.Uint16> wcsncat(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
    int _Count,
  ) {
    return _wcsncat(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _wcsncat_ptr =
      _lookup<ffi.NativeFunction<Native_wcsncat>>('wcsncat');
  late final _dart_wcsncat _wcsncat = _wcsncat_ptr.asFunction<_dart_wcsncat>();

  int wcsncmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
  ) {
    return _wcsncmp(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _wcsncmp_ptr =
      _lookup<ffi.NativeFunction<Native_wcsncmp>>('wcsncmp');
  late final _dart_wcsncmp _wcsncmp = _wcsncmp_ptr.asFunction<_dart_wcsncmp>();

  ffi.Pointer<ffi.Uint16> wcsncpy(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
    int _Count,
  ) {
    return _wcsncpy(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _wcsncpy_ptr =
      _lookup<ffi.NativeFunction<Native_wcsncpy>>('wcsncpy');
  late final _dart_wcsncpy _wcsncpy = _wcsncpy_ptr.asFunction<_dart_wcsncpy>();

  ffi.Pointer<ffi.Uint16> wcspbrk(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Control,
  ) {
    return _wcspbrk(
      _String,
      _Control,
    );
  }

  late final _wcspbrk_ptr =
      _lookup<ffi.NativeFunction<Native_wcspbrk>>('wcspbrk');
  late final _dart_wcspbrk _wcspbrk = _wcspbrk_ptr.asFunction<_dart_wcspbrk>();

  int wcsspn(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Control,
  ) {
    return _wcsspn(
      _String,
      _Control,
    );
  }

  late final _wcsspn_ptr = _lookup<ffi.NativeFunction<Native_wcsspn>>('wcsspn');
  late final _dart_wcsspn _wcsspn = _wcsspn_ptr.asFunction<_dart_wcsspn>();

  ffi.Pointer<ffi.Uint16> wcstok(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Delimiter,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
  ) {
    return _wcstok(
      _String,
      _Delimiter,
      _Context,
    );
  }

  late final _wcstok_ptr = _lookup<ffi.NativeFunction<Native_wcstok>>('wcstok');
  late final _dart_wcstok _wcstok = _wcstok_ptr.asFunction<_dart_wcstok>();

  ffi.Pointer<ffi.Uint16> _wcserror(
    int _ErrorNumber,
  ) {
    return __wcserror_1(
      _ErrorNumber,
    );
  }

  late final __wcserror_ptr =
      _lookup<ffi.NativeFunction<Native__wcserror>>('_wcserror');
  late final _dart__wcserror __wcserror_1 =
      __wcserror_ptr.asFunction<_dart__wcserror>();

  int _wcserror_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    int _ErrorNumber,
  ) {
    return __wcserror_s_1(
      _Buffer,
      _SizeInWords,
      _ErrorNumber,
    );
  }

  late final __wcserror_s_ptr =
      _lookup<ffi.NativeFunction<Native__wcserror_s>>('_wcserror_s');
  late final _dart__wcserror_s __wcserror_s_1 =
      __wcserror_s_ptr.asFunction<_dart__wcserror_s>();

  ffi.Pointer<ffi.Uint16> __wcserror(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return ___wcserror(
      _String,
    );
  }

  late final ___wcserror_ptr =
      _lookup<ffi.NativeFunction<Native___wcserror>>('__wcserror');
  late final _dart___wcserror ___wcserror =
      ___wcserror_ptr.asFunction<_dart___wcserror>();

  int __wcserror_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _ErrorMessage,
  ) {
    return ___wcserror_s(
      _Buffer,
      _SizeInWords,
      _ErrorMessage,
    );
  }

  late final ___wcserror_s_ptr =
      _lookup<ffi.NativeFunction<Native___wcserror_s>>('__wcserror_s');
  late final _dart___wcserror_s ___wcserror_s =
      ___wcserror_s_ptr.asFunction<_dart___wcserror_s>();

  int _wcsicmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return __wcsicmp(
      _String1,
      _String2,
    );
  }

  late final __wcsicmp_ptr =
      _lookup<ffi.NativeFunction<Native__wcsicmp>>('_wcsicmp');
  late final _dart__wcsicmp __wcsicmp =
      __wcsicmp_ptr.asFunction<_dart__wcsicmp>();

  int _wcsicmp_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsicmp_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __wcsicmp_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcsicmp_l>>('_wcsicmp_l');
  late final _dart__wcsicmp_l __wcsicmp_l =
      __wcsicmp_l_ptr.asFunction<_dart__wcsicmp_l>();

  int _wcsnicmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
  ) {
    return __wcsnicmp(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __wcsnicmp_ptr =
      _lookup<ffi.NativeFunction<Native__wcsnicmp>>('_wcsnicmp');
  late final _dart__wcsnicmp __wcsnicmp =
      __wcsnicmp_ptr.asFunction<_dart__wcsnicmp>();

  int _wcsnicmp_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsnicmp_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsnicmp_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcsnicmp_l>>('_wcsnicmp_l');
  late final _dart__wcsnicmp_l __wcsnicmp_l =
      __wcsnicmp_l_ptr.asFunction<_dart__wcsnicmp_l>();

  int _wcsnset_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    int _Value,
    int _MaxCount,
  ) {
    return __wcsnset_s(
      _Destination,
      _SizeInWords,
      _Value,
      _MaxCount,
    );
  }

  late final __wcsnset_s_ptr =
      _lookup<ffi.NativeFunction<Native__wcsnset_s>>('_wcsnset_s');
  late final _dart__wcsnset_s __wcsnset_s =
      __wcsnset_s_ptr.asFunction<_dart__wcsnset_s>();

  ffi.Pointer<ffi.Uint16> _wcsnset(
    ffi.Pointer<ffi.Uint16> _String,
    int _Value,
    int _MaxCount,
  ) {
    return __wcsnset(
      _String,
      _Value,
      _MaxCount,
    );
  }

  late final __wcsnset_ptr =
      _lookup<ffi.NativeFunction<Native__wcsnset>>('_wcsnset');
  late final _dart__wcsnset __wcsnset =
      __wcsnset_ptr.asFunction<_dart__wcsnset>();

  ffi.Pointer<ffi.Uint16> _wcsrev(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return __wcsrev(
      _String,
    );
  }

  late final __wcsrev_ptr =
      _lookup<ffi.NativeFunction<Native__wcsrev>>('_wcsrev');
  late final _dart__wcsrev __wcsrev = __wcsrev_ptr.asFunction<_dart__wcsrev>();

  int _wcsset_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    int _Value,
  ) {
    return __wcsset_s(
      _Destination,
      _SizeInWords,
      _Value,
    );
  }

  late final __wcsset_s_ptr =
      _lookup<ffi.NativeFunction<Native__wcsset_s>>('_wcsset_s');
  late final _dart__wcsset_s __wcsset_s =
      __wcsset_s_ptr.asFunction<_dart__wcsset_s>();

  ffi.Pointer<ffi.Uint16> _wcsset(
    ffi.Pointer<ffi.Uint16> _String,
    int _Value,
  ) {
    return __wcsset(
      _String,
      _Value,
    );
  }

  late final __wcsset_ptr =
      _lookup<ffi.NativeFunction<Native__wcsset>>('_wcsset');
  late final _dart__wcsset __wcsset = __wcsset_ptr.asFunction<_dart__wcsset>();

  int _wcslwr_s(
    ffi.Pointer<ffi.Uint16> _String,
    int _SizeInWords,
  ) {
    return __wcslwr_s(
      _String,
      _SizeInWords,
    );
  }

  late final __wcslwr_s_ptr =
      _lookup<ffi.NativeFunction<Native__wcslwr_s>>('_wcslwr_s');
  late final _dart__wcslwr_s __wcslwr_s =
      __wcslwr_s_ptr.asFunction<_dart__wcslwr_s>();

  ffi.Pointer<ffi.Uint16> _wcslwr(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return __wcslwr(
      _String,
    );
  }

  late final __wcslwr_ptr =
      _lookup<ffi.NativeFunction<Native__wcslwr>>('_wcslwr');
  late final _dart__wcslwr __wcslwr = __wcslwr_ptr.asFunction<_dart__wcslwr>();

  int _wcslwr_s_l(
    ffi.Pointer<ffi.Uint16> _String,
    int _SizeInWords,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcslwr_s_l(
      _String,
      _SizeInWords,
      _Locale,
    );
  }

  late final __wcslwr_s_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcslwr_s_l>>('_wcslwr_s_l');
  late final _dart__wcslwr_s_l __wcslwr_s_l =
      __wcslwr_s_l_ptr.asFunction<_dart__wcslwr_s_l>();

  ffi.Pointer<ffi.Uint16> _wcslwr_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcslwr_l(
      _String,
      _Locale,
    );
  }

  late final __wcslwr_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcslwr_l>>('_wcslwr_l');
  late final _dart__wcslwr_l __wcslwr_l =
      __wcslwr_l_ptr.asFunction<_dart__wcslwr_l>();

  int _wcsupr_s(
    ffi.Pointer<ffi.Uint16> _String,
    int _Size,
  ) {
    return __wcsupr_s(
      _String,
      _Size,
    );
  }

  late final __wcsupr_s_ptr =
      _lookup<ffi.NativeFunction<Native__wcsupr_s>>('_wcsupr_s');
  late final _dart__wcsupr_s __wcsupr_s =
      __wcsupr_s_ptr.asFunction<_dart__wcsupr_s>();

  ffi.Pointer<ffi.Uint16> _wcsupr(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return __wcsupr(
      _String,
    );
  }

  late final __wcsupr_ptr =
      _lookup<ffi.NativeFunction<Native__wcsupr>>('_wcsupr');
  late final _dart__wcsupr __wcsupr = __wcsupr_ptr.asFunction<_dart__wcsupr>();

  int _wcsupr_s_l(
    ffi.Pointer<ffi.Uint16> _String,
    int _Size,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsupr_s_l(
      _String,
      _Size,
      _Locale,
    );
  }

  late final __wcsupr_s_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcsupr_s_l>>('_wcsupr_s_l');
  late final _dart__wcsupr_s_l __wcsupr_s_l =
      __wcsupr_s_l_ptr.asFunction<_dart__wcsupr_s_l>();

  ffi.Pointer<ffi.Uint16> _wcsupr_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsupr_l(
      _String,
      _Locale,
    );
  }

  late final __wcsupr_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcsupr_l>>('_wcsupr_l');
  late final _dart__wcsupr_l __wcsupr_l =
      __wcsupr_l_ptr.asFunction<_dart__wcsupr_l>();

  int wcsxfrm(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
  ) {
    return _wcsxfrm(
      _Destination,
      _Source,
      _MaxCount,
    );
  }

  late final _wcsxfrm_ptr =
      _lookup<ffi.NativeFunction<Native_wcsxfrm>>('wcsxfrm');
  late final _dart_wcsxfrm _wcsxfrm = _wcsxfrm_ptr.asFunction<_dart_wcsxfrm>();

  int _wcsxfrm_l(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsxfrm_l(
      _Destination,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsxfrm_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcsxfrm_l>>('_wcsxfrm_l');
  late final _dart__wcsxfrm_l __wcsxfrm_l =
      __wcsxfrm_l_ptr.asFunction<_dart__wcsxfrm_l>();

  int wcscoll(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return _wcscoll(
      _String1,
      _String2,
    );
  }

  late final _wcscoll_ptr =
      _lookup<ffi.NativeFunction<Native_wcscoll>>('wcscoll');
  late final _dart_wcscoll _wcscoll = _wcscoll_ptr.asFunction<_dart_wcscoll>();

  int _wcscoll_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcscoll_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __wcscoll_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcscoll_l>>('_wcscoll_l');
  late final _dart__wcscoll_l __wcscoll_l =
      __wcscoll_l_ptr.asFunction<_dart__wcscoll_l>();

  int _wcsicoll(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return __wcsicoll(
      _String1,
      _String2,
    );
  }

  late final __wcsicoll_ptr =
      _lookup<ffi.NativeFunction<Native__wcsicoll>>('_wcsicoll');
  late final _dart__wcsicoll __wcsicoll =
      __wcsicoll_ptr.asFunction<_dart__wcsicoll>();

  int _wcsicoll_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsicoll_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __wcsicoll_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcsicoll_l>>('_wcsicoll_l');
  late final _dart__wcsicoll_l __wcsicoll_l =
      __wcsicoll_l_ptr.asFunction<_dart__wcsicoll_l>();

  int _wcsncoll(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
  ) {
    return __wcsncoll(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __wcsncoll_ptr =
      _lookup<ffi.NativeFunction<Native__wcsncoll>>('_wcsncoll');
  late final _dart__wcsncoll __wcsncoll =
      __wcsncoll_ptr.asFunction<_dart__wcsncoll>();

  int _wcsncoll_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsncoll_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsncoll_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcsncoll_l>>('_wcsncoll_l');
  late final _dart__wcsncoll_l __wcsncoll_l =
      __wcsncoll_l_ptr.asFunction<_dart__wcsncoll_l>();

  int _wcsnicoll(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
  ) {
    return __wcsnicoll(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __wcsnicoll_ptr =
      _lookup<ffi.NativeFunction<Native__wcsnicoll>>('_wcsnicoll');
  late final _dart__wcsnicoll __wcsnicoll =
      __wcsnicoll_ptr.asFunction<_dart__wcsnicoll>();

  int _wcsnicoll_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsnicoll_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsnicoll_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcsnicoll_l>>('_wcsnicoll_l');
  late final _dart__wcsnicoll_l __wcsnicoll_l =
      __wcsnicoll_l_ptr.asFunction<_dart__wcsnicoll_l>();

  ffi.Pointer<ffi.Uint16> wcsdup(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return _wcsdup_1(
      _String,
    );
  }

  late final _wcsdup_ptr = _lookup<ffi.NativeFunction<Native_wcsdup>>('wcsdup');
  late final _dart_wcsdup _wcsdup_1 = _wcsdup_ptr.asFunction<_dart_wcsdup>();

  int wcsicmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return _wcsicmp_1(
      _String1,
      _String2,
    );
  }

  late final _wcsicmp_ptr =
      _lookup<ffi.NativeFunction<Native_wcsicmp>>('wcsicmp');
  late final _dart_wcsicmp _wcsicmp_1 =
      _wcsicmp_ptr.asFunction<_dart_wcsicmp>();

  int wcsnicmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
  ) {
    return _wcsnicmp_1(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _wcsnicmp_ptr =
      _lookup<ffi.NativeFunction<Native_wcsnicmp>>('wcsnicmp');
  late final _dart_wcsnicmp _wcsnicmp_1 =
      _wcsnicmp_ptr.asFunction<_dart_wcsnicmp>();

  ffi.Pointer<ffi.Uint16> wcsnset(
    ffi.Pointer<ffi.Uint16> _String,
    int _Value,
    int _MaxCount,
  ) {
    return _wcsnset_1(
      _String,
      _Value,
      _MaxCount,
    );
  }

  late final _wcsnset_ptr =
      _lookup<ffi.NativeFunction<Native_wcsnset>>('wcsnset');
  late final _dart_wcsnset _wcsnset_1 =
      _wcsnset_ptr.asFunction<_dart_wcsnset>();

  ffi.Pointer<ffi.Uint16> wcsrev(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return _wcsrev_1(
      _String,
    );
  }

  late final _wcsrev_ptr = _lookup<ffi.NativeFunction<Native_wcsrev>>('wcsrev');
  late final _dart_wcsrev _wcsrev_1 = _wcsrev_ptr.asFunction<_dart_wcsrev>();

  ffi.Pointer<ffi.Uint16> wcsset(
    ffi.Pointer<ffi.Uint16> _String,
    int _Value,
  ) {
    return _wcsset_1(
      _String,
      _Value,
    );
  }

  late final _wcsset_ptr = _lookup<ffi.NativeFunction<Native_wcsset>>('wcsset');
  late final _dart_wcsset _wcsset_1 = _wcsset_ptr.asFunction<_dart_wcsset>();

  ffi.Pointer<ffi.Uint16> wcslwr(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return _wcslwr_1(
      _String,
    );
  }

  late final _wcslwr_ptr = _lookup<ffi.NativeFunction<Native_wcslwr>>('wcslwr');
  late final _dart_wcslwr _wcslwr_1 = _wcslwr_ptr.asFunction<_dart_wcslwr>();

  ffi.Pointer<ffi.Uint16> wcsupr(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return _wcsupr_1(
      _String,
    );
  }

  late final _wcsupr_ptr = _lookup<ffi.NativeFunction<Native_wcsupr>>('wcsupr');
  late final _dart_wcsupr _wcsupr_1 = _wcsupr_ptr.asFunction<_dart_wcsupr>();

  int wcsicoll(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return _wcsicoll_1(
      _String1,
      _String2,
    );
  }

  late final _wcsicoll_ptr =
      _lookup<ffi.NativeFunction<Native_wcsicoll>>('wcsicoll');
  late final _dart_wcsicoll _wcsicoll_1 =
      _wcsicoll_ptr.asFunction<_dart_wcsicoll>();

  int strcpy_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return _strcpy_s(
      _Destination,
      _SizeInBytes,
      _Source,
    );
  }

  late final _strcpy_s_ptr =
      _lookup<ffi.NativeFunction<Native_strcpy_s>>('strcpy_s');
  late final _dart_strcpy_s _strcpy_s =
      _strcpy_s_ptr.asFunction<_dart_strcpy_s>();

  int strcat_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return _strcat_s(
      _Destination,
      _SizeInBytes,
      _Source,
    );
  }

  late final _strcat_s_ptr =
      _lookup<ffi.NativeFunction<Native_strcat_s>>('strcat_s');
  late final _dart_strcat_s _strcat_s =
      _strcat_s_ptr.asFunction<_dart_strcat_s>();

  int strerror_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    int _ErrorNumber,
  ) {
    return _strerror_s_1(
      _Buffer,
      _SizeInBytes,
      _ErrorNumber,
    );
  }

  late final _strerror_s_ptr =
      _lookup<ffi.NativeFunction<Native_strerror_s>>('strerror_s');
  late final _dart_strerror_s _strerror_s_1 =
      _strerror_s_ptr.asFunction<_dart_strerror_s>();

  int strncat_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
  ) {
    return _strncat_s(
      _Destination,
      _SizeInBytes,
      _Source,
      _MaxCount,
    );
  }

  late final _strncat_s_ptr =
      _lookup<ffi.NativeFunction<Native_strncat_s>>('strncat_s');
  late final _dart_strncat_s _strncat_s =
      _strncat_s_ptr.asFunction<_dart_strncat_s>();

  int strncpy_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
  ) {
    return _strncpy_s(
      _Destination,
      _SizeInBytes,
      _Source,
      _MaxCount,
    );
  }

  late final _strncpy_s_ptr =
      _lookup<ffi.NativeFunction<Native_strncpy_s>>('strncpy_s');
  late final _dart_strncpy_s _strncpy_s =
      _strncpy_s_ptr.asFunction<_dart_strncpy_s>();

  ffi.Pointer<ffi.Int8> strtok_s(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Int8> _Delimiter,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Context,
  ) {
    return _strtok_s(
      _String,
      _Delimiter,
      _Context,
    );
  }

  late final _strtok_s_ptr =
      _lookup<ffi.NativeFunction<Native_strtok_s>>('strtok_s');
  late final _dart_strtok_s _strtok_s =
      _strtok_s_ptr.asFunction<_dart_strtok_s>();

  ffi.Pointer<ffi.Void> _memccpy(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Val,
    int _MaxCount,
  ) {
    return __memccpy(
      _Dst,
      _Src,
      _Val,
      _MaxCount,
    );
  }

  late final __memccpy_ptr =
      _lookup<ffi.NativeFunction<Native__memccpy>>('_memccpy');
  late final _dart__memccpy __memccpy =
      __memccpy_ptr.asFunction<_dart__memccpy>();

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return _strcat(
      _Destination,
      _Source,
    );
  }

  late final _strcat_ptr = _lookup<ffi.NativeFunction<Native_strcat>>('strcat');
  late final _dart_strcat _strcat = _strcat_ptr.asFunction<_dart_strcat>();

  int strcmp(
    ffi.Pointer<ffi.Int8> _Str1,
    ffi.Pointer<ffi.Int8> _Str2,
  ) {
    return _strcmp(
      _Str1,
      _Str2,
    );
  }

  late final _strcmp_ptr = _lookup<ffi.NativeFunction<Native_strcmp>>('strcmp');
  late final _dart_strcmp _strcmp = _strcmp_ptr.asFunction<_dart_strcmp>();

  int _strcmpi(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return __strcmpi(
      _String1,
      _String2,
    );
  }

  late final __strcmpi_ptr =
      _lookup<ffi.NativeFunction<Native__strcmpi>>('_strcmpi');
  late final _dart__strcmpi __strcmpi =
      __strcmpi_ptr.asFunction<_dart__strcmpi>();

  int strcoll(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return _strcoll(
      _String1,
      _String2,
    );
  }

  late final _strcoll_ptr =
      _lookup<ffi.NativeFunction<Native_strcoll>>('strcoll');
  late final _dart_strcoll _strcoll = _strcoll_ptr.asFunction<_dart_strcoll>();

  int _strcoll_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strcoll_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __strcoll_l_ptr =
      _lookup<ffi.NativeFunction<Native__strcoll_l>>('_strcoll_l');
  late final _dart__strcoll_l __strcoll_l =
      __strcoll_l_ptr.asFunction<_dart__strcoll_l>();

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return _strcpy(
      _Destination,
      _Source,
    );
  }

  late final _strcpy_ptr = _lookup<ffi.NativeFunction<Native_strcpy>>('strcpy');
  late final _dart_strcpy _strcpy = _strcpy_ptr.asFunction<_dart_strcpy>();

  int strcspn(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _Control,
  ) {
    return _strcspn(
      _Str,
      _Control,
    );
  }

  late final _strcspn_ptr =
      _lookup<ffi.NativeFunction<Native_strcspn>>('strcspn');
  late final _dart_strcspn _strcspn = _strcspn_ptr.asFunction<_dart_strcspn>();

  ffi.Pointer<ffi.Int8> _strdup(
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return __strdup(
      _Source,
    );
  }

  late final __strdup_ptr =
      _lookup<ffi.NativeFunction<Native__strdup>>('_strdup');
  late final _dart__strdup __strdup = __strdup_ptr.asFunction<_dart__strdup>();

  ffi.Pointer<ffi.Int8> _strerror(
    ffi.Pointer<ffi.Int8> _ErrorMessage,
  ) {
    return __strerror(
      _ErrorMessage,
    );
  }

  late final __strerror_ptr =
      _lookup<ffi.NativeFunction<Native__strerror>>('_strerror');
  late final _dart__strerror __strerror =
      __strerror_ptr.asFunction<_dart__strerror>();

  int _strerror_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _ErrorMessage,
  ) {
    return __strerror_s(
      _Buffer,
      _SizeInBytes,
      _ErrorMessage,
    );
  }

  late final __strerror_s_ptr =
      _lookup<ffi.NativeFunction<Native__strerror_s>>('_strerror_s');
  late final _dart__strerror_s __strerror_s =
      __strerror_s_ptr.asFunction<_dart__strerror_s>();

  ffi.Pointer<ffi.Int8> strerror(
    int _ErrorMessage,
  ) {
    return _strerror_1(
      _ErrorMessage,
    );
  }

  late final _strerror_ptr =
      _lookup<ffi.NativeFunction<Native_strerror>>('strerror');
  late final _dart_strerror _strerror_1 =
      _strerror_ptr.asFunction<_dart_strerror>();

  int _stricmp(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return __stricmp(
      _String1,
      _String2,
    );
  }

  late final __stricmp_ptr =
      _lookup<ffi.NativeFunction<Native__stricmp>>('_stricmp');
  late final _dart__stricmp __stricmp =
      __stricmp_ptr.asFunction<_dart__stricmp>();

  int _stricoll(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return __stricoll(
      _String1,
      _String2,
    );
  }

  late final __stricoll_ptr =
      _lookup<ffi.NativeFunction<Native__stricoll>>('_stricoll');
  late final _dart__stricoll __stricoll =
      __stricoll_ptr.asFunction<_dart__stricoll>();

  int _stricoll_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __stricoll_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __stricoll_l_ptr =
      _lookup<ffi.NativeFunction<Native__stricoll_l>>('_stricoll_l');
  late final _dart__stricoll_l __stricoll_l =
      __stricoll_l_ptr.asFunction<_dart__stricoll_l>();

  int _stricmp_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __stricmp_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __stricmp_l_ptr =
      _lookup<ffi.NativeFunction<Native__stricmp_l>>('_stricmp_l');
  late final _dart__stricmp_l __stricmp_l =
      __stricmp_l_ptr.asFunction<_dart__stricmp_l>();

  int strlen(
    ffi.Pointer<ffi.Int8> _Str,
  ) {
    return _strlen(
      _Str,
    );
  }

  late final _strlen_ptr = _lookup<ffi.NativeFunction<Native_strlen>>('strlen');
  late final _dart_strlen _strlen = _strlen_ptr.asFunction<_dart_strlen>();

  int _strlwr_s(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
  ) {
    return __strlwr_s(
      _String,
      _Size,
    );
  }

  late final __strlwr_s_ptr =
      _lookup<ffi.NativeFunction<Native__strlwr_s>>('_strlwr_s');
  late final _dart__strlwr_s __strlwr_s =
      __strlwr_s_ptr.asFunction<_dart__strlwr_s>();

  ffi.Pointer<ffi.Int8> _strlwr(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return __strlwr(
      _String,
    );
  }

  late final __strlwr_ptr =
      _lookup<ffi.NativeFunction<Native__strlwr>>('_strlwr');
  late final _dart__strlwr __strlwr = __strlwr_ptr.asFunction<_dart__strlwr>();

  int _strlwr_s_l(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strlwr_s_l(
      _String,
      _Size,
      _Locale,
    );
  }

  late final __strlwr_s_l_ptr =
      _lookup<ffi.NativeFunction<Native__strlwr_s_l>>('_strlwr_s_l');
  late final _dart__strlwr_s_l __strlwr_s_l =
      __strlwr_s_l_ptr.asFunction<_dart__strlwr_s_l>();

  ffi.Pointer<ffi.Int8> _strlwr_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strlwr_l(
      _String,
      _Locale,
    );
  }

  late final __strlwr_l_ptr =
      _lookup<ffi.NativeFunction<Native__strlwr_l>>('_strlwr_l');
  late final _dart__strlwr_l __strlwr_l =
      __strlwr_l_ptr.asFunction<_dart__strlwr_l>();

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _Count,
  ) {
    return _strncat(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _strncat_ptr =
      _lookup<ffi.NativeFunction<Native_strncat>>('strncat');
  late final _dart_strncat _strncat = _strncat_ptr.asFunction<_dart_strncat>();

  int strncmp(
    ffi.Pointer<ffi.Int8> _Str1,
    ffi.Pointer<ffi.Int8> _Str2,
    int _MaxCount,
  ) {
    return _strncmp(
      _Str1,
      _Str2,
      _MaxCount,
    );
  }

  late final _strncmp_ptr =
      _lookup<ffi.NativeFunction<Native_strncmp>>('strncmp');
  late final _dart_strncmp _strncmp = _strncmp_ptr.asFunction<_dart_strncmp>();

  int _strnicmp(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return __strnicmp(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __strnicmp_ptr =
      _lookup<ffi.NativeFunction<Native__strnicmp>>('_strnicmp');
  late final _dart__strnicmp __strnicmp =
      __strnicmp_ptr.asFunction<_dart__strnicmp>();

  int _strnicmp_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strnicmp_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __strnicmp_l_ptr =
      _lookup<ffi.NativeFunction<Native__strnicmp_l>>('_strnicmp_l');
  late final _dart__strnicmp_l __strnicmp_l =
      __strnicmp_l_ptr.asFunction<_dart__strnicmp_l>();

  int _strnicoll(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return __strnicoll(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __strnicoll_ptr =
      _lookup<ffi.NativeFunction<Native__strnicoll>>('_strnicoll');
  late final _dart__strnicoll __strnicoll =
      __strnicoll_ptr.asFunction<_dart__strnicoll>();

  int _strnicoll_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strnicoll_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __strnicoll_l_ptr =
      _lookup<ffi.NativeFunction<Native__strnicoll_l>>('_strnicoll_l');
  late final _dart__strnicoll_l __strnicoll_l =
      __strnicoll_l_ptr.asFunction<_dart__strnicoll_l>();

  int _strncoll(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return __strncoll(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __strncoll_ptr =
      _lookup<ffi.NativeFunction<Native__strncoll>>('_strncoll');
  late final _dart__strncoll __strncoll =
      __strncoll_ptr.asFunction<_dart__strncoll>();

  int _strncoll_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strncoll_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __strncoll_l_ptr =
      _lookup<ffi.NativeFunction<Native__strncoll_l>>('_strncoll_l');
  late final _dart__strncoll_l __strncoll_l =
      __strncoll_l_ptr.asFunction<_dart__strncoll_l>();

  int __strncnt(
    ffi.Pointer<ffi.Int8> _String,
    int _Count,
  ) {
    return ___strncnt(
      _String,
      _Count,
    );
  }

  late final ___strncnt_ptr =
      _lookup<ffi.NativeFunction<Native___strncnt>>('__strncnt');
  late final _dart___strncnt ___strncnt =
      ___strncnt_ptr.asFunction<_dart___strncnt>();

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _Count,
  ) {
    return _strncpy(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _strncpy_ptr =
      _lookup<ffi.NativeFunction<Native_strncpy>>('strncpy');
  late final _dart_strncpy _strncpy = _strncpy_ptr.asFunction<_dart_strncpy>();

  int strnlen(
    ffi.Pointer<ffi.Int8> _String,
    int _MaxCount,
  ) {
    return _strnlen(
      _String,
      _MaxCount,
    );
  }

  late final _strnlen_ptr =
      _lookup<ffi.NativeFunction<Native_strnlen>>('strnlen');
  late final _dart_strnlen _strnlen = _strnlen_ptr.asFunction<_dart_strnlen>();

  int _strnset_s(
    ffi.Pointer<ffi.Int8> _String,
    int _SizeInBytes,
    int _Value,
    int _MaxCount,
  ) {
    return __strnset_s(
      _String,
      _SizeInBytes,
      _Value,
      _MaxCount,
    );
  }

  late final __strnset_s_ptr =
      _lookup<ffi.NativeFunction<Native__strnset_s>>('_strnset_s');
  late final _dart__strnset_s __strnset_s =
      __strnset_s_ptr.asFunction<_dart__strnset_s>();

  ffi.Pointer<ffi.Int8> _strnset(
    ffi.Pointer<ffi.Int8> _Destination,
    int _Value,
    int _Count,
  ) {
    return __strnset(
      _Destination,
      _Value,
      _Count,
    );
  }

  late final __strnset_ptr =
      _lookup<ffi.NativeFunction<Native__strnset>>('_strnset');
  late final _dart__strnset __strnset =
      __strnset_ptr.asFunction<_dart__strnset>();

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _Control,
  ) {
    return _strpbrk(
      _Str,
      _Control,
    );
  }

  late final _strpbrk_ptr =
      _lookup<ffi.NativeFunction<Native_strpbrk>>('strpbrk');
  late final _dart_strpbrk _strpbrk = _strpbrk_ptr.asFunction<_dart_strpbrk>();

  ffi.Pointer<ffi.Int8> _strrev(
    ffi.Pointer<ffi.Int8> _Str,
  ) {
    return __strrev(
      _Str,
    );
  }

  late final __strrev_ptr =
      _lookup<ffi.NativeFunction<Native__strrev>>('_strrev');
  late final _dart__strrev __strrev = __strrev_ptr.asFunction<_dart__strrev>();

  int _strset_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _DestinationSize,
    int _Value,
  ) {
    return __strset_s(
      _Destination,
      _DestinationSize,
      _Value,
    );
  }

  late final __strset_s_ptr =
      _lookup<ffi.NativeFunction<Native__strset_s>>('_strset_s');
  late final _dart__strset_s __strset_s =
      __strset_s_ptr.asFunction<_dart__strset_s>();

  ffi.Pointer<ffi.Int8> _strset(
    ffi.Pointer<ffi.Int8> _Destination,
    int _Value,
  ) {
    return __strset(
      _Destination,
      _Value,
    );
  }

  late final __strset_ptr =
      _lookup<ffi.NativeFunction<Native__strset>>('_strset');
  late final _dart__strset __strset = __strset_ptr.asFunction<_dart__strset>();

  int strspn(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _Control,
  ) {
    return _strspn(
      _Str,
      _Control,
    );
  }

  late final _strspn_ptr = _lookup<ffi.NativeFunction<Native_strspn>>('strspn');
  late final _dart_strspn _strspn = _strspn_ptr.asFunction<_dart_strspn>();

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Int8> _Delimiter,
  ) {
    return _strtok(
      _String,
      _Delimiter,
    );
  }

  late final _strtok_ptr = _lookup<ffi.NativeFunction<Native_strtok>>('strtok');
  late final _dart_strtok _strtok = _strtok_ptr.asFunction<_dart_strtok>();

  int _strupr_s(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
  ) {
    return __strupr_s(
      _String,
      _Size,
    );
  }

  late final __strupr_s_ptr =
      _lookup<ffi.NativeFunction<Native__strupr_s>>('_strupr_s');
  late final _dart__strupr_s __strupr_s =
      __strupr_s_ptr.asFunction<_dart__strupr_s>();

  ffi.Pointer<ffi.Int8> _strupr(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return __strupr(
      _String,
    );
  }

  late final __strupr_ptr =
      _lookup<ffi.NativeFunction<Native__strupr>>('_strupr');
  late final _dart__strupr __strupr = __strupr_ptr.asFunction<_dart__strupr>();

  int _strupr_s_l(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strupr_s_l(
      _String,
      _Size,
      _Locale,
    );
  }

  late final __strupr_s_l_ptr =
      _lookup<ffi.NativeFunction<Native__strupr_s_l>>('_strupr_s_l');
  late final _dart__strupr_s_l __strupr_s_l =
      __strupr_s_l_ptr.asFunction<_dart__strupr_s_l>();

  ffi.Pointer<ffi.Int8> _strupr_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strupr_l(
      _String,
      _Locale,
    );
  }

  late final __strupr_l_ptr =
      _lookup<ffi.NativeFunction<Native__strupr_l>>('_strupr_l');
  late final _dart__strupr_l __strupr_l =
      __strupr_l_ptr.asFunction<_dart__strupr_l>();

  int strxfrm(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
  ) {
    return _strxfrm(
      _Destination,
      _Source,
      _MaxCount,
    );
  }

  late final _strxfrm_ptr =
      _lookup<ffi.NativeFunction<Native_strxfrm>>('strxfrm');
  late final _dart_strxfrm _strxfrm = _strxfrm_ptr.asFunction<_dart_strxfrm>();

  int _strxfrm_l(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strxfrm_l(
      _Destination,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __strxfrm_l_ptr =
      _lookup<ffi.NativeFunction<Native__strxfrm_l>>('_strxfrm_l');
  late final _dart__strxfrm_l __strxfrm_l =
      __strxfrm_l_ptr.asFunction<_dart__strxfrm_l>();

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _strdup_1(
      _String,
    );
  }

  late final _strdup_ptr = _lookup<ffi.NativeFunction<Native_strdup>>('strdup');
  late final _dart_strdup _strdup_1 = _strdup_ptr.asFunction<_dart_strdup>();

  int strcmpi(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return _strcmpi_1(
      _String1,
      _String2,
    );
  }

  late final _strcmpi_ptr =
      _lookup<ffi.NativeFunction<Native_strcmpi>>('strcmpi');
  late final _dart_strcmpi _strcmpi_1 =
      _strcmpi_ptr.asFunction<_dart_strcmpi>();

  int stricmp(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return _stricmp_1(
      _String1,
      _String2,
    );
  }

  late final _stricmp_ptr =
      _lookup<ffi.NativeFunction<Native_stricmp>>('stricmp');
  late final _dart_stricmp _stricmp_1 =
      _stricmp_ptr.asFunction<_dart_stricmp>();

  ffi.Pointer<ffi.Int8> strlwr(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _strlwr_1(
      _String,
    );
  }

  late final _strlwr_ptr = _lookup<ffi.NativeFunction<Native_strlwr>>('strlwr');
  late final _dart_strlwr _strlwr_1 = _strlwr_ptr.asFunction<_dart_strlwr>();

  int strnicmp(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return _strnicmp_1(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _strnicmp_ptr =
      _lookup<ffi.NativeFunction<Native_strnicmp>>('strnicmp');
  late final _dart_strnicmp _strnicmp_1 =
      _strnicmp_ptr.asFunction<_dart_strnicmp>();

  ffi.Pointer<ffi.Int8> strnset(
    ffi.Pointer<ffi.Int8> _String,
    int _Value,
    int _MaxCount,
  ) {
    return _strnset_1(
      _String,
      _Value,
      _MaxCount,
    );
  }

  late final _strnset_ptr =
      _lookup<ffi.NativeFunction<Native_strnset>>('strnset');
  late final _dart_strnset _strnset_1 =
      _strnset_ptr.asFunction<_dart_strnset>();

  ffi.Pointer<ffi.Int8> strrev(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _strrev_1(
      _String,
    );
  }

  late final _strrev_ptr = _lookup<ffi.NativeFunction<Native_strrev>>('strrev');
  late final _dart_strrev _strrev_1 = _strrev_ptr.asFunction<_dart_strrev>();

  ffi.Pointer<ffi.Int8> strset(
    ffi.Pointer<ffi.Int8> _String,
    int _Value,
  ) {
    return _strset_1(
      _String,
      _Value,
    );
  }

  late final _strset_ptr = _lookup<ffi.NativeFunction<Native_strset>>('strset');
  late final _dart_strset _strset_1 = _strset_ptr.asFunction<_dart_strset>();

  ffi.Pointer<ffi.Int8> strupr(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _strupr_1(
      _String,
    );
  }

  late final _strupr_ptr = _lookup<ffi.NativeFunction<Native_strupr>>('strupr');
  late final _dart_strupr _strupr_1 = _strupr_ptr.asFunction<_dart_strupr>();

  int _cputws(
    ffi.Pointer<ffi.Uint16> _Buffer,
  ) {
    return __cputws(
      _Buffer,
    );
  }

  late final __cputws_ptr =
      _lookup<ffi.NativeFunction<Native__cputws>>('_cputws');
  late final _dart__cputws __cputws = __cputws_ptr.asFunction<_dart__cputws>();

  int _getwch() {
    return __getwch();
  }

  late final __getwch_ptr =
      _lookup<ffi.NativeFunction<Native__getwch>>('_getwch');
  late final _dart__getwch __getwch = __getwch_ptr.asFunction<_dart__getwch>();

  int _getwche() {
    return __getwche();
  }

  late final __getwche_ptr =
      _lookup<ffi.NativeFunction<Native__getwche>>('_getwche');
  late final _dart__getwche __getwche =
      __getwche_ptr.asFunction<_dart__getwche>();

  int _putwch(
    int _Character,
  ) {
    return __putwch(
      _Character,
    );
  }

  late final __putwch_ptr =
      _lookup<ffi.NativeFunction<Native__putwch>>('_putwch');
  late final _dart__putwch __putwch = __putwch_ptr.asFunction<_dart__putwch>();

  int _ungetwch(
    int _Character,
  ) {
    return __ungetwch(
      _Character,
    );
  }

  late final __ungetwch_ptr =
      _lookup<ffi.NativeFunction<Native__ungetwch>>('_ungetwch');
  late final _dart__ungetwch __ungetwch =
      __ungetwch_ptr.asFunction<_dart__ungetwch>();

  int _getwch_nolock() {
    return __getwch_nolock();
  }

  late final __getwch_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__getwch_nolock>>('_getwch_nolock');
  late final _dart__getwch_nolock __getwch_nolock =
      __getwch_nolock_ptr.asFunction<_dart__getwch_nolock>();

  int _getwche_nolock() {
    return __getwche_nolock();
  }

  late final __getwche_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__getwche_nolock>>('_getwche_nolock');
  late final _dart__getwche_nolock __getwche_nolock =
      __getwche_nolock_ptr.asFunction<_dart__getwche_nolock>();

  int _putwch_nolock(
    int _Character,
  ) {
    return __putwch_nolock(
      _Character,
    );
  }

  late final __putwch_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__putwch_nolock>>('_putwch_nolock');
  late final _dart__putwch_nolock __putwch_nolock =
      __putwch_nolock_ptr.asFunction<_dart__putwch_nolock>();

  int _ungetwch_nolock(
    int _Character,
  ) {
    return __ungetwch_nolock(
      _Character,
    );
  }

  late final __ungetwch_nolock_ptr =
      _lookup<ffi.NativeFunction<Native__ungetwch_nolock>>('_ungetwch_nolock');
  late final _dart__ungetwch_nolock __ungetwch_nolock =
      __ungetwch_nolock_ptr.asFunction<_dart__ungetwch_nolock>();

  int __conio_common_vcwprintf(
    int _Options,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___conio_common_vcwprintf(
      _Options,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___conio_common_vcwprintf_ptr =
      _lookup<ffi.NativeFunction<Native___conio_common_vcwprintf>>(
          '__conio_common_vcwprintf');
  late final _dart___conio_common_vcwprintf ___conio_common_vcwprintf =
      ___conio_common_vcwprintf_ptr
          .asFunction<_dart___conio_common_vcwprintf>();

  int __conio_common_vcwprintf_s(
    int _Options,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___conio_common_vcwprintf_s(
      _Options,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___conio_common_vcwprintf_s_ptr =
      _lookup<ffi.NativeFunction<Native___conio_common_vcwprintf_s>>(
          '__conio_common_vcwprintf_s');
  late final _dart___conio_common_vcwprintf_s ___conio_common_vcwprintf_s =
      ___conio_common_vcwprintf_s_ptr
          .asFunction<_dart___conio_common_vcwprintf_s>();

  int __conio_common_vcwprintf_p(
    int _Options,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___conio_common_vcwprintf_p(
      _Options,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___conio_common_vcwprintf_p_ptr =
      _lookup<ffi.NativeFunction<Native___conio_common_vcwprintf_p>>(
          '__conio_common_vcwprintf_p');
  late final _dart___conio_common_vcwprintf_p ___conio_common_vcwprintf_p =
      ___conio_common_vcwprintf_p_ptr
          .asFunction<_dart___conio_common_vcwprintf_p>();

  int __conio_common_vcwscanf(
    int _Options,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<__crt_locale_pointers> _Locale,
    ffi.Pointer<ffi.Int8> _ArgList,
  ) {
    return ___conio_common_vcwscanf(
      _Options,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___conio_common_vcwscanf_ptr =
      _lookup<ffi.NativeFunction<Native___conio_common_vcwscanf>>(
          '__conio_common_vcwscanf');
  late final _dart___conio_common_vcwscanf ___conio_common_vcwscanf =
      ___conio_common_vcwscanf_ptr.asFunction<_dart___conio_common_vcwscanf>();

  ffi.Pointer<ffi.Uint16> __pctype_func() {
    return ___pctype_func();
  }

  late final ___pctype_func_ptr =
      _lookup<ffi.NativeFunction<Native___pctype_func>>('__pctype_func');
  late final _dart___pctype_func ___pctype_func =
      ___pctype_func_ptr.asFunction<_dart___pctype_func>();

  ffi.Pointer<ffi.Uint16> __pwctype_func() {
    return ___pwctype_func();
  }

  late final ___pwctype_func_ptr =
      _lookup<ffi.NativeFunction<Native___pwctype_func>>('__pwctype_func');
  late final _dart___pwctype_func ___pwctype_func =
      ___pwctype_func_ptr.asFunction<_dart___pwctype_func>();

  int iswalnum(
    int _C,
  ) {
    return _iswalnum(
      _C,
    );
  }

  late final _iswalnum_ptr =
      _lookup<ffi.NativeFunction<Native_iswalnum>>('iswalnum');
  late final _dart_iswalnum _iswalnum =
      _iswalnum_ptr.asFunction<_dart_iswalnum>();

  int iswalpha(
    int _C,
  ) {
    return _iswalpha(
      _C,
    );
  }

  late final _iswalpha_ptr =
      _lookup<ffi.NativeFunction<Native_iswalpha>>('iswalpha');
  late final _dart_iswalpha _iswalpha =
      _iswalpha_ptr.asFunction<_dart_iswalpha>();

  int iswascii(
    int _C,
  ) {
    return _iswascii(
      _C,
    );
  }

  late final _iswascii_ptr =
      _lookup<ffi.NativeFunction<Native_iswascii>>('iswascii');
  late final _dart_iswascii _iswascii =
      _iswascii_ptr.asFunction<_dart_iswascii>();

  int iswblank(
    int _C,
  ) {
    return _iswblank(
      _C,
    );
  }

  late final _iswblank_ptr =
      _lookup<ffi.NativeFunction<Native_iswblank>>('iswblank');
  late final _dart_iswblank _iswblank =
      _iswblank_ptr.asFunction<_dart_iswblank>();

  int iswcntrl(
    int _C,
  ) {
    return _iswcntrl(
      _C,
    );
  }

  late final _iswcntrl_ptr =
      _lookup<ffi.NativeFunction<Native_iswcntrl>>('iswcntrl');
  late final _dart_iswcntrl _iswcntrl =
      _iswcntrl_ptr.asFunction<_dart_iswcntrl>();

  int iswdigit(
    int _C,
  ) {
    return _iswdigit(
      _C,
    );
  }

  late final _iswdigit_ptr =
      _lookup<ffi.NativeFunction<Native_iswdigit>>('iswdigit');
  late final _dart_iswdigit _iswdigit =
      _iswdigit_ptr.asFunction<_dart_iswdigit>();

  int iswgraph(
    int _C,
  ) {
    return _iswgraph(
      _C,
    );
  }

  late final _iswgraph_ptr =
      _lookup<ffi.NativeFunction<Native_iswgraph>>('iswgraph');
  late final _dart_iswgraph _iswgraph =
      _iswgraph_ptr.asFunction<_dart_iswgraph>();

  int iswlower(
    int _C,
  ) {
    return _iswlower(
      _C,
    );
  }

  late final _iswlower_ptr =
      _lookup<ffi.NativeFunction<Native_iswlower>>('iswlower');
  late final _dart_iswlower _iswlower =
      _iswlower_ptr.asFunction<_dart_iswlower>();

  int iswprint(
    int _C,
  ) {
    return _iswprint(
      _C,
    );
  }

  late final _iswprint_ptr =
      _lookup<ffi.NativeFunction<Native_iswprint>>('iswprint');
  late final _dart_iswprint _iswprint =
      _iswprint_ptr.asFunction<_dart_iswprint>();

  int iswpunct(
    int _C,
  ) {
    return _iswpunct(
      _C,
    );
  }

  late final _iswpunct_ptr =
      _lookup<ffi.NativeFunction<Native_iswpunct>>('iswpunct');
  late final _dart_iswpunct _iswpunct =
      _iswpunct_ptr.asFunction<_dart_iswpunct>();

  int iswspace(
    int _C,
  ) {
    return _iswspace(
      _C,
    );
  }

  late final _iswspace_ptr =
      _lookup<ffi.NativeFunction<Native_iswspace>>('iswspace');
  late final _dart_iswspace _iswspace =
      _iswspace_ptr.asFunction<_dart_iswspace>();

  int iswupper(
    int _C,
  ) {
    return _iswupper(
      _C,
    );
  }

  late final _iswupper_ptr =
      _lookup<ffi.NativeFunction<Native_iswupper>>('iswupper');
  late final _dart_iswupper _iswupper =
      _iswupper_ptr.asFunction<_dart_iswupper>();

  int iswxdigit(
    int _C,
  ) {
    return _iswxdigit(
      _C,
    );
  }

  late final _iswxdigit_ptr =
      _lookup<ffi.NativeFunction<Native_iswxdigit>>('iswxdigit');
  late final _dart_iswxdigit _iswxdigit =
      _iswxdigit_ptr.asFunction<_dart_iswxdigit>();

  int __iswcsymf(
    int _C,
  ) {
    return ___iswcsymf(
      _C,
    );
  }

  late final ___iswcsymf_ptr =
      _lookup<ffi.NativeFunction<Native___iswcsymf>>('__iswcsymf');
  late final _dart___iswcsymf ___iswcsymf =
      ___iswcsymf_ptr.asFunction<_dart___iswcsymf>();

  int __iswcsym(
    int _C,
  ) {
    return ___iswcsym(
      _C,
    );
  }

  late final ___iswcsym_ptr =
      _lookup<ffi.NativeFunction<Native___iswcsym>>('__iswcsym');
  late final _dart___iswcsym ___iswcsym =
      ___iswcsym_ptr.asFunction<_dart___iswcsym>();

  int _iswalnum_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iswalnum_l(
      _C,
      _Locale,
    );
  }

  late final __iswalnum_l_ptr =
      _lookup<ffi.NativeFunction<Native__iswalnum_l>>('_iswalnum_l');
  late final _dart__iswalnum_l __iswalnum_l =
      __iswalnum_l_ptr.asFunction<_dart__iswalnum_l>();

  int _iswalpha_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iswalpha_l(
      _C,
      _Locale,
    );
  }

  late final __iswalpha_l_ptr =
      _lookup<ffi.NativeFunction<Native__iswalpha_l>>('_iswalpha_l');
  late final _dart__iswalpha_l __iswalpha_l =
      __iswalpha_l_ptr.asFunction<_dart__iswalpha_l>();

  int _iswblank_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iswblank_l(
      _C,
      _Locale,
    );
  }

  late final __iswblank_l_ptr =
      _lookup<ffi.NativeFunction<Native__iswblank_l>>('_iswblank_l');
  late final _dart__iswblank_l __iswblank_l =
      __iswblank_l_ptr.asFunction<_dart__iswblank_l>();

  int _iswcntrl_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iswcntrl_l(
      _C,
      _Locale,
    );
  }

  late final __iswcntrl_l_ptr =
      _lookup<ffi.NativeFunction<Native__iswcntrl_l>>('_iswcntrl_l');
  late final _dart__iswcntrl_l __iswcntrl_l =
      __iswcntrl_l_ptr.asFunction<_dart__iswcntrl_l>();

  int _iswdigit_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iswdigit_l(
      _C,
      _Locale,
    );
  }

  late final __iswdigit_l_ptr =
      _lookup<ffi.NativeFunction<Native__iswdigit_l>>('_iswdigit_l');
  late final _dart__iswdigit_l __iswdigit_l =
      __iswdigit_l_ptr.asFunction<_dart__iswdigit_l>();

  int _iswgraph_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iswgraph_l(
      _C,
      _Locale,
    );
  }

  late final __iswgraph_l_ptr =
      _lookup<ffi.NativeFunction<Native__iswgraph_l>>('_iswgraph_l');
  late final _dart__iswgraph_l __iswgraph_l =
      __iswgraph_l_ptr.asFunction<_dart__iswgraph_l>();

  int _iswlower_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iswlower_l(
      _C,
      _Locale,
    );
  }

  late final __iswlower_l_ptr =
      _lookup<ffi.NativeFunction<Native__iswlower_l>>('_iswlower_l');
  late final _dart__iswlower_l __iswlower_l =
      __iswlower_l_ptr.asFunction<_dart__iswlower_l>();

  int _iswprint_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iswprint_l(
      _C,
      _Locale,
    );
  }

  late final __iswprint_l_ptr =
      _lookup<ffi.NativeFunction<Native__iswprint_l>>('_iswprint_l');
  late final _dart__iswprint_l __iswprint_l =
      __iswprint_l_ptr.asFunction<_dart__iswprint_l>();

  int _iswpunct_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iswpunct_l(
      _C,
      _Locale,
    );
  }

  late final __iswpunct_l_ptr =
      _lookup<ffi.NativeFunction<Native__iswpunct_l>>('_iswpunct_l');
  late final _dart__iswpunct_l __iswpunct_l =
      __iswpunct_l_ptr.asFunction<_dart__iswpunct_l>();

  int _iswspace_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iswspace_l(
      _C,
      _Locale,
    );
  }

  late final __iswspace_l_ptr =
      _lookup<ffi.NativeFunction<Native__iswspace_l>>('_iswspace_l');
  late final _dart__iswspace_l __iswspace_l =
      __iswspace_l_ptr.asFunction<_dart__iswspace_l>();

  int _iswupper_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iswupper_l(
      _C,
      _Locale,
    );
  }

  late final __iswupper_l_ptr =
      _lookup<ffi.NativeFunction<Native__iswupper_l>>('_iswupper_l');
  late final _dart__iswupper_l __iswupper_l =
      __iswupper_l_ptr.asFunction<_dart__iswupper_l>();

  int _iswxdigit_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iswxdigit_l(
      _C,
      _Locale,
    );
  }

  late final __iswxdigit_l_ptr =
      _lookup<ffi.NativeFunction<Native__iswxdigit_l>>('_iswxdigit_l');
  late final _dart__iswxdigit_l __iswxdigit_l =
      __iswxdigit_l_ptr.asFunction<_dart__iswxdigit_l>();

  int _iswcsymf_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iswcsymf_l(
      _C,
      _Locale,
    );
  }

  late final __iswcsymf_l_ptr =
      _lookup<ffi.NativeFunction<Native__iswcsymf_l>>('_iswcsymf_l');
  late final _dart__iswcsymf_l __iswcsymf_l =
      __iswcsymf_l_ptr.asFunction<_dart__iswcsymf_l>();

  int _iswcsym_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iswcsym_l(
      _C,
      _Locale,
    );
  }

  late final __iswcsym_l_ptr =
      _lookup<ffi.NativeFunction<Native__iswcsym_l>>('_iswcsym_l');
  late final _dart__iswcsym_l __iswcsym_l =
      __iswcsym_l_ptr.asFunction<_dart__iswcsym_l>();

  int towupper(
    int _C,
  ) {
    return _towupper(
      _C,
    );
  }

  late final _towupper_ptr =
      _lookup<ffi.NativeFunction<Native_towupper>>('towupper');
  late final _dart_towupper _towupper =
      _towupper_ptr.asFunction<_dart_towupper>();

  int towlower(
    int _C,
  ) {
    return _towlower(
      _C,
    );
  }

  late final _towlower_ptr =
      _lookup<ffi.NativeFunction<Native_towlower>>('towlower');
  late final _dart_towlower _towlower =
      _towlower_ptr.asFunction<_dart_towlower>();

  int iswctype(
    int _C,
    int _Type,
  ) {
    return _iswctype(
      _C,
      _Type,
    );
  }

  late final _iswctype_ptr =
      _lookup<ffi.NativeFunction<Native_iswctype>>('iswctype');
  late final _dart_iswctype _iswctype =
      _iswctype_ptr.asFunction<_dart_iswctype>();

  int _towupper_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __towupper_l(
      _C,
      _Locale,
    );
  }

  late final __towupper_l_ptr =
      _lookup<ffi.NativeFunction<Native__towupper_l>>('_towupper_l');
  late final _dart__towupper_l __towupper_l =
      __towupper_l_ptr.asFunction<_dart__towupper_l>();

  int _towlower_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __towlower_l(
      _C,
      _Locale,
    );
  }

  late final __towlower_l_ptr =
      _lookup<ffi.NativeFunction<Native__towlower_l>>('_towlower_l');
  late final _dart__towlower_l __towlower_l =
      __towlower_l_ptr.asFunction<_dart__towlower_l>();

  int _iswctype_l(
    int _C,
    int _Type,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iswctype_l(
      _C,
      _Type,
      _Locale,
    );
  }

  late final __iswctype_l_ptr =
      _lookup<ffi.NativeFunction<Native__iswctype_l>>('_iswctype_l');
  late final _dart__iswctype_l __iswctype_l =
      __iswctype_l_ptr.asFunction<_dart__iswctype_l>();

  int isleadbyte(
    int _C,
  ) {
    return _isleadbyte(
      _C,
    );
  }

  late final _isleadbyte_ptr =
      _lookup<ffi.NativeFunction<Native_isleadbyte>>('isleadbyte');
  late final _dart_isleadbyte _isleadbyte =
      _isleadbyte_ptr.asFunction<_dart_isleadbyte>();

  int _isleadbyte_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __isleadbyte_l(
      _C,
      _Locale,
    );
  }

  late final __isleadbyte_l_ptr =
      _lookup<ffi.NativeFunction<Native__isleadbyte_l>>('_isleadbyte_l');
  late final _dart__isleadbyte_l __isleadbyte_l =
      __isleadbyte_l_ptr.asFunction<_dart__isleadbyte_l>();

  int is_wctype(
    int _C,
    int _Type,
  ) {
    return _is_wctype(
      _C,
      _Type,
    );
  }

  late final _is_wctype_ptr =
      _lookup<ffi.NativeFunction<Native_is_wctype>>('is_wctype');
  late final _dart_is_wctype _is_wctype =
      _is_wctype_ptr.asFunction<_dart_is_wctype>();

  ffi.Pointer<ffi.Uint16> _wgetcwd(
    ffi.Pointer<ffi.Uint16> _DstBuf,
    int _SizeInWords,
  ) {
    return __wgetcwd(
      _DstBuf,
      _SizeInWords,
    );
  }

  late final __wgetcwd_ptr =
      _lookup<ffi.NativeFunction<Native__wgetcwd>>('_wgetcwd');
  late final _dart__wgetcwd __wgetcwd =
      __wgetcwd_ptr.asFunction<_dart__wgetcwd>();

  ffi.Pointer<ffi.Uint16> _wgetdcwd(
    int _Drive,
    ffi.Pointer<ffi.Uint16> _DstBuf,
    int _SizeInWords,
  ) {
    return __wgetdcwd(
      _Drive,
      _DstBuf,
      _SizeInWords,
    );
  }

  late final __wgetdcwd_ptr =
      _lookup<ffi.NativeFunction<Native__wgetdcwd>>('_wgetdcwd');
  late final _dart__wgetdcwd __wgetdcwd =
      __wgetdcwd_ptr.asFunction<_dart__wgetdcwd>();

  int _wchdir(
    ffi.Pointer<ffi.Uint16> _Path,
  ) {
    return __wchdir(
      _Path,
    );
  }

  late final __wchdir_ptr =
      _lookup<ffi.NativeFunction<Native__wchdir>>('_wchdir');
  late final _dart__wchdir __wchdir = __wchdir_ptr.asFunction<_dart__wchdir>();

  int _wmkdir(
    ffi.Pointer<ffi.Uint16> _Path,
  ) {
    return __wmkdir(
      _Path,
    );
  }

  late final __wmkdir_ptr =
      _lookup<ffi.NativeFunction<Native__wmkdir>>('_wmkdir');
  late final _dart__wmkdir __wmkdir = __wmkdir_ptr.asFunction<_dart__wmkdir>();

  int _wrmdir(
    ffi.Pointer<ffi.Uint16> _Path,
  ) {
    return __wrmdir(
      _Path,
    );
  }

  late final __wrmdir_ptr =
      _lookup<ffi.NativeFunction<Native__wrmdir>>('_wrmdir');
  late final _dart__wrmdir __wrmdir = __wrmdir_ptr.asFunction<_dart__wrmdir>();

  int _waccess(
    ffi.Pointer<ffi.Uint16> _FileName,
    int _AccessMode,
  ) {
    return __waccess(
      _FileName,
      _AccessMode,
    );
  }

  late final __waccess_ptr =
      _lookup<ffi.NativeFunction<Native__waccess>>('_waccess');
  late final _dart__waccess __waccess =
      __waccess_ptr.asFunction<_dart__waccess>();

  int _waccess_s(
    ffi.Pointer<ffi.Uint16> _FileName,
    int _AccessMode,
  ) {
    return __waccess_s(
      _FileName,
      _AccessMode,
    );
  }

  late final __waccess_s_ptr =
      _lookup<ffi.NativeFunction<Native__waccess_s>>('_waccess_s');
  late final _dart__waccess_s __waccess_s =
      __waccess_s_ptr.asFunction<_dart__waccess_s>();

  int _wchmod(
    ffi.Pointer<ffi.Uint16> _FileName,
    int _Mode,
  ) {
    return __wchmod(
      _FileName,
      _Mode,
    );
  }

  late final __wchmod_ptr =
      _lookup<ffi.NativeFunction<Native__wchmod>>('_wchmod');
  late final _dart__wchmod __wchmod = __wchmod_ptr.asFunction<_dart__wchmod>();

  int _wcreat(
    ffi.Pointer<ffi.Uint16> _FileName,
    int _PermissionMode,
  ) {
    return __wcreat(
      _FileName,
      _PermissionMode,
    );
  }

  late final __wcreat_ptr =
      _lookup<ffi.NativeFunction<Native__wcreat>>('_wcreat');
  late final _dart__wcreat __wcreat = __wcreat_ptr.asFunction<_dart__wcreat>();

  int _wfindfirst32(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<_wfinddata32_t> _FindData,
  ) {
    return __wfindfirst32(
      _FileName,
      _FindData,
    );
  }

  late final __wfindfirst32_ptr =
      _lookup<ffi.NativeFunction<Native__wfindfirst32>>('_wfindfirst32');
  late final _dart__wfindfirst32 __wfindfirst32 =
      __wfindfirst32_ptr.asFunction<_dart__wfindfirst32>();

  int _wfindnext32(
    int _FindHandle,
    ffi.Pointer<_wfinddata32_t> _FindData,
  ) {
    return __wfindnext32(
      _FindHandle,
      _FindData,
    );
  }

  late final __wfindnext32_ptr =
      _lookup<ffi.NativeFunction<Native__wfindnext32>>('_wfindnext32');
  late final _dart__wfindnext32 __wfindnext32 =
      __wfindnext32_ptr.asFunction<_dart__wfindnext32>();

  int _wunlink(
    ffi.Pointer<ffi.Uint16> _FileName,
  ) {
    return __wunlink(
      _FileName,
    );
  }

  late final __wunlink_ptr =
      _lookup<ffi.NativeFunction<Native__wunlink>>('_wunlink');
  late final _dart__wunlink __wunlink =
      __wunlink_ptr.asFunction<_dart__wunlink>();

  int _wrename(
    ffi.Pointer<ffi.Uint16> _OldFileName,
    ffi.Pointer<ffi.Uint16> _NewFileName,
  ) {
    return __wrename(
      _OldFileName,
      _NewFileName,
    );
  }

  late final __wrename_ptr =
      _lookup<ffi.NativeFunction<Native__wrename>>('_wrename');
  late final _dart__wrename __wrename =
      __wrename_ptr.asFunction<_dart__wrename>();

  int _wmktemp_s(
    ffi.Pointer<ffi.Uint16> _TemplateName,
    int _SizeInWords,
  ) {
    return __wmktemp_s(
      _TemplateName,
      _SizeInWords,
    );
  }

  late final __wmktemp_s_ptr =
      _lookup<ffi.NativeFunction<Native__wmktemp_s>>('_wmktemp_s');
  late final _dart__wmktemp_s __wmktemp_s =
      __wmktemp_s_ptr.asFunction<_dart__wmktemp_s>();

  ffi.Pointer<ffi.Uint16> _wmktemp(
    ffi.Pointer<ffi.Uint16> _TemplateName,
  ) {
    return __wmktemp(
      _TemplateName,
    );
  }

  late final __wmktemp_ptr =
      _lookup<ffi.NativeFunction<Native__wmktemp>>('_wmktemp');
  late final _dart__wmktemp __wmktemp =
      __wmktemp_ptr.asFunction<_dart__wmktemp>();

  int _wfindfirst32i64(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<_wfinddata32i64_t> _FindData,
  ) {
    return __wfindfirst32i64(
      _FileName,
      _FindData,
    );
  }

  late final __wfindfirst32i64_ptr =
      _lookup<ffi.NativeFunction<Native__wfindfirst32i64>>('_wfindfirst32i64');
  late final _dart__wfindfirst32i64 __wfindfirst32i64 =
      __wfindfirst32i64_ptr.asFunction<_dart__wfindfirst32i64>();

  int _wfindfirst64i32(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<_wfinddata64i32_t> _FindData,
  ) {
    return __wfindfirst64i32(
      _FileName,
      _FindData,
    );
  }

  late final __wfindfirst64i32_ptr =
      _lookup<ffi.NativeFunction<Native__wfindfirst64i32>>('_wfindfirst64i32');
  late final _dart__wfindfirst64i32 __wfindfirst64i32 =
      __wfindfirst64i32_ptr.asFunction<_dart__wfindfirst64i32>();

  int _wfindfirst64(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<_wfinddata64_t> _FindData,
  ) {
    return __wfindfirst64(
      _FileName,
      _FindData,
    );
  }

  late final __wfindfirst64_ptr =
      _lookup<ffi.NativeFunction<Native__wfindfirst64>>('_wfindfirst64');
  late final _dart__wfindfirst64 __wfindfirst64 =
      __wfindfirst64_ptr.asFunction<_dart__wfindfirst64>();

  int _wfindnext32i64(
    int _FindHandle,
    ffi.Pointer<_wfinddata32i64_t> _FindData,
  ) {
    return __wfindnext32i64(
      _FindHandle,
      _FindData,
    );
  }

  late final __wfindnext32i64_ptr =
      _lookup<ffi.NativeFunction<Native__wfindnext32i64>>('_wfindnext32i64');
  late final _dart__wfindnext32i64 __wfindnext32i64 =
      __wfindnext32i64_ptr.asFunction<_dart__wfindnext32i64>();

  int _wfindnext64i32(
    int _FindHandle,
    ffi.Pointer<_wfinddata64i32_t> _FindData,
  ) {
    return __wfindnext64i32(
      _FindHandle,
      _FindData,
    );
  }

  late final __wfindnext64i32_ptr =
      _lookup<ffi.NativeFunction<Native__wfindnext64i32>>('_wfindnext64i32');
  late final _dart__wfindnext64i32 __wfindnext64i32 =
      __wfindnext64i32_ptr.asFunction<_dart__wfindnext64i32>();

  int _wfindnext64(
    int _FindHandle,
    ffi.Pointer<_wfinddata64_t> _FindData,
  ) {
    return __wfindnext64(
      _FindHandle,
      _FindData,
    );
  }

  late final __wfindnext64_ptr =
      _lookup<ffi.NativeFunction<Native__wfindnext64>>('_wfindnext64');
  late final _dart__wfindnext64 __wfindnext64 =
      __wfindnext64_ptr.asFunction<_dart__wfindnext64>();

  int _wsopen_s(
    ffi.Pointer<ffi.Int32> _FileHandle,
    ffi.Pointer<ffi.Uint16> _FileName,
    int _OpenFlag,
    int _ShareFlag,
    int _PermissionFlag,
  ) {
    return __wsopen_s(
      _FileHandle,
      _FileName,
      _OpenFlag,
      _ShareFlag,
      _PermissionFlag,
    );
  }

  late final __wsopen_s_ptr =
      _lookup<ffi.NativeFunction<Native__wsopen_s>>('_wsopen_s');
  late final _dart__wsopen_s __wsopen_s =
      __wsopen_s_ptr.asFunction<_dart__wsopen_s>();

  int _wsopen_dispatch(
    ffi.Pointer<ffi.Uint16> _FileName,
    int _OFlag,
    int _ShFlag,
    int _PMode,
    ffi.Pointer<ffi.Int32> _PFileHandle,
    int _BSecure,
  ) {
    return __wsopen_dispatch(
      _FileName,
      _OFlag,
      _ShFlag,
      _PMode,
      _PFileHandle,
      _BSecure,
    );
  }

  late final __wsopen_dispatch_ptr =
      _lookup<ffi.NativeFunction<Native__wsopen_dispatch>>('_wsopen_dispatch');
  late final _dart__wsopen_dispatch __wsopen_dispatch =
      __wsopen_dispatch_ptr.asFunction<_dart__wsopen_dispatch>();

  int _wopen(
    ffi.Pointer<ffi.Uint16> _FileName,
    int _OpenFlag,
  ) {
    return __wopen(
      _FileName,
      _OpenFlag,
    );
  }

  late final __wopen_ptr = _lookup<ffi.NativeFunction<Native__wopen>>('_wopen');
  late final _dart__wopen __wopen = __wopen_ptr.asFunction<_dart__wopen>();

  int _wsopen(
    ffi.Pointer<ffi.Uint16> _FileName,
    int _OpenFlag,
    int _ShareFlag,
  ) {
    return __wsopen(
      _FileName,
      _OpenFlag,
      _ShareFlag,
    );
  }

  late final __wsopen_ptr =
      _lookup<ffi.NativeFunction<Native__wsopen>>('_wsopen');
  late final _dart__wsopen __wsopen = __wsopen_ptr.asFunction<_dart__wsopen>();

  int _wexecl(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Uint16> _ArgList,
  ) {
    return __wexecl(
      _FileName,
      _ArgList,
    );
  }

  late final __wexecl_ptr =
      _lookup<ffi.NativeFunction<Native__wexecl>>('_wexecl');
  late final _dart__wexecl __wexecl = __wexecl_ptr.asFunction<_dart__wexecl>();

  int _wexecle(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Uint16> _ArgList,
  ) {
    return __wexecle(
      _FileName,
      _ArgList,
    );
  }

  late final __wexecle_ptr =
      _lookup<ffi.NativeFunction<Native__wexecle>>('_wexecle');
  late final _dart__wexecle __wexecle =
      __wexecle_ptr.asFunction<_dart__wexecle>();

  int _wexeclp(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Uint16> _ArgList,
  ) {
    return __wexeclp(
      _FileName,
      _ArgList,
    );
  }

  late final __wexeclp_ptr =
      _lookup<ffi.NativeFunction<Native__wexeclp>>('_wexeclp');
  late final _dart__wexeclp __wexeclp =
      __wexeclp_ptr.asFunction<_dart__wexeclp>();

  int _wexeclpe(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Uint16> _ArgList,
  ) {
    return __wexeclpe(
      _FileName,
      _ArgList,
    );
  }

  late final __wexeclpe_ptr =
      _lookup<ffi.NativeFunction<Native__wexeclpe>>('_wexeclpe');
  late final _dart__wexeclpe __wexeclpe =
      __wexeclpe_ptr.asFunction<_dart__wexeclpe>();

  int _wexecv(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
  ) {
    return __wexecv(
      _FileName,
      _ArgList,
    );
  }

  late final __wexecv_ptr =
      _lookup<ffi.NativeFunction<Native__wexecv>>('_wexecv');
  late final _dart__wexecv __wexecv = __wexecv_ptr.asFunction<_dart__wexecv>();

  int _wexecve(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Env,
  ) {
    return __wexecve(
      _FileName,
      _ArgList,
      _Env,
    );
  }

  late final __wexecve_ptr =
      _lookup<ffi.NativeFunction<Native__wexecve>>('_wexecve');
  late final _dart__wexecve __wexecve =
      __wexecve_ptr.asFunction<_dart__wexecve>();

  int _wexecvp(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
  ) {
    return __wexecvp(
      _FileName,
      _ArgList,
    );
  }

  late final __wexecvp_ptr =
      _lookup<ffi.NativeFunction<Native__wexecvp>>('_wexecvp');
  late final _dart__wexecvp __wexecvp =
      __wexecvp_ptr.asFunction<_dart__wexecvp>();

  int _wexecvpe(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Env,
  ) {
    return __wexecvpe(
      _FileName,
      _ArgList,
      _Env,
    );
  }

  late final __wexecvpe_ptr =
      _lookup<ffi.NativeFunction<Native__wexecvpe>>('_wexecvpe');
  late final _dart__wexecvpe __wexecvpe =
      __wexecvpe_ptr.asFunction<_dart__wexecvpe>();

  int _wspawnl(
    int _Mode,
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Uint16> _ArgList,
  ) {
    return __wspawnl(
      _Mode,
      _FileName,
      _ArgList,
    );
  }

  late final __wspawnl_ptr =
      _lookup<ffi.NativeFunction<Native__wspawnl>>('_wspawnl');
  late final _dart__wspawnl __wspawnl =
      __wspawnl_ptr.asFunction<_dart__wspawnl>();

  int _wspawnle(
    int _Mode,
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Uint16> _ArgList,
  ) {
    return __wspawnle(
      _Mode,
      _FileName,
      _ArgList,
    );
  }

  late final __wspawnle_ptr =
      _lookup<ffi.NativeFunction<Native__wspawnle>>('_wspawnle');
  late final _dart__wspawnle __wspawnle =
      __wspawnle_ptr.asFunction<_dart__wspawnle>();

  int _wspawnlp(
    int _Mode,
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Uint16> _ArgList,
  ) {
    return __wspawnlp(
      _Mode,
      _FileName,
      _ArgList,
    );
  }

  late final __wspawnlp_ptr =
      _lookup<ffi.NativeFunction<Native__wspawnlp>>('_wspawnlp');
  late final _dart__wspawnlp __wspawnlp =
      __wspawnlp_ptr.asFunction<_dart__wspawnlp>();

  int _wspawnlpe(
    int _Mode,
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Uint16> _ArgList,
  ) {
    return __wspawnlpe(
      _Mode,
      _FileName,
      _ArgList,
    );
  }

  late final __wspawnlpe_ptr =
      _lookup<ffi.NativeFunction<Native__wspawnlpe>>('_wspawnlpe');
  late final _dart__wspawnlpe __wspawnlpe =
      __wspawnlpe_ptr.asFunction<_dart__wspawnlpe>();

  int _wspawnv(
    int _Mode,
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
  ) {
    return __wspawnv(
      _Mode,
      _FileName,
      _ArgList,
    );
  }

  late final __wspawnv_ptr =
      _lookup<ffi.NativeFunction<Native__wspawnv>>('_wspawnv');
  late final _dart__wspawnv __wspawnv =
      __wspawnv_ptr.asFunction<_dart__wspawnv>();

  int _wspawnve(
    int _Mode,
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Env,
  ) {
    return __wspawnve(
      _Mode,
      _FileName,
      _ArgList,
      _Env,
    );
  }

  late final __wspawnve_ptr =
      _lookup<ffi.NativeFunction<Native__wspawnve>>('_wspawnve');
  late final _dart__wspawnve __wspawnve =
      __wspawnve_ptr.asFunction<_dart__wspawnve>();

  int _wspawnvp(
    int _Mode,
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
  ) {
    return __wspawnvp(
      _Mode,
      _FileName,
      _ArgList,
    );
  }

  late final __wspawnvp_ptr =
      _lookup<ffi.NativeFunction<Native__wspawnvp>>('_wspawnvp');
  late final _dart__wspawnvp __wspawnvp =
      __wspawnvp_ptr.asFunction<_dart__wspawnvp>();

  int _wspawnvpe(
    int _Mode,
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Env,
  ) {
    return __wspawnvpe(
      _Mode,
      _FileName,
      _ArgList,
      _Env,
    );
  }

  late final __wspawnvpe_ptr =
      _lookup<ffi.NativeFunction<Native__wspawnvpe>>('_wspawnvpe');
  late final _dart__wspawnvpe __wspawnvpe =
      __wspawnvpe_ptr.asFunction<_dart__wspawnvpe>();

  ffi.Pointer<ffi.Uint16> _wasctime(
    ffi.Pointer<tm> _Tm,
  ) {
    return __wasctime(
      _Tm,
    );
  }

  late final __wasctime_ptr =
      _lookup<ffi.NativeFunction<Native__wasctime>>('_wasctime');
  late final _dart__wasctime __wasctime =
      __wasctime_ptr.asFunction<_dart__wasctime>();

  int _wasctime_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    ffi.Pointer<tm> _Tm,
  ) {
    return __wasctime_s(
      _Buffer,
      _SizeInWords,
      _Tm,
    );
  }

  late final __wasctime_s_ptr =
      _lookup<ffi.NativeFunction<Native__wasctime_s>>('_wasctime_s');
  late final _dart__wasctime_s __wasctime_s =
      __wasctime_s_ptr.asFunction<_dart__wasctime_s>();

  int wcsftime(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<tm> _Tm,
  ) {
    return _wcsftime(
      _Buffer,
      _SizeInWords,
      _Format,
      _Tm,
    );
  }

  late final _wcsftime_ptr =
      _lookup<ffi.NativeFunction<Native_wcsftime>>('wcsftime');
  late final _dart_wcsftime _wcsftime =
      _wcsftime_ptr.asFunction<_dart_wcsftime>();

  int _wcsftime_l(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsftime_l(
      _Buffer,
      _SizeInWords,
      _Format,
      _Tm,
      _Locale,
    );
  }

  late final __wcsftime_l_ptr =
      _lookup<ffi.NativeFunction<Native__wcsftime_l>>('_wcsftime_l');
  late final _dart__wcsftime_l __wcsftime_l =
      __wcsftime_l_ptr.asFunction<_dart__wcsftime_l>();

  ffi.Pointer<ffi.Uint16> _wctime32(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __wctime32(
      _Time,
    );
  }

  late final __wctime32_ptr =
      _lookup<ffi.NativeFunction<Native__wctime32>>('_wctime32');
  late final _dart__wctime32 __wctime32 =
      __wctime32_ptr.asFunction<_dart__wctime32>();

  int _wctime32_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __wctime32_s(
      _Buffer,
      _SizeInWords,
      _Time,
    );
  }

  late final __wctime32_s_ptr =
      _lookup<ffi.NativeFunction<Native__wctime32_s>>('_wctime32_s');
  late final _dart__wctime32_s __wctime32_s =
      __wctime32_s_ptr.asFunction<_dart__wctime32_s>();

  ffi.Pointer<ffi.Uint16> _wctime64(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __wctime64(
      _Time,
    );
  }

  late final __wctime64_ptr =
      _lookup<ffi.NativeFunction<Native__wctime64>>('_wctime64');
  late final _dart__wctime64 __wctime64 =
      __wctime64_ptr.asFunction<_dart__wctime64>();

  int _wctime64_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __wctime64_s(
      _Buffer,
      _SizeInWords,
      _Time,
    );
  }

  late final __wctime64_s_ptr =
      _lookup<ffi.NativeFunction<Native__wctime64_s>>('_wctime64_s');
  late final _dart__wctime64_s __wctime64_s =
      __wctime64_s_ptr.asFunction<_dart__wctime64_s>();

  int _wstrdate_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
  ) {
    return __wstrdate_s(
      _Buffer,
      _SizeInWords,
    );
  }

  late final __wstrdate_s_ptr =
      _lookup<ffi.NativeFunction<Native__wstrdate_s>>('_wstrdate_s');
  late final _dart__wstrdate_s __wstrdate_s =
      __wstrdate_s_ptr.asFunction<_dart__wstrdate_s>();

  ffi.Pointer<ffi.Uint16> _wstrdate(
    ffi.Pointer<ffi.Uint16> _Buffer,
  ) {
    return __wstrdate(
      _Buffer,
    );
  }

  late final __wstrdate_ptr =
      _lookup<ffi.NativeFunction<Native__wstrdate>>('_wstrdate');
  late final _dart__wstrdate __wstrdate =
      __wstrdate_ptr.asFunction<_dart__wstrdate>();

  int _wstrtime_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
  ) {
    return __wstrtime_s(
      _Buffer,
      _SizeInWords,
    );
  }

  late final __wstrtime_s_ptr =
      _lookup<ffi.NativeFunction<Native__wstrtime_s>>('_wstrtime_s');
  late final _dart__wstrtime_s __wstrtime_s =
      __wstrtime_s_ptr.asFunction<_dart__wstrtime_s>();

  ffi.Pointer<ffi.Uint16> _wstrtime(
    ffi.Pointer<ffi.Uint16> _Buffer,
  ) {
    return __wstrtime(
      _Buffer,
    );
  }

  late final __wstrtime_ptr =
      _lookup<ffi.NativeFunction<Native__wstrtime>>('_wstrtime');
  late final _dart__wstrtime __wstrtime =
      __wstrtime_ptr.asFunction<_dart__wstrtime>();

  int _fstat32(
    int _FileHandle,
    ffi.Pointer<_stat32> _Stat,
  ) {
    return __fstat32(
      _FileHandle,
      _Stat,
    );
  }

  late final __fstat32_ptr =
      _lookup<ffi.NativeFunction<Native__fstat32>>('_fstat32');
  late final _dart__fstat32 __fstat32 =
      __fstat32_ptr.asFunction<_dart__fstat32>();

  int _fstat32i64(
    int _FileHandle,
    ffi.Pointer<_stat32i64> _Stat,
  ) {
    return __fstat32i64(
      _FileHandle,
      _Stat,
    );
  }

  late final __fstat32i64_ptr =
      _lookup<ffi.NativeFunction<Native__fstat32i64>>('_fstat32i64');
  late final _dart__fstat32i64 __fstat32i64 =
      __fstat32i64_ptr.asFunction<_dart__fstat32i64>();

  int _fstat64i32(
    int _FileHandle,
    ffi.Pointer<_stat64i32> _Stat,
  ) {
    return __fstat64i32(
      _FileHandle,
      _Stat,
    );
  }

  late final __fstat64i32_ptr =
      _lookup<ffi.NativeFunction<Native__fstat64i32>>('_fstat64i32');
  late final _dart__fstat64i32 __fstat64i32 =
      __fstat64i32_ptr.asFunction<_dart__fstat64i32>();

  int _fstat64(
    int _FileHandle,
    ffi.Pointer<_stat64> _Stat,
  ) {
    return __fstat64(
      _FileHandle,
      _Stat,
    );
  }

  late final __fstat64_ptr =
      _lookup<ffi.NativeFunction<Native__fstat64>>('_fstat64');
  late final _dart__fstat64 __fstat64 =
      __fstat64_ptr.asFunction<_dart__fstat64>();

  int _stat32_1(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<_stat32> _Stat,
  ) {
    return __stat32_1(
      _FileName,
      _Stat,
    );
  }

  late final __stat32_1_ptr =
      _lookup<ffi.NativeFunction<Native__stat32_1>>('_stat32');
  late final _dart__stat32_1 __stat32_1 =
      __stat32_1_ptr.asFunction<_dart__stat32_1>();

  int _stat32i64_1(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<_stat32i64> _Stat,
  ) {
    return __stat32i64_1(
      _FileName,
      _Stat,
    );
  }

  late final __stat32i64_1_ptr =
      _lookup<ffi.NativeFunction<Native__stat32i64_1>>('_stat32i64');
  late final _dart__stat32i64_1 __stat32i64_1 =
      __stat32i64_1_ptr.asFunction<_dart__stat32i64_1>();

  int _stat64i32_1(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<_stat64i32> _Stat,
  ) {
    return __stat64i32_1(
      _FileName,
      _Stat,
    );
  }

  late final __stat64i32_1_ptr =
      _lookup<ffi.NativeFunction<Native__stat64i32_1>>('_stat64i32');
  late final _dart__stat64i32_1 __stat64i32_1 =
      __stat64i32_1_ptr.asFunction<_dart__stat64i32_1>();

  int _stat64_1(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<_stat64> _Stat,
  ) {
    return __stat64_1(
      _FileName,
      _Stat,
    );
  }

  late final __stat64_1_ptr =
      _lookup<ffi.NativeFunction<Native__stat64_1>>('_stat64');
  late final _dart__stat64_1 __stat64_1 =
      __stat64_1_ptr.asFunction<_dart__stat64_1>();

  int _wstat32(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<_stat32> _Stat,
  ) {
    return __wstat32(
      _FileName,
      _Stat,
    );
  }

  late final __wstat32_ptr =
      _lookup<ffi.NativeFunction<Native__wstat32>>('_wstat32');
  late final _dart__wstat32 __wstat32 =
      __wstat32_ptr.asFunction<_dart__wstat32>();

  int _wstat32i64(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<_stat32i64> _Stat,
  ) {
    return __wstat32i64(
      _FileName,
      _Stat,
    );
  }

  late final __wstat32i64_ptr =
      _lookup<ffi.NativeFunction<Native__wstat32i64>>('_wstat32i64');
  late final _dart__wstat32i64 __wstat32i64 =
      __wstat32i64_ptr.asFunction<_dart__wstat32i64>();

  int _wstat64i32(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<_stat64i32> _Stat,
  ) {
    return __wstat64i32(
      _FileName,
      _Stat,
    );
  }

  late final __wstat64i32_ptr =
      _lookup<ffi.NativeFunction<Native__wstat64i32>>('_wstat64i32');
  late final _dart__wstat64i32 __wstat64i32 =
      __wstat64i32_ptr.asFunction<_dart__wstat64i32>();

  int _wstat64(
    ffi.Pointer<ffi.Uint16> _FileName,
    ffi.Pointer<_stat64> _Stat,
  ) {
    return __wstat64(
      _FileName,
      _Stat,
    );
  }

  late final __wstat64_ptr =
      _lookup<ffi.NativeFunction<Native__wstat64>>('_wstat64');
  late final _dart__wstat64 __wstat64 =
      __wstat64_ptr.asFunction<_dart__wstat64>();

  ffi.Pointer<ffi.Uint16> _wsetlocale(
    int _Category,
    ffi.Pointer<ffi.Uint16> _Locale,
  ) {
    return __wsetlocale(
      _Category,
      _Locale,
    );
  }

  late final __wsetlocale_ptr =
      _lookup<ffi.NativeFunction<Native__wsetlocale>>('_wsetlocale');
  late final _dart__wsetlocale __wsetlocale =
      __wsetlocale_ptr.asFunction<_dart__wsetlocale>();

  ffi.Pointer<__crt_locale_pointers> _wcreate_locale(
    int _Category,
    ffi.Pointer<ffi.Uint16> _Locale,
  ) {
    return __wcreate_locale(
      _Category,
      _Locale,
    );
  }

  late final __wcreate_locale_ptr =
      _lookup<ffi.NativeFunction<Native__wcreate_locale>>('_wcreate_locale');
  late final _dart__wcreate_locale __wcreate_locale =
      __wcreate_locale_ptr.asFunction<_dart__wcreate_locale>();

  int btowc(
    int _Ch,
  ) {
    return _btowc(
      _Ch,
    );
  }

  late final _btowc_ptr = _lookup<ffi.NativeFunction<Native_btowc>>('btowc');
  late final _dart_btowc _btowc = _btowc_ptr.asFunction<_dart_btowc>();

  int mbrlen(
    ffi.Pointer<ffi.Int8> _Ch,
    int _SizeInBytes,
    ffi.Pointer<_Mbstatet> _State,
  ) {
    return _mbrlen(
      _Ch,
      _SizeInBytes,
      _State,
    );
  }

  late final _mbrlen_ptr = _lookup<ffi.NativeFunction<Native_mbrlen>>('mbrlen');
  late final _dart_mbrlen _mbrlen = _mbrlen_ptr.asFunction<_dart_mbrlen>();

  int mbrtowc(
    ffi.Pointer<ffi.Uint16> _DstCh,
    ffi.Pointer<ffi.Int8> _SrcCh,
    int _SizeInBytes,
    ffi.Pointer<_Mbstatet> _State,
  ) {
    return _mbrtowc(
      _DstCh,
      _SrcCh,
      _SizeInBytes,
      _State,
    );
  }

  late final _mbrtowc_ptr =
      _lookup<ffi.NativeFunction<Native_mbrtowc>>('mbrtowc');
  late final _dart_mbrtowc _mbrtowc = _mbrtowc_ptr.asFunction<_dart_mbrtowc>();

  int mbsrtowcs_s(
    ffi.Pointer<ffi.Uint64> _Retval,
    ffi.Pointer<ffi.Uint16> _Dst,
    int _Size,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _PSrc,
    int _N,
    ffi.Pointer<_Mbstatet> _State,
  ) {
    return _mbsrtowcs_s(
      _Retval,
      _Dst,
      _Size,
      _PSrc,
      _N,
      _State,
    );
  }

  late final _mbsrtowcs_s_ptr =
      _lookup<ffi.NativeFunction<Native_mbsrtowcs_s>>('mbsrtowcs_s');
  late final _dart_mbsrtowcs_s _mbsrtowcs_s =
      _mbsrtowcs_s_ptr.asFunction<_dart_mbsrtowcs_s>();

  int mbsrtowcs(
    ffi.Pointer<ffi.Uint16> _Dest,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _PSrc,
    int _Count,
    ffi.Pointer<_Mbstatet> _State,
  ) {
    return _mbsrtowcs(
      _Dest,
      _PSrc,
      _Count,
      _State,
    );
  }

  late final _mbsrtowcs_ptr =
      _lookup<ffi.NativeFunction<Native_mbsrtowcs>>('mbsrtowcs');
  late final _dart_mbsrtowcs _mbsrtowcs =
      _mbsrtowcs_ptr.asFunction<_dart_mbsrtowcs>();

  int wcrtomb_s(
    ffi.Pointer<ffi.Uint64> _Retval,
    ffi.Pointer<ffi.Int8> _Dst,
    int _SizeInBytes,
    int _Ch,
    ffi.Pointer<_Mbstatet> _State,
  ) {
    return _wcrtomb_s(
      _Retval,
      _Dst,
      _SizeInBytes,
      _Ch,
      _State,
    );
  }

  late final _wcrtomb_s_ptr =
      _lookup<ffi.NativeFunction<Native_wcrtomb_s>>('wcrtomb_s');
  late final _dart_wcrtomb_s _wcrtomb_s =
      _wcrtomb_s_ptr.asFunction<_dart_wcrtomb_s>();

  int wcrtomb(
    ffi.Pointer<ffi.Int8> _Dest,
    int _Source,
    ffi.Pointer<_Mbstatet> _State,
  ) {
    return _wcrtomb(
      _Dest,
      _Source,
      _State,
    );
  }

  late final _wcrtomb_ptr =
      _lookup<ffi.NativeFunction<Native_wcrtomb>>('wcrtomb');
  late final _dart_wcrtomb _wcrtomb = _wcrtomb_ptr.asFunction<_dart_wcrtomb>();

  int wcsrtombs_s(
    ffi.Pointer<ffi.Uint64> _Retval,
    ffi.Pointer<ffi.Int8> _Dst,
    int _SizeInBytes,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Src,
    int _Size,
    ffi.Pointer<_Mbstatet> _State,
  ) {
    return _wcsrtombs_s(
      _Retval,
      _Dst,
      _SizeInBytes,
      _Src,
      _Size,
      _State,
    );
  }

  late final _wcsrtombs_s_ptr =
      _lookup<ffi.NativeFunction<Native_wcsrtombs_s>>('wcsrtombs_s');
  late final _dart_wcsrtombs_s _wcsrtombs_s =
      _wcsrtombs_s_ptr.asFunction<_dart_wcsrtombs_s>();

  int wcsrtombs(
    ffi.Pointer<ffi.Int8> _Dest,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _PSource,
    int _Count,
    ffi.Pointer<_Mbstatet> _State,
  ) {
    return _wcsrtombs(
      _Dest,
      _PSource,
      _Count,
      _State,
    );
  }

  late final _wcsrtombs_ptr =
      _lookup<ffi.NativeFunction<Native_wcsrtombs>>('wcsrtombs');
  late final _dart_wcsrtombs _wcsrtombs =
      _wcsrtombs_ptr.asFunction<_dart_wcsrtombs>();

  int wctob(
    int _WCh,
  ) {
    return _wctob(
      _WCh,
    );
  }

  late final _wctob_ptr = _lookup<ffi.NativeFunction<Native_wctob>>('wctob');
  late final _dart_wctob _wctob = _wctob_ptr.asFunction<_dart_wctob>();

  int wmemcpy_s(
    ffi.Pointer<ffi.Uint16> _S1,
    int _N1,
    ffi.Pointer<ffi.Uint16> _S2,
    int _N,
  ) {
    return _wmemcpy_s(
      _S1,
      _N1,
      _S2,
      _N,
    );
  }

  late final _wmemcpy_s_ptr =
      _lookup<ffi.NativeFunction<Native_wmemcpy_s>>('wmemcpy_s');
  late final _dart_wmemcpy_s _wmemcpy_s =
      _wmemcpy_s_ptr.asFunction<_dart_wmemcpy_s>();

  int wmemmove_s(
    ffi.Pointer<ffi.Uint16> _S1,
    int _N1,
    ffi.Pointer<ffi.Uint16> _S2,
    int _N,
  ) {
    return _wmemmove_s(
      _S1,
      _N1,
      _S2,
      _N,
    );
  }

  late final _wmemmove_s_ptr =
      _lookup<ffi.NativeFunction<Native_wmemmove_s>>('wmemmove_s');
  late final _dart_wmemmove_s _wmemmove_s =
      _wmemmove_s_ptr.asFunction<_dart_wmemmove_s>();

  late final ffi.Pointer<ffi.Int32> __Mbstatet_1 =
      _lookup<ffi.Int32>('_Mbstatet');

  int get _Mbstatet_1 => __Mbstatet_1.value;

  set _Mbstatet_1(int value) => __Mbstatet_1.value = value;

  late final ffi.Pointer<ffi.Int32> ___type_info_root_node =
      _lookup<ffi.Int32>('__type_info_root_node');

  int get __type_info_root_node => ___type_info_root_node.value;

  set __type_info_root_node(int value) => ___type_info_root_node.value = value;

  int __std_type_info_compare(
    ffi.Pointer<__std_type_info_data> _Lhs,
    ffi.Pointer<__std_type_info_data> _Rhs,
  ) {
    return ___std_type_info_compare(
      _Lhs,
      _Rhs,
    );
  }

  late final ___std_type_info_compare_ptr =
      _lookup<ffi.NativeFunction<Native___std_type_info_compare>>(
          '__std_type_info_compare');
  late final _dart___std_type_info_compare ___std_type_info_compare =
      ___std_type_info_compare_ptr.asFunction<_dart___std_type_info_compare>();

  int __std_type_info_hash(
    ffi.Pointer<__std_type_info_data> _Data,
  ) {
    return ___std_type_info_hash(
      _Data,
    );
  }

  late final ___std_type_info_hash_ptr =
      _lookup<ffi.NativeFunction<Native___std_type_info_hash>>(
          '__std_type_info_hash');
  late final _dart___std_type_info_hash ___std_type_info_hash =
      ___std_type_info_hash_ptr.asFunction<_dart___std_type_info_hash>();

  ffi.Pointer<ffi.Int8> __std_type_info_name(
    ffi.Pointer<__std_type_info_data> _Data,
    ffi.Pointer<ffi.Int32> _RootNode,
  ) {
    return ___std_type_info_name(
      _Data,
      _RootNode,
    );
  }

  late final ___std_type_info_name_ptr =
      _lookup<ffi.NativeFunction<Native___std_type_info_name>>(
          '__std_type_info_name');
  late final _dart___std_type_info_name ___std_type_info_name =
      ___std_type_info_name_ptr.asFunction<_dart___std_type_info_name>();

  late final ffi.Pointer<ffi.Int32> _type_info =
      _lookup<ffi.Int32>('type_info');

  int get type_info => _type_info.value;

  set type_info(int value) => _type_info.value = value;

  int _controlfp(
    int _NewValue,
    int _Mask,
  ) {
    return __controlfp(
      _NewValue,
      _Mask,
    );
  }

  late final __controlfp_ptr =
      _lookup<ffi.NativeFunction<Native__controlfp>>('_controlfp');
  late final _dart__controlfp __controlfp =
      __controlfp_ptr.asFunction<_dart__controlfp>();

  void _set_controlfp(
    int _NewValue,
    int _Mask,
  ) {
    return __set_controlfp(
      _NewValue,
      _Mask,
    );
  }

  late final __set_controlfp_ptr =
      _lookup<ffi.NativeFunction<Native__set_controlfp>>('_set_controlfp');
  late final _dart__set_controlfp __set_controlfp =
      __set_controlfp_ptr.asFunction<_dart__set_controlfp>();

  int _controlfp_s(
    ffi.Pointer<ffi.Uint32> _CurrentState,
    int _NewValue,
    int _Mask,
  ) {
    return __controlfp_s(
      _CurrentState,
      _NewValue,
      _Mask,
    );
  }

  late final __controlfp_s_ptr =
      _lookup<ffi.NativeFunction<Native__controlfp_s>>('_controlfp_s');
  late final _dart__controlfp_s __controlfp_s =
      __controlfp_s_ptr.asFunction<_dart__controlfp_s>();

  int _statusfp() {
    return __statusfp();
  }

  late final __statusfp_ptr =
      _lookup<ffi.NativeFunction<Native__statusfp>>('_statusfp');
  late final _dart__statusfp __statusfp =
      __statusfp_ptr.asFunction<_dart__statusfp>();

  void _fpreset() {
    return __fpreset();
  }

  late final __fpreset_ptr =
      _lookup<ffi.NativeFunction<Native__fpreset>>('_fpreset');
  late final _dart__fpreset __fpreset =
      __fpreset_ptr.asFunction<_dart__fpreset>();

  int _control87(
    int _NewValue,
    int _Mask,
  ) {
    return __control87(
      _NewValue,
      _Mask,
    );
  }

  late final __control87_ptr =
      _lookup<ffi.NativeFunction<Native__control87>>('_control87');
  late final _dart__control87 __control87 =
      __control87_ptr.asFunction<_dart__control87>();

  ffi.Pointer<ffi.Int32> __fpecode() {
    return ___fpecode();
  }

  late final ___fpecode_ptr =
      _lookup<ffi.NativeFunction<Native___fpecode>>('__fpecode');
  late final _dart___fpecode ___fpecode =
      ___fpecode_ptr.asFunction<_dart___fpecode>();

  int __fpe_flt_rounds() {
    return ___fpe_flt_rounds();
  }

  late final ___fpe_flt_rounds_ptr =
      _lookup<ffi.NativeFunction<Native___fpe_flt_rounds>>('__fpe_flt_rounds');
  late final _dart___fpe_flt_rounds ___fpe_flt_rounds =
      ___fpe_flt_rounds_ptr.asFunction<_dart___fpe_flt_rounds>();

  double _scalb(
    double _X,
    int _Y,
  ) {
    return __scalb(
      _X,
      _Y,
    );
  }

  late final __scalb_ptr = _lookup<ffi.NativeFunction<Native__scalb>>('_scalb');
  late final _dart__scalb __scalb = __scalb_ptr.asFunction<_dart__scalb>();

  double _logb(
    double _X,
  ) {
    return __logb(
      _X,
    );
  }

  late final __logb_ptr = _lookup<ffi.NativeFunction<Native__logb>>('_logb');
  late final _dart__logb __logb = __logb_ptr.asFunction<_dart__logb>();

  double _nextafter(
    double _X,
    double _Y,
  ) {
    return __nextafter(
      _X,
      _Y,
    );
  }

  late final __nextafter_ptr =
      _lookup<ffi.NativeFunction<Native__nextafter>>('_nextafter');
  late final _dart__nextafter __nextafter =
      __nextafter_ptr.asFunction<_dart__nextafter>();

  int _finite(
    double _X,
  ) {
    return __finite(
      _X,
    );
  }

  late final __finite_ptr =
      _lookup<ffi.NativeFunction<Native__finite>>('_finite');
  late final _dart__finite __finite = __finite_ptr.asFunction<_dart__finite>();

  int _isnan(
    double _X,
  ) {
    return __isnan(
      _X,
    );
  }

  late final __isnan_ptr = _lookup<ffi.NativeFunction<Native__isnan>>('_isnan');
  late final _dart__isnan __isnan = __isnan_ptr.asFunction<_dart__isnan>();

  int _fpclass(
    double _X,
  ) {
    return __fpclass(
      _X,
    );
  }

  late final __fpclass_ptr =
      _lookup<ffi.NativeFunction<Native__fpclass>>('_fpclass');
  late final _dart__fpclass __fpclass =
      __fpclass_ptr.asFunction<_dart__fpclass>();

  double _scalbf(
    double _X,
    int _Y,
  ) {
    return __scalbf(
      _X,
      _Y,
    );
  }

  late final __scalbf_ptr =
      _lookup<ffi.NativeFunction<Native__scalbf>>('_scalbf');
  late final _dart__scalbf __scalbf = __scalbf_ptr.asFunction<_dart__scalbf>();

  void fpreset() {
    return _fpreset_1();
  }

  late final _fpreset_ptr =
      _lookup<ffi.NativeFunction<Native_fpreset>>('fpreset');
  late final _dart_fpreset _fpreset_1 =
      _fpreset_ptr.asFunction<_dart_fpreset>();

  int _BitScanForward(
    ffi.Pointer<ffi.Uint64> _Index,
    int _Mask,
  ) {
    return __BitScanForward(
      _Index,
      _Mask,
    );
  }

  late final __BitScanForward_ptr =
      _lookup<ffi.NativeFunction<Native__BitScanForward>>('_BitScanForward');
  late final _dart__BitScanForward __BitScanForward =
      __BitScanForward_ptr.asFunction<_dart__BitScanForward>();

  int _BitScanForward64(
    ffi.Pointer<ffi.Uint64> _Index,
    int _Mask,
  ) {
    return __BitScanForward64(
      _Index,
      _Mask,
    );
  }

  late final __BitScanForward64_ptr =
      _lookup<ffi.NativeFunction<Native__BitScanForward64>>(
          '_BitScanForward64');
  late final _dart__BitScanForward64 __BitScanForward64 =
      __BitScanForward64_ptr.asFunction<_dart__BitScanForward64>();

  int _BitScanReverse(
    ffi.Pointer<ffi.Uint64> _Index,
    int _Mask,
  ) {
    return __BitScanReverse(
      _Index,
      _Mask,
    );
  }

  late final __BitScanReverse_ptr =
      _lookup<ffi.NativeFunction<Native__BitScanReverse>>('_BitScanReverse');
  late final _dart__BitScanReverse __BitScanReverse =
      __BitScanReverse_ptr.asFunction<_dart__BitScanReverse>();

  int _BitScanReverse64(
    ffi.Pointer<ffi.Uint64> _Index,
    int _Mask,
  ) {
    return __BitScanReverse64(
      _Index,
      _Mask,
    );
  }

  late final __BitScanReverse64_ptr =
      _lookup<ffi.NativeFunction<Native__BitScanReverse64>>(
          '_BitScanReverse64');
  late final _dart__BitScanReverse64 __BitScanReverse64 =
      __BitScanReverse64_ptr.asFunction<_dart__BitScanReverse64>();

  int _bittest(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __bittest(
      arg0,
      arg1,
    );
  }

  late final __bittest_ptr =
      _lookup<ffi.NativeFunction<Native__bittest>>('_bittest');
  late final _dart__bittest __bittest =
      __bittest_ptr.asFunction<_dart__bittest>();

  int _InterlockedAnd(
    ffi.Pointer<ffi.Int64> _Value,
    int _Mask,
  ) {
    return __InterlockedAnd(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedAnd_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedAnd>>('_InterlockedAnd');
  late final _dart__InterlockedAnd __InterlockedAnd =
      __InterlockedAnd_ptr.asFunction<_dart__InterlockedAnd>();

  int _InterlockedAnd16(
    ffi.Pointer<ffi.Int16> _Value,
    int _Mask,
  ) {
    return __InterlockedAnd16(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedAnd16_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedAnd16>>(
          '_InterlockedAnd16');
  late final _dart__InterlockedAnd16 __InterlockedAnd16 =
      __InterlockedAnd16_ptr.asFunction<_dart__InterlockedAnd16>();

  int _InterlockedAnd64(
    ffi.Pointer<ffi.Int64> _Value,
    int _Mask,
  ) {
    return __InterlockedAnd64(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedAnd64_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedAnd64>>(
          '_InterlockedAnd64');
  late final _dart__InterlockedAnd64 __InterlockedAnd64 =
      __InterlockedAnd64_ptr.asFunction<_dart__InterlockedAnd64>();

  int _InterlockedAnd8(
    ffi.Pointer<ffi.Int8> _Value,
    int _Mask,
  ) {
    return __InterlockedAnd8(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedAnd8_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedAnd8>>('_InterlockedAnd8');
  late final _dart__InterlockedAnd8 __InterlockedAnd8 =
      __InterlockedAnd8_ptr.asFunction<_dart__InterlockedAnd8>();

  int _InterlockedCompareExchange(
    ffi.Pointer<ffi.Int64> _Destination,
    int _Exchange,
    int _Comparand,
  ) {
    return __InterlockedCompareExchange(
      _Destination,
      _Exchange,
      _Comparand,
    );
  }

  late final __InterlockedCompareExchange_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedCompareExchange>>(
          '_InterlockedCompareExchange');
  late final _dart__InterlockedCompareExchange __InterlockedCompareExchange =
      __InterlockedCompareExchange_ptr
          .asFunction<_dart__InterlockedCompareExchange>();

  int _InterlockedCompareExchange16(
    ffi.Pointer<ffi.Int16> _Destination,
    int _Exchange,
    int _Comparand,
  ) {
    return __InterlockedCompareExchange16(
      _Destination,
      _Exchange,
      _Comparand,
    );
  }

  late final __InterlockedCompareExchange16_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedCompareExchange16>>(
          '_InterlockedCompareExchange16');
  late final _dart__InterlockedCompareExchange16
      __InterlockedCompareExchange16 = __InterlockedCompareExchange16_ptr
          .asFunction<_dart__InterlockedCompareExchange16>();

  int _InterlockedCompareExchange64(
    ffi.Pointer<ffi.Int64> _Destination,
    int _Exchange,
    int _Comparand,
  ) {
    return __InterlockedCompareExchange64(
      _Destination,
      _Exchange,
      _Comparand,
    );
  }

  late final __InterlockedCompareExchange64_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedCompareExchange64>>(
          '_InterlockedCompareExchange64');
  late final _dart__InterlockedCompareExchange64
      __InterlockedCompareExchange64 = __InterlockedCompareExchange64_ptr
          .asFunction<_dart__InterlockedCompareExchange64>();

  int _InterlockedCompareExchange8(
    ffi.Pointer<ffi.Int8> _Destination,
    int _Exchange,
    int _Comparand,
  ) {
    return __InterlockedCompareExchange8(
      _Destination,
      _Exchange,
      _Comparand,
    );
  }

  late final __InterlockedCompareExchange8_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedCompareExchange8>>(
          '_InterlockedCompareExchange8');
  late final _dart__InterlockedCompareExchange8 __InterlockedCompareExchange8 =
      __InterlockedCompareExchange8_ptr
          .asFunction<_dart__InterlockedCompareExchange8>();

  int _InterlockedCompareExchange128(
    ffi.Pointer<ffi.Int64> _Destination,
    int _ExchangeHigh,
    int _ExchangeLow,
    ffi.Pointer<ffi.Int64> _ComparandResult,
  ) {
    return __InterlockedCompareExchange128(
      _Destination,
      _ExchangeHigh,
      _ExchangeLow,
      _ComparandResult,
    );
  }

  late final __InterlockedCompareExchange128_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedCompareExchange128>>(
          '_InterlockedCompareExchange128');
  late final _dart__InterlockedCompareExchange128
      __InterlockedCompareExchange128 = __InterlockedCompareExchange128_ptr
          .asFunction<_dart__InterlockedCompareExchange128>();

  int _InterlockedDecrement(
    ffi.Pointer<ffi.Int64> _Addend,
  ) {
    return __InterlockedDecrement(
      _Addend,
    );
  }

  late final __InterlockedDecrement_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedDecrement>>(
          '_InterlockedDecrement');
  late final _dart__InterlockedDecrement __InterlockedDecrement =
      __InterlockedDecrement_ptr.asFunction<_dart__InterlockedDecrement>();

  int _InterlockedDecrement16(
    ffi.Pointer<ffi.Int16> _Addend,
  ) {
    return __InterlockedDecrement16(
      _Addend,
    );
  }

  late final __InterlockedDecrement16_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedDecrement16>>(
          '_InterlockedDecrement16');
  late final _dart__InterlockedDecrement16 __InterlockedDecrement16 =
      __InterlockedDecrement16_ptr.asFunction<_dart__InterlockedDecrement16>();

  int _InterlockedDecrement64(
    ffi.Pointer<ffi.Int64> _Addend,
  ) {
    return __InterlockedDecrement64(
      _Addend,
    );
  }

  late final __InterlockedDecrement64_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedDecrement64>>(
          '_InterlockedDecrement64');
  late final _dart__InterlockedDecrement64 __InterlockedDecrement64 =
      __InterlockedDecrement64_ptr.asFunction<_dart__InterlockedDecrement64>();

  int _InterlockedExchange(
    ffi.Pointer<ffi.Int64> _Target,
    int _Value,
  ) {
    return __InterlockedExchange(
      _Target,
      _Value,
    );
  }

  late final __InterlockedExchange_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchange>>(
          '_InterlockedExchange');
  late final _dart__InterlockedExchange __InterlockedExchange =
      __InterlockedExchange_ptr.asFunction<_dart__InterlockedExchange>();

  int _InterlockedExchange16(
    ffi.Pointer<ffi.Int16> _Target,
    int _Value,
  ) {
    return __InterlockedExchange16(
      _Target,
      _Value,
    );
  }

  late final __InterlockedExchange16_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchange16>>(
          '_InterlockedExchange16');
  late final _dart__InterlockedExchange16 __InterlockedExchange16 =
      __InterlockedExchange16_ptr.asFunction<_dart__InterlockedExchange16>();

  int _InterlockedExchange64(
    ffi.Pointer<ffi.Int64> _Target,
    int _Value,
  ) {
    return __InterlockedExchange64(
      _Target,
      _Value,
    );
  }

  late final __InterlockedExchange64_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchange64>>(
          '_InterlockedExchange64');
  late final _dart__InterlockedExchange64 __InterlockedExchange64 =
      __InterlockedExchange64_ptr.asFunction<_dart__InterlockedExchange64>();

  int _InterlockedExchange8(
    ffi.Pointer<ffi.Int8> _Target,
    int _Value,
  ) {
    return __InterlockedExchange8(
      _Target,
      _Value,
    );
  }

  late final __InterlockedExchange8_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchange8>>(
          '_InterlockedExchange8');
  late final _dart__InterlockedExchange8 __InterlockedExchange8 =
      __InterlockedExchange8_ptr.asFunction<_dart__InterlockedExchange8>();

  int _InterlockedExchangeAdd(
    ffi.Pointer<ffi.Int64> _Addend,
    int _Value,
  ) {
    return __InterlockedExchangeAdd(
      _Addend,
      _Value,
    );
  }

  late final __InterlockedExchangeAdd_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchangeAdd>>(
          '_InterlockedExchangeAdd');
  late final _dart__InterlockedExchangeAdd __InterlockedExchangeAdd =
      __InterlockedExchangeAdd_ptr.asFunction<_dart__InterlockedExchangeAdd>();

  int _InterlockedExchangeAdd16(
    ffi.Pointer<ffi.Int16> _Addend,
    int _Value,
  ) {
    return __InterlockedExchangeAdd16(
      _Addend,
      _Value,
    );
  }

  late final __InterlockedExchangeAdd16_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchangeAdd16>>(
          '_InterlockedExchangeAdd16');
  late final _dart__InterlockedExchangeAdd16 __InterlockedExchangeAdd16 =
      __InterlockedExchangeAdd16_ptr
          .asFunction<_dart__InterlockedExchangeAdd16>();

  int _InterlockedExchangeAdd64(
    ffi.Pointer<ffi.Int64> _Addend,
    int _Value,
  ) {
    return __InterlockedExchangeAdd64(
      _Addend,
      _Value,
    );
  }

  late final __InterlockedExchangeAdd64_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchangeAdd64>>(
          '_InterlockedExchangeAdd64');
  late final _dart__InterlockedExchangeAdd64 __InterlockedExchangeAdd64 =
      __InterlockedExchangeAdd64_ptr
          .asFunction<_dart__InterlockedExchangeAdd64>();

  int _InterlockedExchangeAdd8(
    ffi.Pointer<ffi.Int8> _Addend,
    int _Value,
  ) {
    return __InterlockedExchangeAdd8(
      _Addend,
      _Value,
    );
  }

  late final __InterlockedExchangeAdd8_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchangeAdd8>>(
          '_InterlockedExchangeAdd8');
  late final _dart__InterlockedExchangeAdd8 __InterlockedExchangeAdd8 =
      __InterlockedExchangeAdd8_ptr
          .asFunction<_dart__InterlockedExchangeAdd8>();

  int _InterlockedIncrement(
    ffi.Pointer<ffi.Int64> _Addend,
  ) {
    return __InterlockedIncrement(
      _Addend,
    );
  }

  late final __InterlockedIncrement_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedIncrement>>(
          '_InterlockedIncrement');
  late final _dart__InterlockedIncrement __InterlockedIncrement =
      __InterlockedIncrement_ptr.asFunction<_dart__InterlockedIncrement>();

  int _InterlockedIncrement16(
    ffi.Pointer<ffi.Int16> _Addend,
  ) {
    return __InterlockedIncrement16(
      _Addend,
    );
  }

  late final __InterlockedIncrement16_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedIncrement16>>(
          '_InterlockedIncrement16');
  late final _dart__InterlockedIncrement16 __InterlockedIncrement16 =
      __InterlockedIncrement16_ptr.asFunction<_dart__InterlockedIncrement16>();

  int _InterlockedIncrement64(
    ffi.Pointer<ffi.Int64> _Addend,
  ) {
    return __InterlockedIncrement64(
      _Addend,
    );
  }

  late final __InterlockedIncrement64_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedIncrement64>>(
          '_InterlockedIncrement64');
  late final _dart__InterlockedIncrement64 __InterlockedIncrement64 =
      __InterlockedIncrement64_ptr.asFunction<_dart__InterlockedIncrement64>();

  int _InterlockedOr(
    ffi.Pointer<ffi.Int64> _Value,
    int _Mask,
  ) {
    return __InterlockedOr(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedOr_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedOr>>('_InterlockedOr');
  late final _dart__InterlockedOr __InterlockedOr =
      __InterlockedOr_ptr.asFunction<_dart__InterlockedOr>();

  int _InterlockedOr16(
    ffi.Pointer<ffi.Int16> _Value,
    int _Mask,
  ) {
    return __InterlockedOr16(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedOr16_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedOr16>>('_InterlockedOr16');
  late final _dart__InterlockedOr16 __InterlockedOr16 =
      __InterlockedOr16_ptr.asFunction<_dart__InterlockedOr16>();

  int _InterlockedOr64(
    ffi.Pointer<ffi.Int64> _Value,
    int _Mask,
  ) {
    return __InterlockedOr64(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedOr64_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedOr64>>('_InterlockedOr64');
  late final _dart__InterlockedOr64 __InterlockedOr64 =
      __InterlockedOr64_ptr.asFunction<_dart__InterlockedOr64>();

  int _InterlockedOr8(
    ffi.Pointer<ffi.Int8> _Value,
    int _Mask,
  ) {
    return __InterlockedOr8(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedOr8_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedOr8>>('_InterlockedOr8');
  late final _dart__InterlockedOr8 __InterlockedOr8 =
      __InterlockedOr8_ptr.asFunction<_dart__InterlockedOr8>();

  int _InterlockedXor(
    ffi.Pointer<ffi.Int64> _Value,
    int _Mask,
  ) {
    return __InterlockedXor(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedXor_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedXor>>('_InterlockedXor');
  late final _dart__InterlockedXor __InterlockedXor =
      __InterlockedXor_ptr.asFunction<_dart__InterlockedXor>();

  int _InterlockedXor16(
    ffi.Pointer<ffi.Int16> _Value,
    int _Mask,
  ) {
    return __InterlockedXor16(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedXor16_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedXor16>>(
          '_InterlockedXor16');
  late final _dart__InterlockedXor16 __InterlockedXor16 =
      __InterlockedXor16_ptr.asFunction<_dart__InterlockedXor16>();

  int _InterlockedXor64(
    ffi.Pointer<ffi.Int64> _Value,
    int _Mask,
  ) {
    return __InterlockedXor64(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedXor64_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedXor64>>(
          '_InterlockedXor64');
  late final _dart__InterlockedXor64 __InterlockedXor64 =
      __InterlockedXor64_ptr.asFunction<_dart__InterlockedXor64>();

  int _InterlockedXor8(
    ffi.Pointer<ffi.Int8> _Value,
    int _Mask,
  ) {
    return __InterlockedXor8(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedXor8_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedXor8>>('_InterlockedXor8');
  late final _dart__InterlockedXor8 __InterlockedXor8 =
      __InterlockedXor8_ptr.asFunction<_dart__InterlockedXor8>();

  void _ReadWriteBarrier() {
    return __ReadWriteBarrier();
  }

  late final __ReadWriteBarrier_ptr =
      _lookup<ffi.NativeFunction<Native__ReadWriteBarrier>>(
          '_ReadWriteBarrier');
  late final _dart__ReadWriteBarrier __ReadWriteBarrier =
      __ReadWriteBarrier_ptr.asFunction<_dart__ReadWriteBarrier>();

  int __iso_volatile_load16(
    ffi.Pointer<ffi.Int16> arg0,
  ) {
    return ___iso_volatile_load16(
      arg0,
    );
  }

  late final ___iso_volatile_load16_ptr =
      _lookup<ffi.NativeFunction<Native___iso_volatile_load16>>(
          '__iso_volatile_load16');
  late final _dart___iso_volatile_load16 ___iso_volatile_load16 =
      ___iso_volatile_load16_ptr.asFunction<_dart___iso_volatile_load16>();

  int __iso_volatile_load32(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return ___iso_volatile_load32(
      arg0,
    );
  }

  late final ___iso_volatile_load32_ptr =
      _lookup<ffi.NativeFunction<Native___iso_volatile_load32>>(
          '__iso_volatile_load32');
  late final _dart___iso_volatile_load32 ___iso_volatile_load32 =
      ___iso_volatile_load32_ptr.asFunction<_dart___iso_volatile_load32>();

  int __iso_volatile_load64(
    ffi.Pointer<ffi.Int64> arg0,
  ) {
    return ___iso_volatile_load64(
      arg0,
    );
  }

  late final ___iso_volatile_load64_ptr =
      _lookup<ffi.NativeFunction<Native___iso_volatile_load64>>(
          '__iso_volatile_load64');
  late final _dart___iso_volatile_load64 ___iso_volatile_load64 =
      ___iso_volatile_load64_ptr.asFunction<_dart___iso_volatile_load64>();

  int __iso_volatile_load8(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return ___iso_volatile_load8(
      arg0,
    );
  }

  late final ___iso_volatile_load8_ptr =
      _lookup<ffi.NativeFunction<Native___iso_volatile_load8>>(
          '__iso_volatile_load8');
  late final _dart___iso_volatile_load8 ___iso_volatile_load8 =
      ___iso_volatile_load8_ptr.asFunction<_dart___iso_volatile_load8>();

  void __iso_volatile_store16(
    ffi.Pointer<ffi.Int16> arg0,
    int arg1,
  ) {
    return ___iso_volatile_store16(
      arg0,
      arg1,
    );
  }

  late final ___iso_volatile_store16_ptr =
      _lookup<ffi.NativeFunction<Native___iso_volatile_store16>>(
          '__iso_volatile_store16');
  late final _dart___iso_volatile_store16 ___iso_volatile_store16 =
      ___iso_volatile_store16_ptr.asFunction<_dart___iso_volatile_store16>();

  void __iso_volatile_store32(
    ffi.Pointer<ffi.Int32> arg0,
    int arg1,
  ) {
    return ___iso_volatile_store32(
      arg0,
      arg1,
    );
  }

  late final ___iso_volatile_store32_ptr =
      _lookup<ffi.NativeFunction<Native___iso_volatile_store32>>(
          '__iso_volatile_store32');
  late final _dart___iso_volatile_store32 ___iso_volatile_store32 =
      ___iso_volatile_store32_ptr.asFunction<_dart___iso_volatile_store32>();

  void __iso_volatile_store64(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return ___iso_volatile_store64(
      arg0,
      arg1,
    );
  }

  late final ___iso_volatile_store64_ptr =
      _lookup<ffi.NativeFunction<Native___iso_volatile_store64>>(
          '__iso_volatile_store64');
  late final _dart___iso_volatile_store64 ___iso_volatile_store64 =
      ___iso_volatile_store64_ptr.asFunction<_dart___iso_volatile_store64>();

  void __iso_volatile_store8(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return ___iso_volatile_store8(
      arg0,
      arg1,
    );
  }

  late final ___iso_volatile_store8_ptr =
      _lookup<ffi.NativeFunction<Native___iso_volatile_store8>>(
          '__iso_volatile_store8');
  late final _dart___iso_volatile_store8 ___iso_volatile_store8 =
      ___iso_volatile_store8_ptr.asFunction<_dart___iso_volatile_store8>();

  int _interlockedbittestandset(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __interlockedbittestandset(
      arg0,
      arg1,
    );
  }

  late final __interlockedbittestandset_ptr =
      _lookup<ffi.NativeFunction<Native__interlockedbittestandset>>(
          '_interlockedbittestandset');
  late final _dart__interlockedbittestandset __interlockedbittestandset =
      __interlockedbittestandset_ptr
          .asFunction<_dart__interlockedbittestandset>();

  int __lzcnt(
    int arg0,
  ) {
    return ___lzcnt(
      arg0,
    );
  }

  late final ___lzcnt_ptr =
      _lookup<ffi.NativeFunction<Native___lzcnt>>('__lzcnt');
  late final _dart___lzcnt ___lzcnt = ___lzcnt_ptr.asFunction<_dart___lzcnt>();

  int __lzcnt16(
    int arg0,
  ) {
    return ___lzcnt16(
      arg0,
    );
  }

  late final ___lzcnt16_ptr =
      _lookup<ffi.NativeFunction<Native___lzcnt16>>('__lzcnt16');
  late final _dart___lzcnt16 ___lzcnt16 =
      ___lzcnt16_ptr.asFunction<_dart___lzcnt16>();

  int __lzcnt64(
    int arg0,
  ) {
    return ___lzcnt64(
      arg0,
    );
  }

  late final ___lzcnt64_ptr =
      _lookup<ffi.NativeFunction<Native___lzcnt64>>('__lzcnt64');
  late final _dart___lzcnt64 ___lzcnt64 =
      ___lzcnt64_ptr.asFunction<_dart___lzcnt64>();

  int __popcnt(
    int arg0,
  ) {
    return ___popcnt(
      arg0,
    );
  }

  late final ___popcnt_ptr =
      _lookup<ffi.NativeFunction<Native___popcnt>>('__popcnt');
  late final _dart___popcnt ___popcnt =
      ___popcnt_ptr.asFunction<_dart___popcnt>();

  int __popcnt16(
    int arg0,
  ) {
    return ___popcnt16(
      arg0,
    );
  }

  late final ___popcnt16_ptr =
      _lookup<ffi.NativeFunction<Native___popcnt16>>('__popcnt16');
  late final _dart___popcnt16 ___popcnt16 =
      ___popcnt16_ptr.asFunction<_dart___popcnt16>();

  int __popcnt64(
    int arg0,
  ) {
    return ___popcnt64(
      arg0,
    );
  }

  late final ___popcnt64_ptr =
      _lookup<ffi.NativeFunction<Native___popcnt64>>('__popcnt64');
  late final _dart___popcnt64 ___popcnt64 =
      ___popcnt64_ptr.asFunction<_dart___popcnt64>();

  int __shiftright128(
    int _LowPart,
    int _HighPart,
    int _Shift,
  ) {
    return ___shiftright128(
      _LowPart,
      _HighPart,
      _Shift,
    );
  }

  late final ___shiftright128_ptr =
      _lookup<ffi.NativeFunction<Native___shiftright128>>('__shiftright128');
  late final _dart___shiftright128 ___shiftright128 =
      ___shiftright128_ptr.asFunction<_dart___shiftright128>();

  int _umul128(
    int _Multiplier,
    int _Multiplicand,
    ffi.Pointer<ffi.Uint64> _HighProduct,
  ) {
    return __umul128(
      _Multiplier,
      _Multiplicand,
      _HighProduct,
    );
  }

  late final __umul128_ptr =
      _lookup<ffi.NativeFunction<Native__umul128>>('_umul128');
  late final _dart__umul128 __umul128 =
      __umul128_ptr.asFunction<_dart__umul128>();

  double __ceil(
    double arg0,
  ) {
    return ___ceil(
      arg0,
    );
  }

  late final ___ceil_ptr = _lookup<ffi.NativeFunction<Native___ceil>>('__ceil');
  late final _dart___ceil ___ceil = ___ceil_ptr.asFunction<_dart___ceil>();

  double __ceilf(
    double arg0,
  ) {
    return ___ceilf(
      arg0,
    );
  }

  late final ___ceilf_ptr =
      _lookup<ffi.NativeFunction<Native___ceilf>>('__ceilf');
  late final _dart___ceilf ___ceilf = ___ceilf_ptr.asFunction<_dart___ceilf>();

  double __floor(
    double arg0,
  ) {
    return ___floor(
      arg0,
    );
  }

  late final ___floor_ptr =
      _lookup<ffi.NativeFunction<Native___floor>>('__floor');
  late final _dart___floor ___floor = ___floor_ptr.asFunction<_dart___floor>();

  double __floorf(
    double arg0,
  ) {
    return ___floorf(
      arg0,
    );
  }

  late final ___floorf_ptr =
      _lookup<ffi.NativeFunction<Native___floorf>>('__floorf');
  late final _dart___floorf ___floorf =
      ___floorf_ptr.asFunction<_dart___floorf>();

  double __round(
    double arg0,
  ) {
    return ___round(
      arg0,
    );
  }

  late final ___round_ptr =
      _lookup<ffi.NativeFunction<Native___round>>('__round');
  late final _dart___round ___round = ___round_ptr.asFunction<_dart___round>();

  double __roundf(
    double arg0,
  ) {
    return ___roundf(
      arg0,
    );
  }

  late final ___roundf_ptr =
      _lookup<ffi.NativeFunction<Native___roundf>>('__roundf');
  late final _dart___roundf ___roundf =
      ___roundf_ptr.asFunction<_dart___roundf>();

  double __trunc(
    double arg0,
  ) {
    return ___trunc(
      arg0,
    );
  }

  late final ___trunc_ptr =
      _lookup<ffi.NativeFunction<Native___trunc>>('__trunc');
  late final _dart___trunc ___trunc = ___trunc_ptr.asFunction<_dart___trunc>();

  double __truncf(
    double arg0,
  ) {
    return ___truncf(
      arg0,
    );
  }

  late final ___truncf_ptr =
      _lookup<ffi.NativeFunction<Native___truncf>>('__truncf');
  late final _dart___truncf ___truncf =
      ___truncf_ptr.asFunction<_dart___truncf>();

  double __copysign(
    double arg0,
    double arg1,
  ) {
    return ___copysign(
      arg0,
      arg1,
    );
  }

  late final ___copysign_ptr =
      _lookup<ffi.NativeFunction<Native___copysign>>('__copysign');
  late final _dart___copysign ___copysign =
      ___copysign_ptr.asFunction<_dart___copysign>();

  double __copysignf(
    double arg0,
    double arg1,
  ) {
    return ___copysignf(
      arg0,
      arg1,
    );
  }

  late final ___copysignf_ptr =
      _lookup<ffi.NativeFunction<Native___copysignf>>('__copysignf');
  late final _dart___copysignf ___copysignf =
      ___copysignf_ptr.asFunction<_dart___copysignf>();

  int __signbitvalue(
    double arg0,
  ) {
    return ___signbitvalue(
      arg0,
    );
  }

  late final ___signbitvalue_ptr =
      _lookup<ffi.NativeFunction<Native___signbitvalue>>('__signbitvalue');
  late final _dart___signbitvalue ___signbitvalue =
      ___signbitvalue_ptr.asFunction<_dart___signbitvalue>();

  int __signbitvaluef(
    double arg0,
  ) {
    return ___signbitvaluef(
      arg0,
    );
  }

  late final ___signbitvaluef_ptr =
      _lookup<ffi.NativeFunction<Native___signbitvaluef>>('__signbitvaluef');
  late final _dart___signbitvaluef ___signbitvaluef =
      ___signbitvaluef_ptr.asFunction<_dart___signbitvaluef>();

  int _isctype_l(
    int _C,
    int _Type,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __isctype_l(
      _C,
      _Type,
      _Locale,
    );
  }

  late final __isctype_l_ptr =
      _lookup<ffi.NativeFunction<Native__isctype_l>>('_isctype_l');
  late final _dart__isctype_l __isctype_l =
      __isctype_l_ptr.asFunction<_dart__isctype_l>();

  int isalpha(
    int _C,
  ) {
    return _isalpha(
      _C,
    );
  }

  late final _isalpha_ptr =
      _lookup<ffi.NativeFunction<Native_isalpha>>('isalpha');
  late final _dart_isalpha _isalpha = _isalpha_ptr.asFunction<_dart_isalpha>();

  int _isalpha_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __isalpha_l(
      _C,
      _Locale,
    );
  }

  late final __isalpha_l_ptr =
      _lookup<ffi.NativeFunction<Native__isalpha_l>>('_isalpha_l');
  late final _dart__isalpha_l __isalpha_l =
      __isalpha_l_ptr.asFunction<_dart__isalpha_l>();

  int isupper(
    int _C,
  ) {
    return _isupper(
      _C,
    );
  }

  late final _isupper_ptr =
      _lookup<ffi.NativeFunction<Native_isupper>>('isupper');
  late final _dart_isupper _isupper = _isupper_ptr.asFunction<_dart_isupper>();

  int _isupper_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __isupper_l(
      _C,
      _Locale,
    );
  }

  late final __isupper_l_ptr =
      _lookup<ffi.NativeFunction<Native__isupper_l>>('_isupper_l');
  late final _dart__isupper_l __isupper_l =
      __isupper_l_ptr.asFunction<_dart__isupper_l>();

  int islower(
    int _C,
  ) {
    return _islower(
      _C,
    );
  }

  late final _islower_ptr =
      _lookup<ffi.NativeFunction<Native_islower>>('islower');
  late final _dart_islower _islower = _islower_ptr.asFunction<_dart_islower>();

  int _islower_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __islower_l(
      _C,
      _Locale,
    );
  }

  late final __islower_l_ptr =
      _lookup<ffi.NativeFunction<Native__islower_l>>('_islower_l');
  late final _dart__islower_l __islower_l =
      __islower_l_ptr.asFunction<_dart__islower_l>();

  int isdigit(
    int _C,
  ) {
    return _isdigit(
      _C,
    );
  }

  late final _isdigit_ptr =
      _lookup<ffi.NativeFunction<Native_isdigit>>('isdigit');
  late final _dart_isdigit _isdigit = _isdigit_ptr.asFunction<_dart_isdigit>();

  int _isdigit_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __isdigit_l(
      _C,
      _Locale,
    );
  }

  late final __isdigit_l_ptr =
      _lookup<ffi.NativeFunction<Native__isdigit_l>>('_isdigit_l');
  late final _dart__isdigit_l __isdigit_l =
      __isdigit_l_ptr.asFunction<_dart__isdigit_l>();

  int isxdigit(
    int _C,
  ) {
    return _isxdigit(
      _C,
    );
  }

  late final _isxdigit_ptr =
      _lookup<ffi.NativeFunction<Native_isxdigit>>('isxdigit');
  late final _dart_isxdigit _isxdigit =
      _isxdigit_ptr.asFunction<_dart_isxdigit>();

  int _isxdigit_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __isxdigit_l(
      _C,
      _Locale,
    );
  }

  late final __isxdigit_l_ptr =
      _lookup<ffi.NativeFunction<Native__isxdigit_l>>('_isxdigit_l');
  late final _dart__isxdigit_l __isxdigit_l =
      __isxdigit_l_ptr.asFunction<_dart__isxdigit_l>();

  int isspace(
    int _C,
  ) {
    return _isspace(
      _C,
    );
  }

  late final _isspace_ptr =
      _lookup<ffi.NativeFunction<Native_isspace>>('isspace');
  late final _dart_isspace _isspace = _isspace_ptr.asFunction<_dart_isspace>();

  int _isspace_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __isspace_l(
      _C,
      _Locale,
    );
  }

  late final __isspace_l_ptr =
      _lookup<ffi.NativeFunction<Native__isspace_l>>('_isspace_l');
  late final _dart__isspace_l __isspace_l =
      __isspace_l_ptr.asFunction<_dart__isspace_l>();

  int ispunct(
    int _C,
  ) {
    return _ispunct(
      _C,
    );
  }

  late final _ispunct_ptr =
      _lookup<ffi.NativeFunction<Native_ispunct>>('ispunct');
  late final _dart_ispunct _ispunct = _ispunct_ptr.asFunction<_dart_ispunct>();

  int _ispunct_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __ispunct_l(
      _C,
      _Locale,
    );
  }

  late final __ispunct_l_ptr =
      _lookup<ffi.NativeFunction<Native__ispunct_l>>('_ispunct_l');
  late final _dart__ispunct_l __ispunct_l =
      __ispunct_l_ptr.asFunction<_dart__ispunct_l>();

  int isblank(
    int _C,
  ) {
    return _isblank(
      _C,
    );
  }

  late final _isblank_ptr =
      _lookup<ffi.NativeFunction<Native_isblank>>('isblank');
  late final _dart_isblank _isblank = _isblank_ptr.asFunction<_dart_isblank>();

  int _isblank_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __isblank_l(
      _C,
      _Locale,
    );
  }

  late final __isblank_l_ptr =
      _lookup<ffi.NativeFunction<Native__isblank_l>>('_isblank_l');
  late final _dart__isblank_l __isblank_l =
      __isblank_l_ptr.asFunction<_dart__isblank_l>();

  int isalnum(
    int _C,
  ) {
    return _isalnum(
      _C,
    );
  }

  late final _isalnum_ptr =
      _lookup<ffi.NativeFunction<Native_isalnum>>('isalnum');
  late final _dart_isalnum _isalnum = _isalnum_ptr.asFunction<_dart_isalnum>();

  int _isalnum_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __isalnum_l(
      _C,
      _Locale,
    );
  }

  late final __isalnum_l_ptr =
      _lookup<ffi.NativeFunction<Native__isalnum_l>>('_isalnum_l');
  late final _dart__isalnum_l __isalnum_l =
      __isalnum_l_ptr.asFunction<_dart__isalnum_l>();

  int isprint(
    int _C,
  ) {
    return _isprint(
      _C,
    );
  }

  late final _isprint_ptr =
      _lookup<ffi.NativeFunction<Native_isprint>>('isprint');
  late final _dart_isprint _isprint = _isprint_ptr.asFunction<_dart_isprint>();

  int _isprint_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __isprint_l(
      _C,
      _Locale,
    );
  }

  late final __isprint_l_ptr =
      _lookup<ffi.NativeFunction<Native__isprint_l>>('_isprint_l');
  late final _dart__isprint_l __isprint_l =
      __isprint_l_ptr.asFunction<_dart__isprint_l>();

  int isgraph(
    int _C,
  ) {
    return _isgraph(
      _C,
    );
  }

  late final _isgraph_ptr =
      _lookup<ffi.NativeFunction<Native_isgraph>>('isgraph');
  late final _dart_isgraph _isgraph = _isgraph_ptr.asFunction<_dart_isgraph>();

  int _isgraph_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __isgraph_l(
      _C,
      _Locale,
    );
  }

  late final __isgraph_l_ptr =
      _lookup<ffi.NativeFunction<Native__isgraph_l>>('_isgraph_l');
  late final _dart__isgraph_l __isgraph_l =
      __isgraph_l_ptr.asFunction<_dart__isgraph_l>();

  int iscntrl(
    int _C,
  ) {
    return _iscntrl(
      _C,
    );
  }

  late final _iscntrl_ptr =
      _lookup<ffi.NativeFunction<Native_iscntrl>>('iscntrl');
  late final _dart_iscntrl _iscntrl = _iscntrl_ptr.asFunction<_dart_iscntrl>();

  int _iscntrl_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __iscntrl_l(
      _C,
      _Locale,
    );
  }

  late final __iscntrl_l_ptr =
      _lookup<ffi.NativeFunction<Native__iscntrl_l>>('_iscntrl_l');
  late final _dart__iscntrl_l __iscntrl_l =
      __iscntrl_l_ptr.asFunction<_dart__iscntrl_l>();

  int toupper(
    int _C,
  ) {
    return _toupper_1(
      _C,
    );
  }

  late final _toupper_ptr =
      _lookup<ffi.NativeFunction<Native_toupper>>('toupper');
  late final _dart_toupper _toupper_1 =
      _toupper_ptr.asFunction<_dart_toupper>();

  int tolower(
    int _C,
  ) {
    return _tolower_1(
      _C,
    );
  }

  late final _tolower_ptr =
      _lookup<ffi.NativeFunction<Native_tolower>>('tolower');
  late final _dart_tolower _tolower_1 =
      _tolower_ptr.asFunction<_dart_tolower>();

  int _tolower(
    int _C,
  ) {
    return __tolower(
      _C,
    );
  }

  late final __tolower_ptr =
      _lookup<ffi.NativeFunction<Native__tolower>>('_tolower');
  late final _dart__tolower __tolower =
      __tolower_ptr.asFunction<_dart__tolower>();

  int _tolower_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __tolower_l(
      _C,
      _Locale,
    );
  }

  late final __tolower_l_ptr =
      _lookup<ffi.NativeFunction<Native__tolower_l>>('_tolower_l');
  late final _dart__tolower_l __tolower_l =
      __tolower_l_ptr.asFunction<_dart__tolower_l>();

  int _toupper(
    int _C,
  ) {
    return __toupper(
      _C,
    );
  }

  late final __toupper_ptr =
      _lookup<ffi.NativeFunction<Native__toupper>>('_toupper');
  late final _dart__toupper __toupper =
      __toupper_ptr.asFunction<_dart__toupper>();

  int _toupper_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __toupper_l(
      _C,
      _Locale,
    );
  }

  late final __toupper_l_ptr =
      _lookup<ffi.NativeFunction<Native__toupper_l>>('_toupper_l');
  late final _dart__toupper_l __toupper_l =
      __toupper_l_ptr.asFunction<_dart__toupper_l>();

  int __isascii(
    int _C,
  ) {
    return ___isascii(
      _C,
    );
  }

  late final ___isascii_ptr =
      _lookup<ffi.NativeFunction<Native___isascii>>('__isascii');
  late final _dart___isascii ___isascii =
      ___isascii_ptr.asFunction<_dart___isascii>();

  int __toascii(
    int _C,
  ) {
    return ___toascii(
      _C,
    );
  }

  late final ___toascii_ptr =
      _lookup<ffi.NativeFunction<Native___toascii>>('__toascii');
  late final _dart___toascii ___toascii =
      ___toascii_ptr.asFunction<_dart___toascii>();

  int __iscsymf(
    int _C,
  ) {
    return ___iscsymf(
      _C,
    );
  }

  late final ___iscsymf_ptr =
      _lookup<ffi.NativeFunction<Native___iscsymf>>('__iscsymf');
  late final _dart___iscsymf ___iscsymf =
      ___iscsymf_ptr.asFunction<_dart___iscsymf>();

  int __iscsym(
    int _C,
  ) {
    return ___iscsym(
      _C,
    );
  }

  late final ___iscsym_ptr =
      _lookup<ffi.NativeFunction<Native___iscsym>>('__iscsym');
  late final _dart___iscsym ___iscsym =
      ___iscsym_ptr.asFunction<_dart___iscsym>();

  late final ffi.Pointer<ffi.Int32> _net = _lookup<ffi.Int32>('net');

  int get net => _net.value;

  set net(int value) => _net.value = value;

  /// ////////////////////
  late final ffi.Pointer<ffi.Int32> _Cronet_BufferPtr =
      _lookup<ffi.Int32>('Cronet_BufferPtr');

  int get Cronet_BufferPtr => _Cronet_BufferPtr.value;

  set Cronet_BufferPtr(int value) => _Cronet_BufferPtr.value = value;

  int Cronet_Buffer_Destroy(
    ffi.Pointer<Cronet_Buffer> self,
  ) {
    return _Cronet_Buffer_Destroy(
      self,
    );
  }

  late final _Cronet_Buffer_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Buffer_Destroy>>(
          'Cronet_Buffer_Destroy');
  late final _dart_Cronet_Buffer_Destroy _Cronet_Buffer_Destroy =
      _Cronet_Buffer_Destroy_ptr.asFunction<_dart_Cronet_Buffer_Destroy>();

  int Cronet_Buffer_SetClientContext(
    ffi.Pointer<Cronet_Buffer> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_Buffer_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_Buffer_SetClientContext_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Buffer_SetClientContext>>(
          'Cronet_Buffer_SetClientContext');
  late final _dart_Cronet_Buffer_SetClientContext
      _Cronet_Buffer_SetClientContext = _Cronet_Buffer_SetClientContext_ptr
          .asFunction<_dart_Cronet_Buffer_SetClientContext>();

  late final ffi.Pointer<ffi.Int32> _Cronet_ClientContext =
      _lookup<ffi.Int32>('Cronet_ClientContext');

  int get Cronet_ClientContext => _Cronet_ClientContext.value;

  set Cronet_ClientContext(int value) => _Cronet_ClientContext.value = value;

  int Cronet_Buffer_InitWithDataAndCallback(
    ffi.Pointer<Cronet_Buffer> self,
    ffi.Pointer<ffi.Void> data,
    int size,
    ffi.Pointer<Cronet_BufferCallback> callback,
  ) {
    return _Cronet_Buffer_InitWithDataAndCallback(
      self,
      data,
      size,
      callback,
    );
  }

  late final _Cronet_Buffer_InitWithDataAndCallback_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Buffer_InitWithDataAndCallback>>(
          'Cronet_Buffer_InitWithDataAndCallback');
  late final _dart_Cronet_Buffer_InitWithDataAndCallback
      _Cronet_Buffer_InitWithDataAndCallback =
      _Cronet_Buffer_InitWithDataAndCallback_ptr.asFunction<
          _dart_Cronet_Buffer_InitWithDataAndCallback>();

  int Cronet_Buffer_InitWithAlloc(
    ffi.Pointer<Cronet_Buffer> self,
    int size,
  ) {
    return _Cronet_Buffer_InitWithAlloc(
      self,
      size,
    );
  }

  late final _Cronet_Buffer_InitWithAlloc_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Buffer_InitWithAlloc>>(
          'Cronet_Buffer_InitWithAlloc');
  late final _dart_Cronet_Buffer_InitWithAlloc _Cronet_Buffer_InitWithAlloc =
      _Cronet_Buffer_InitWithAlloc_ptr.asFunction<
          _dart_Cronet_Buffer_InitWithAlloc>();

  late final ffi.Pointer<ffi.Int32> _uint64_t = _lookup<ffi.Int32>('uint64_t');

  int get uint64_t => _uint64_t.value;

  set uint64_t(int value) => _uint64_t.value = value;

  late final ffi.Pointer<ffi.Int32> _Cronet_RawDataPtr =
      _lookup<ffi.Int32>('Cronet_RawDataPtr');

  int get Cronet_RawDataPtr => _Cronet_RawDataPtr.value;

  set Cronet_RawDataPtr(int value) => _Cronet_RawDataPtr.value = value;

  /// ////////////////////
  int Cronet_BufferCallback_Destroy(
    ffi.Pointer<Cronet_BufferCallback> self,
  ) {
    return _Cronet_BufferCallback_Destroy(
      self,
    );
  }

  late final _Cronet_BufferCallback_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_BufferCallback_Destroy>>(
          'Cronet_BufferCallback_Destroy');
  late final _dart_Cronet_BufferCallback_Destroy
      _Cronet_BufferCallback_Destroy = _Cronet_BufferCallback_Destroy_ptr
          .asFunction<_dart_Cronet_BufferCallback_Destroy>();

  int Cronet_BufferCallback_SetClientContext(
    ffi.Pointer<Cronet_BufferCallback> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_BufferCallback_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_BufferCallback_SetClientContext_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_BufferCallback_SetClientContext>>(
      'Cronet_BufferCallback_SetClientContext');
  late final _dart_Cronet_BufferCallback_SetClientContext
      _Cronet_BufferCallback_SetClientContext =
      _Cronet_BufferCallback_SetClientContext_ptr.asFunction<
          _dart_Cronet_BufferCallback_SetClientContext>();

  int Cronet_BufferCallback_OnDestroy(
    ffi.Pointer<Cronet_BufferCallback> self,
    ffi.Pointer<Cronet_Buffer> buffer,
  ) {
    return _Cronet_BufferCallback_OnDestroy(
      self,
      buffer,
    );
  }

  late final _Cronet_BufferCallback_OnDestroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_BufferCallback_OnDestroy>>(
          'Cronet_BufferCallback_OnDestroy');
  late final _dart_Cronet_BufferCallback_OnDestroy
      _Cronet_BufferCallback_OnDestroy = _Cronet_BufferCallback_OnDestroy_ptr
          .asFunction<_dart_Cronet_BufferCallback_OnDestroy>();

  late final ffi.Pointer<ffi.Int32> _Cronet_BufferCallbackPtr =
      _lookup<ffi.Int32>('Cronet_BufferCallbackPtr');

  int get Cronet_BufferCallbackPtr => _Cronet_BufferCallbackPtr.value;

  set Cronet_BufferCallbackPtr(int value) =>
      _Cronet_BufferCallbackPtr.value = value;

  /// ////////////////////
  int Cronet_Runnable_Destroy(
    ffi.Pointer<Cronet_Runnable> self,
  ) {
    return _Cronet_Runnable_Destroy(
      self,
    );
  }

  late final _Cronet_Runnable_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Runnable_Destroy>>(
          'Cronet_Runnable_Destroy');
  late final _dart_Cronet_Runnable_Destroy _Cronet_Runnable_Destroy =
      _Cronet_Runnable_Destroy_ptr.asFunction<_dart_Cronet_Runnable_Destroy>();

  int Cronet_Runnable_SetClientContext(
    ffi.Pointer<Cronet_Runnable> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_Runnable_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_Runnable_SetClientContext_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Runnable_SetClientContext>>(
          'Cronet_Runnable_SetClientContext');
  late final _dart_Cronet_Runnable_SetClientContext
      _Cronet_Runnable_SetClientContext = _Cronet_Runnable_SetClientContext_ptr
          .asFunction<_dart_Cronet_Runnable_SetClientContext>();

  int Cronet_Runnable_Run(
    ffi.Pointer<Cronet_Runnable> self,
  ) {
    return _Cronet_Runnable_Run(
      self,
    );
  }

  late final _Cronet_Runnable_Run_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Runnable_Run>>(
          'Cronet_Runnable_Run');
  late final _dart_Cronet_Runnable_Run _Cronet_Runnable_Run =
      _Cronet_Runnable_Run_ptr.asFunction<_dart_Cronet_Runnable_Run>();

  late final ffi.Pointer<ffi.Int32> _Cronet_RunnablePtr =
      _lookup<ffi.Int32>('Cronet_RunnablePtr');

  int get Cronet_RunnablePtr => _Cronet_RunnablePtr.value;

  set Cronet_RunnablePtr(int value) => _Cronet_RunnablePtr.value = value;

  /// ////////////////////
  int Cronet_Executor_Destroy(
    ffi.Pointer<Cronet_Executor> self,
  ) {
    return _Cronet_Executor_Destroy(
      self,
    );
  }

  late final _Cronet_Executor_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Executor_Destroy>>(
          'Cronet_Executor_Destroy');
  late final _dart_Cronet_Executor_Destroy _Cronet_Executor_Destroy =
      _Cronet_Executor_Destroy_ptr.asFunction<_dart_Cronet_Executor_Destroy>();

  int Cronet_Executor_SetClientContext(
    ffi.Pointer<Cronet_Executor> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_Executor_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_Executor_SetClientContext_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Executor_SetClientContext>>(
          'Cronet_Executor_SetClientContext');
  late final _dart_Cronet_Executor_SetClientContext
      _Cronet_Executor_SetClientContext = _Cronet_Executor_SetClientContext_ptr
          .asFunction<_dart_Cronet_Executor_SetClientContext>();

  int Cronet_Executor_Execute(
    ffi.Pointer<Cronet_Executor> self,
    ffi.Pointer<Cronet_Runnable> command,
  ) {
    return _Cronet_Executor_Execute(
      self,
      command,
    );
  }

  late final _Cronet_Executor_Execute_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Executor_Execute>>(
          'Cronet_Executor_Execute');
  late final _dart_Cronet_Executor_Execute _Cronet_Executor_Execute =
      _Cronet_Executor_Execute_ptr.asFunction<_dart_Cronet_Executor_Execute>();

  late final ffi.Pointer<ffi.Int32> _Cronet_ExecutorPtr =
      _lookup<ffi.Int32>('Cronet_ExecutorPtr');

  int get Cronet_ExecutorPtr => _Cronet_ExecutorPtr.value;

  set Cronet_ExecutorPtr(int value) => _Cronet_ExecutorPtr.value = value;

  /// ////////////////////
  late final ffi.Pointer<ffi.Int32> _Cronet_EnginePtr =
      _lookup<ffi.Int32>('Cronet_EnginePtr');

  int get Cronet_EnginePtr => _Cronet_EnginePtr.value;

  set Cronet_EnginePtr(int value) => _Cronet_EnginePtr.value = value;

  int Cronet_Engine_Destroy(
    ffi.Pointer<Cronet_Engine> self,
  ) {
    return _Cronet_Engine_Destroy(
      self,
    );
  }

  late final _Cronet_Engine_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Engine_Destroy>>(
          'Cronet_Engine_Destroy');
  late final _dart_Cronet_Engine_Destroy _Cronet_Engine_Destroy =
      _Cronet_Engine_Destroy_ptr.asFunction<_dart_Cronet_Engine_Destroy>();

  int Cronet_Engine_SetClientContext(
    ffi.Pointer<Cronet_Engine> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_Engine_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_Engine_SetClientContext_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Engine_SetClientContext>>(
          'Cronet_Engine_SetClientContext');
  late final _dart_Cronet_Engine_SetClientContext
      _Cronet_Engine_SetClientContext = _Cronet_Engine_SetClientContext_ptr
          .asFunction<_dart_Cronet_Engine_SetClientContext>();

  late final ffi.Pointer<ffi.Int32> _Cronet_RESULT_1 =
      _lookup<ffi.Int32>('Cronet_RESULT');

  int get Cronet_RESULT_1 => _Cronet_RESULT_1.value;

  set Cronet_RESULT_1(int value) => _Cronet_RESULT_1.value = value;

  late final ffi.Pointer<ffi.Int32> _bool = _lookup<ffi.Int32>('bool');

  int get bool => _bool.value;

  set bool(int value) => _bool.value = value;

  int Cronet_Engine_StopNetLog(
    ffi.Pointer<Cronet_Engine> self,
  ) {
    return _Cronet_Engine_StopNetLog(
      self,
    );
  }

  late final _Cronet_Engine_StopNetLog_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Engine_StopNetLog>>(
          'Cronet_Engine_StopNetLog');
  late final _dart_Cronet_Engine_StopNetLog _Cronet_Engine_StopNetLog =
      _Cronet_Engine_StopNetLog_ptr.asFunction<
          _dart_Cronet_Engine_StopNetLog>();

  late final ffi.Pointer<ffi.Int32> _Cronet_String =
      _lookup<ffi.Int32>('Cronet_String');

  int get Cronet_String => _Cronet_String.value;

  set Cronet_String(int value) => _Cronet_String.value = value;

  int Cronet_Engine_AddRequestFinishedListener(
    ffi.Pointer<Cronet_Engine> self,
    ffi.Pointer<Cronet_RequestFinishedInfoListener> listener,
    ffi.Pointer<Cronet_Executor> executor,
  ) {
    return _Cronet_Engine_AddRequestFinishedListener(
      self,
      listener,
      executor,
    );
  }

  late final _Cronet_Engine_AddRequestFinishedListener_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_Engine_AddRequestFinishedListener>>(
      'Cronet_Engine_AddRequestFinishedListener');
  late final _dart_Cronet_Engine_AddRequestFinishedListener
      _Cronet_Engine_AddRequestFinishedListener =
      _Cronet_Engine_AddRequestFinishedListener_ptr.asFunction<
          _dart_Cronet_Engine_AddRequestFinishedListener>();

  int Cronet_Engine_RemoveRequestFinishedListener(
    ffi.Pointer<Cronet_Engine> self,
    ffi.Pointer<Cronet_RequestFinishedInfoListener> listener,
  ) {
    return _Cronet_Engine_RemoveRequestFinishedListener(
      self,
      listener,
    );
  }

  late final _Cronet_Engine_RemoveRequestFinishedListener_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_Engine_RemoveRequestFinishedListener>>(
      'Cronet_Engine_RemoveRequestFinishedListener');
  late final _dart_Cronet_Engine_RemoveRequestFinishedListener
      _Cronet_Engine_RemoveRequestFinishedListener =
      _Cronet_Engine_RemoveRequestFinishedListener_ptr.asFunction<
          _dart_Cronet_Engine_RemoveRequestFinishedListener>();

  /// ////////////////////
  int Cronet_UrlRequestStatusListener_Destroy(
    ffi.Pointer<Cronet_UrlRequestStatusListener> self,
  ) {
    return _Cronet_UrlRequestStatusListener_Destroy(
      self,
    );
  }

  late final _Cronet_UrlRequestStatusListener_Destroy_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_UrlRequestStatusListener_Destroy>>(
      'Cronet_UrlRequestStatusListener_Destroy');
  late final _dart_Cronet_UrlRequestStatusListener_Destroy
      _Cronet_UrlRequestStatusListener_Destroy =
      _Cronet_UrlRequestStatusListener_Destroy_ptr.asFunction<
          _dart_Cronet_UrlRequestStatusListener_Destroy>();

  int Cronet_UrlRequestStatusListener_SetClientContext(
    ffi.Pointer<Cronet_UrlRequestStatusListener> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_UrlRequestStatusListener_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_UrlRequestStatusListener_SetClientContext_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestStatusListener_SetClientContext>>(
      'Cronet_UrlRequestStatusListener_SetClientContext');
  late final _dart_Cronet_UrlRequestStatusListener_SetClientContext
      _Cronet_UrlRequestStatusListener_SetClientContext =
      _Cronet_UrlRequestStatusListener_SetClientContext_ptr.asFunction<
          _dart_Cronet_UrlRequestStatusListener_SetClientContext>();

  int Cronet_UrlRequestStatusListener_OnStatus(
    ffi.Pointer<Cronet_UrlRequestStatusListener> self,
    int status,
  ) {
    return _Cronet_UrlRequestStatusListener_OnStatus(
      self,
      status,
    );
  }

  late final _Cronet_UrlRequestStatusListener_OnStatus_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_UrlRequestStatusListener_OnStatus>>(
      'Cronet_UrlRequestStatusListener_OnStatus');
  late final _dart_Cronet_UrlRequestStatusListener_OnStatus
      _Cronet_UrlRequestStatusListener_OnStatus =
      _Cronet_UrlRequestStatusListener_OnStatus_ptr.asFunction<
          _dart_Cronet_UrlRequestStatusListener_OnStatus>();

  late final ffi.Pointer<ffi.Int32> _Cronet_UrlRequestStatusListenerPtr =
      _lookup<ffi.Int32>('Cronet_UrlRequestStatusListenerPtr');

  int get Cronet_UrlRequestStatusListenerPtr =>
      _Cronet_UrlRequestStatusListenerPtr.value;

  set Cronet_UrlRequestStatusListenerPtr(int value) =>
      _Cronet_UrlRequestStatusListenerPtr.value = value;

  /// ////////////////////
  int Cronet_UrlRequestCallback_Destroy(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
  ) {
    return _Cronet_UrlRequestCallback_Destroy(
      self,
    );
  }

  late final _Cronet_UrlRequestCallback_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UrlRequestCallback_Destroy>>(
          'Cronet_UrlRequestCallback_Destroy');
  late final _dart_Cronet_UrlRequestCallback_Destroy
      _Cronet_UrlRequestCallback_Destroy =
      _Cronet_UrlRequestCallback_Destroy_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_Destroy>();

  int Cronet_UrlRequestCallback_SetClientContext(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_UrlRequestCallback_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_UrlRequestCallback_SetClientContext_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestCallback_SetClientContext>>(
      'Cronet_UrlRequestCallback_SetClientContext');
  late final _dart_Cronet_UrlRequestCallback_SetClientContext
      _Cronet_UrlRequestCallback_SetClientContext =
      _Cronet_UrlRequestCallback_SetClientContext_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_SetClientContext>();

  int Cronet_UrlRequestCallback_OnRedirectReceived(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfo> info,
    ffi.Pointer<ffi.Int8> new_location_url,
  ) {
    return _Cronet_UrlRequestCallback_OnRedirectReceived(
      self,
      request,
      info,
      new_location_url,
    );
  }

  late final _Cronet_UrlRequestCallback_OnRedirectReceived_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestCallback_OnRedirectReceived>>(
      'Cronet_UrlRequestCallback_OnRedirectReceived');
  late final _dart_Cronet_UrlRequestCallback_OnRedirectReceived
      _Cronet_UrlRequestCallback_OnRedirectReceived =
      _Cronet_UrlRequestCallback_OnRedirectReceived_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_OnRedirectReceived>();

  int Cronet_UrlRequestCallback_OnResponseStarted(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfo> info,
  ) {
    return _Cronet_UrlRequestCallback_OnResponseStarted(
      self,
      request,
      info,
    );
  }

  late final _Cronet_UrlRequestCallback_OnResponseStarted_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestCallback_OnResponseStarted>>(
      'Cronet_UrlRequestCallback_OnResponseStarted');
  late final _dart_Cronet_UrlRequestCallback_OnResponseStarted
      _Cronet_UrlRequestCallback_OnResponseStarted =
      _Cronet_UrlRequestCallback_OnResponseStarted_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_OnResponseStarted>();

  int Cronet_UrlRequestCallback_OnReadCompleted(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfo> info,
    ffi.Pointer<Cronet_Buffer> buffer,
    int bytes_read,
  ) {
    return _Cronet_UrlRequestCallback_OnReadCompleted(
      self,
      request,
      info,
      buffer,
      bytes_read,
    );
  }

  late final _Cronet_UrlRequestCallback_OnReadCompleted_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_UrlRequestCallback_OnReadCompleted>>(
      'Cronet_UrlRequestCallback_OnReadCompleted');
  late final _dart_Cronet_UrlRequestCallback_OnReadCompleted
      _Cronet_UrlRequestCallback_OnReadCompleted =
      _Cronet_UrlRequestCallback_OnReadCompleted_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_OnReadCompleted>();

  int Cronet_UrlRequestCallback_OnSucceeded(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfo> info,
  ) {
    return _Cronet_UrlRequestCallback_OnSucceeded(
      self,
      request,
      info,
    );
  }

  late final _Cronet_UrlRequestCallback_OnSucceeded_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UrlRequestCallback_OnSucceeded>>(
          'Cronet_UrlRequestCallback_OnSucceeded');
  late final _dart_Cronet_UrlRequestCallback_OnSucceeded
      _Cronet_UrlRequestCallback_OnSucceeded =
      _Cronet_UrlRequestCallback_OnSucceeded_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_OnSucceeded>();

  int Cronet_UrlRequestCallback_OnFailed(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfo> info,
    ffi.Pointer<Cronet_Error> error,
  ) {
    return _Cronet_UrlRequestCallback_OnFailed(
      self,
      request,
      info,
      error,
    );
  }

  late final _Cronet_UrlRequestCallback_OnFailed_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UrlRequestCallback_OnFailed>>(
          'Cronet_UrlRequestCallback_OnFailed');
  late final _dart_Cronet_UrlRequestCallback_OnFailed
      _Cronet_UrlRequestCallback_OnFailed =
      _Cronet_UrlRequestCallback_OnFailed_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_OnFailed>();

  int Cronet_UrlRequestCallback_OnCanceled(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfo> info,
  ) {
    return _Cronet_UrlRequestCallback_OnCanceled(
      self,
      request,
      info,
    );
  }

  late final _Cronet_UrlRequestCallback_OnCanceled_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UrlRequestCallback_OnCanceled>>(
          'Cronet_UrlRequestCallback_OnCanceled');
  late final _dart_Cronet_UrlRequestCallback_OnCanceled
      _Cronet_UrlRequestCallback_OnCanceled =
      _Cronet_UrlRequestCallback_OnCanceled_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_OnCanceled>();

  late final ffi.Pointer<ffi.Int32> _Cronet_UrlRequestCallbackPtr =
      _lookup<ffi.Int32>('Cronet_UrlRequestCallbackPtr');

  int get Cronet_UrlRequestCallbackPtr => _Cronet_UrlRequestCallbackPtr.value;

  set Cronet_UrlRequestCallbackPtr(int value) =>
      _Cronet_UrlRequestCallbackPtr.value = value;

  /// ////////////////////
  late final ffi.Pointer<ffi.Int32> _Cronet_UploadDataSinkPtr =
      _lookup<ffi.Int32>('Cronet_UploadDataSinkPtr');

  int get Cronet_UploadDataSinkPtr => _Cronet_UploadDataSinkPtr.value;

  set Cronet_UploadDataSinkPtr(int value) =>
      _Cronet_UploadDataSinkPtr.value = value;

  int Cronet_UploadDataSink_Destroy(
    ffi.Pointer<Cronet_UploadDataSink> self,
  ) {
    return _Cronet_UploadDataSink_Destroy(
      self,
    );
  }

  late final _Cronet_UploadDataSink_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UploadDataSink_Destroy>>(
          'Cronet_UploadDataSink_Destroy');
  late final _dart_Cronet_UploadDataSink_Destroy
      _Cronet_UploadDataSink_Destroy = _Cronet_UploadDataSink_Destroy_ptr
          .asFunction<_dart_Cronet_UploadDataSink_Destroy>();

  int Cronet_UploadDataSink_SetClientContext(
    ffi.Pointer<Cronet_UploadDataSink> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_UploadDataSink_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_UploadDataSink_SetClientContext_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_UploadDataSink_SetClientContext>>(
      'Cronet_UploadDataSink_SetClientContext');
  late final _dart_Cronet_UploadDataSink_SetClientContext
      _Cronet_UploadDataSink_SetClientContext =
      _Cronet_UploadDataSink_SetClientContext_ptr.asFunction<
          _dart_Cronet_UploadDataSink_SetClientContext>();

  int Cronet_UploadDataSink_OnReadSucceeded(
    ffi.Pointer<Cronet_UploadDataSink> self,
    int bytes_read,
    int final_chunk,
  ) {
    return _Cronet_UploadDataSink_OnReadSucceeded(
      self,
      bytes_read,
      final_chunk,
    );
  }

  late final _Cronet_UploadDataSink_OnReadSucceeded_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UploadDataSink_OnReadSucceeded>>(
          'Cronet_UploadDataSink_OnReadSucceeded');
  late final _dart_Cronet_UploadDataSink_OnReadSucceeded
      _Cronet_UploadDataSink_OnReadSucceeded =
      _Cronet_UploadDataSink_OnReadSucceeded_ptr.asFunction<
          _dart_Cronet_UploadDataSink_OnReadSucceeded>();

  int Cronet_UploadDataSink_OnReadError(
    ffi.Pointer<Cronet_UploadDataSink> self,
    ffi.Pointer<ffi.Int8> error_message,
  ) {
    return _Cronet_UploadDataSink_OnReadError(
      self,
      error_message,
    );
  }

  late final _Cronet_UploadDataSink_OnReadError_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UploadDataSink_OnReadError>>(
          'Cronet_UploadDataSink_OnReadError');
  late final _dart_Cronet_UploadDataSink_OnReadError
      _Cronet_UploadDataSink_OnReadError =
      _Cronet_UploadDataSink_OnReadError_ptr.asFunction<
          _dart_Cronet_UploadDataSink_OnReadError>();

  int Cronet_UploadDataSink_OnRewindSucceeded(
    ffi.Pointer<Cronet_UploadDataSink> self,
  ) {
    return _Cronet_UploadDataSink_OnRewindSucceeded(
      self,
    );
  }

  late final _Cronet_UploadDataSink_OnRewindSucceeded_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_UploadDataSink_OnRewindSucceeded>>(
      'Cronet_UploadDataSink_OnRewindSucceeded');
  late final _dart_Cronet_UploadDataSink_OnRewindSucceeded
      _Cronet_UploadDataSink_OnRewindSucceeded =
      _Cronet_UploadDataSink_OnRewindSucceeded_ptr.asFunction<
          _dart_Cronet_UploadDataSink_OnRewindSucceeded>();

  int Cronet_UploadDataSink_OnRewindError(
    ffi.Pointer<Cronet_UploadDataSink> self,
    ffi.Pointer<ffi.Int8> error_message,
  ) {
    return _Cronet_UploadDataSink_OnRewindError(
      self,
      error_message,
    );
  }

  late final _Cronet_UploadDataSink_OnRewindError_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UploadDataSink_OnRewindError>>(
          'Cronet_UploadDataSink_OnRewindError');
  late final _dart_Cronet_UploadDataSink_OnRewindError
      _Cronet_UploadDataSink_OnRewindError =
      _Cronet_UploadDataSink_OnRewindError_ptr.asFunction<
          _dart_Cronet_UploadDataSink_OnRewindError>();

  /// ////////////////////
  int Cronet_UploadDataProvider_Destroy(
    ffi.Pointer<Cronet_UploadDataProvider> self,
  ) {
    return _Cronet_UploadDataProvider_Destroy(
      self,
    );
  }

  late final _Cronet_UploadDataProvider_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UploadDataProvider_Destroy>>(
          'Cronet_UploadDataProvider_Destroy');
  late final _dart_Cronet_UploadDataProvider_Destroy
      _Cronet_UploadDataProvider_Destroy =
      _Cronet_UploadDataProvider_Destroy_ptr.asFunction<
          _dart_Cronet_UploadDataProvider_Destroy>();

  int Cronet_UploadDataProvider_SetClientContext(
    ffi.Pointer<Cronet_UploadDataProvider> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_UploadDataProvider_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_UploadDataProvider_SetClientContext_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UploadDataProvider_SetClientContext>>(
      'Cronet_UploadDataProvider_SetClientContext');
  late final _dart_Cronet_UploadDataProvider_SetClientContext
      _Cronet_UploadDataProvider_SetClientContext =
      _Cronet_UploadDataProvider_SetClientContext_ptr.asFunction<
          _dart_Cronet_UploadDataProvider_SetClientContext>();

  late final ffi.Pointer<ffi.Int32> _int64_t = _lookup<ffi.Int32>('int64_t');

  int get int64_t => _int64_t.value;

  set int64_t(int value) => _int64_t.value = value;

  int Cronet_UploadDataProvider_Read(
    ffi.Pointer<Cronet_UploadDataProvider> self,
    ffi.Pointer<Cronet_UploadDataSink> upload_data_sink,
    ffi.Pointer<Cronet_Buffer> buffer,
  ) {
    return _Cronet_UploadDataProvider_Read(
      self,
      upload_data_sink,
      buffer,
    );
  }

  late final _Cronet_UploadDataProvider_Read_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UploadDataProvider_Read>>(
          'Cronet_UploadDataProvider_Read');
  late final _dart_Cronet_UploadDataProvider_Read
      _Cronet_UploadDataProvider_Read = _Cronet_UploadDataProvider_Read_ptr
          .asFunction<_dart_Cronet_UploadDataProvider_Read>();

  int Cronet_UploadDataProvider_Rewind(
    ffi.Pointer<Cronet_UploadDataProvider> self,
    ffi.Pointer<Cronet_UploadDataSink> upload_data_sink,
  ) {
    return _Cronet_UploadDataProvider_Rewind(
      self,
      upload_data_sink,
    );
  }

  late final _Cronet_UploadDataProvider_Rewind_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UploadDataProvider_Rewind>>(
          'Cronet_UploadDataProvider_Rewind');
  late final _dart_Cronet_UploadDataProvider_Rewind
      _Cronet_UploadDataProvider_Rewind = _Cronet_UploadDataProvider_Rewind_ptr
          .asFunction<_dart_Cronet_UploadDataProvider_Rewind>();

  int Cronet_UploadDataProvider_Close(
    ffi.Pointer<Cronet_UploadDataProvider> self,
  ) {
    return _Cronet_UploadDataProvider_Close(
      self,
    );
  }

  late final _Cronet_UploadDataProvider_Close_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UploadDataProvider_Close>>(
          'Cronet_UploadDataProvider_Close');
  late final _dart_Cronet_UploadDataProvider_Close
      _Cronet_UploadDataProvider_Close = _Cronet_UploadDataProvider_Close_ptr
          .asFunction<_dart_Cronet_UploadDataProvider_Close>();

  late final ffi.Pointer<ffi.Int32> _Cronet_UploadDataProviderPtr =
      _lookup<ffi.Int32>('Cronet_UploadDataProviderPtr');

  int get Cronet_UploadDataProviderPtr => _Cronet_UploadDataProviderPtr.value;

  set Cronet_UploadDataProviderPtr(int value) =>
      _Cronet_UploadDataProviderPtr.value = value;

  /// ////////////////////
  late final ffi.Pointer<ffi.Int32> _Cronet_UrlRequestPtr =
      _lookup<ffi.Int32>('Cronet_UrlRequestPtr');

  int get Cronet_UrlRequestPtr => _Cronet_UrlRequestPtr.value;

  set Cronet_UrlRequestPtr(int value) => _Cronet_UrlRequestPtr.value = value;

  int Cronet_UrlRequest_Destroy(
    ffi.Pointer<Cronet_UrlRequest> self,
  ) {
    return _Cronet_UrlRequest_Destroy(
      self,
    );
  }

  late final _Cronet_UrlRequest_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UrlRequest_Destroy>>(
          'Cronet_UrlRequest_Destroy');
  late final _dart_Cronet_UrlRequest_Destroy _Cronet_UrlRequest_Destroy =
      _Cronet_UrlRequest_Destroy_ptr.asFunction<
          _dart_Cronet_UrlRequest_Destroy>();

  int Cronet_UrlRequest_SetClientContext(
    ffi.Pointer<Cronet_UrlRequest> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_UrlRequest_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_UrlRequest_SetClientContext_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UrlRequest_SetClientContext>>(
          'Cronet_UrlRequest_SetClientContext');
  late final _dart_Cronet_UrlRequest_SetClientContext
      _Cronet_UrlRequest_SetClientContext =
      _Cronet_UrlRequest_SetClientContext_ptr.asFunction<
          _dart_Cronet_UrlRequest_SetClientContext>();

  int Cronet_UrlRequest_Cancel(
    ffi.Pointer<Cronet_UrlRequest> self,
  ) {
    return _Cronet_UrlRequest_Cancel(
      self,
    );
  }

  late final _Cronet_UrlRequest_Cancel_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UrlRequest_Cancel>>(
          'Cronet_UrlRequest_Cancel');
  late final _dart_Cronet_UrlRequest_Cancel _Cronet_UrlRequest_Cancel =
      _Cronet_UrlRequest_Cancel_ptr.asFunction<
          _dart_Cronet_UrlRequest_Cancel>();

  int Cronet_UrlRequest_GetStatus(
    ffi.Pointer<Cronet_UrlRequest> self,
    ffi.Pointer<Cronet_UrlRequestStatusListener> listener,
  ) {
    return _Cronet_UrlRequest_GetStatus(
      self,
      listener,
    );
  }

  late final _Cronet_UrlRequest_GetStatus_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UrlRequest_GetStatus>>(
          'Cronet_UrlRequest_GetStatus');
  late final _dart_Cronet_UrlRequest_GetStatus _Cronet_UrlRequest_GetStatus =
      _Cronet_UrlRequest_GetStatus_ptr.asFunction<
          _dart_Cronet_UrlRequest_GetStatus>();

  /// ////////////////////
  int Cronet_RequestFinishedInfoListener_Destroy(
    ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
  ) {
    return _Cronet_RequestFinishedInfoListener_Destroy(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfoListener_Destroy_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_RequestFinishedInfoListener_Destroy>>(
      'Cronet_RequestFinishedInfoListener_Destroy');
  late final _dart_Cronet_RequestFinishedInfoListener_Destroy
      _Cronet_RequestFinishedInfoListener_Destroy =
      _Cronet_RequestFinishedInfoListener_Destroy_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfoListener_Destroy>();

  int Cronet_RequestFinishedInfoListener_SetClientContext(
    ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_RequestFinishedInfoListener_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_RequestFinishedInfoListener_SetClientContext_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_RequestFinishedInfoListener_SetClientContext>>(
      'Cronet_RequestFinishedInfoListener_SetClientContext');
  late final _dart_Cronet_RequestFinishedInfoListener_SetClientContext
      _Cronet_RequestFinishedInfoListener_SetClientContext =
      _Cronet_RequestFinishedInfoListener_SetClientContext_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfoListener_SetClientContext>();

  int Cronet_RequestFinishedInfoListener_OnRequestFinished(
    ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
    ffi.Pointer<Cronet_RequestFinishedInfo> request_info,
    ffi.Pointer<Cronet_UrlResponseInfo> response_info,
    ffi.Pointer<Cronet_Error> error,
  ) {
    return _Cronet_RequestFinishedInfoListener_OnRequestFinished(
      self,
      request_info,
      response_info,
      error,
    );
  }

  late final _Cronet_RequestFinishedInfoListener_OnRequestFinished_ptr =
      _lookup<
              ffi.NativeFunction<
                  Native_Cronet_RequestFinishedInfoListener_OnRequestFinished>>(
          'Cronet_RequestFinishedInfoListener_OnRequestFinished');
  late final _dart_Cronet_RequestFinishedInfoListener_OnRequestFinished
      _Cronet_RequestFinishedInfoListener_OnRequestFinished =
      _Cronet_RequestFinishedInfoListener_OnRequestFinished_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfoListener_OnRequestFinished>();

  late final ffi.Pointer<ffi.Int32> _Cronet_RequestFinishedInfoListenerPtr =
      _lookup<ffi.Int32>('Cronet_RequestFinishedInfoListenerPtr');

  int get Cronet_RequestFinishedInfoListenerPtr =>
      _Cronet_RequestFinishedInfoListenerPtr.value;

  set Cronet_RequestFinishedInfoListenerPtr(int value) =>
      _Cronet_RequestFinishedInfoListenerPtr.value = value;

  /// ////////////////////
  late final ffi.Pointer<ffi.Int32> _Cronet_ErrorPtr =
      _lookup<ffi.Int32>('Cronet_ErrorPtr');

  int get Cronet_ErrorPtr => _Cronet_ErrorPtr.value;

  set Cronet_ErrorPtr(int value) => _Cronet_ErrorPtr.value = value;

  int Cronet_Error_Destroy(
    ffi.Pointer<Cronet_Error> self,
  ) {
    return _Cronet_Error_Destroy(
      self,
    );
  }

  late final _Cronet_Error_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Error_Destroy>>(
          'Cronet_Error_Destroy');
  late final _dart_Cronet_Error_Destroy _Cronet_Error_Destroy =
      _Cronet_Error_Destroy_ptr.asFunction<_dart_Cronet_Error_Destroy>();

  int Cronet_Error_error_code_set(
    ffi.Pointer<Cronet_Error> self,
    int error_code,
  ) {
    return _Cronet_Error_error_code_set(
      self,
      error_code,
    );
  }

  late final _Cronet_Error_error_code_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Error_error_code_set>>(
          'Cronet_Error_error_code_set');
  late final _dart_Cronet_Error_error_code_set _Cronet_Error_error_code_set =
      _Cronet_Error_error_code_set_ptr.asFunction<
          _dart_Cronet_Error_error_code_set>();

  int Cronet_Error_message_set(
    ffi.Pointer<Cronet_Error> self,
    ffi.Pointer<ffi.Int8> message,
  ) {
    return _Cronet_Error_message_set(
      self,
      message,
    );
  }

  late final _Cronet_Error_message_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Error_message_set>>(
          'Cronet_Error_message_set');
  late final _dart_Cronet_Error_message_set _Cronet_Error_message_set =
      _Cronet_Error_message_set_ptr.asFunction<
          _dart_Cronet_Error_message_set>();

  int Cronet_Error_internal_error_code_set(
    ffi.Pointer<Cronet_Error> self,
    int internal_error_code,
  ) {
    return _Cronet_Error_internal_error_code_set(
      self,
      internal_error_code,
    );
  }

  late final _Cronet_Error_internal_error_code_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Error_internal_error_code_set>>(
          'Cronet_Error_internal_error_code_set');
  late final _dart_Cronet_Error_internal_error_code_set
      _Cronet_Error_internal_error_code_set =
      _Cronet_Error_internal_error_code_set_ptr.asFunction<
          _dart_Cronet_Error_internal_error_code_set>();

  int Cronet_Error_immediately_retryable_set(
    ffi.Pointer<Cronet_Error> self,
    ffi.Pointer<ffi.NativeFunction<bool1>> immediately_retryable,
  ) {
    return _Cronet_Error_immediately_retryable_set(
      self,
      immediately_retryable,
    );
  }

  late final _Cronet_Error_immediately_retryable_set_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_Error_immediately_retryable_set>>(
      'Cronet_Error_immediately_retryable_set');
  late final _dart_Cronet_Error_immediately_retryable_set
      _Cronet_Error_immediately_retryable_set =
      _Cronet_Error_immediately_retryable_set_ptr.asFunction<
          _dart_Cronet_Error_immediately_retryable_set>();

  int Cronet_Error_quic_detailed_error_code_set(
    ffi.Pointer<Cronet_Error> self,
    int quic_detailed_error_code,
  ) {
    return _Cronet_Error_quic_detailed_error_code_set(
      self,
      quic_detailed_error_code,
    );
  }

  late final _Cronet_Error_quic_detailed_error_code_set_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_Error_quic_detailed_error_code_set>>(
      'Cronet_Error_quic_detailed_error_code_set');
  late final _dart_Cronet_Error_quic_detailed_error_code_set
      _Cronet_Error_quic_detailed_error_code_set =
      _Cronet_Error_quic_detailed_error_code_set_ptr.asFunction<
          _dart_Cronet_Error_quic_detailed_error_code_set>();

  late final ffi.Pointer<ffi.Int32> _Cronet_Error_ERROR_CODE_1 =
      _lookup<ffi.Int32>('Cronet_Error_ERROR_CODE');

  int get Cronet_Error_ERROR_CODE_1 => _Cronet_Error_ERROR_CODE_1.value;

  set Cronet_Error_ERROR_CODE_1(int value) =>
      _Cronet_Error_ERROR_CODE_1.value = value;

  late final ffi.Pointer<ffi.Int32> _int32_t = _lookup<ffi.Int32>('int32_t');

  int get int32_t => _int32_t.value;

  set int32_t(int value) => _int32_t.value = value;

  /// ////////////////////
  late final ffi.Pointer<ffi.Int32> _Cronet_QuicHintPtr =
      _lookup<ffi.Int32>('Cronet_QuicHintPtr');

  int get Cronet_QuicHintPtr => _Cronet_QuicHintPtr.value;

  set Cronet_QuicHintPtr(int value) => _Cronet_QuicHintPtr.value = value;

  int Cronet_QuicHint_Destroy(
    ffi.Pointer<Cronet_QuicHint> self,
  ) {
    return _Cronet_QuicHint_Destroy(
      self,
    );
  }

  late final _Cronet_QuicHint_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_QuicHint_Destroy>>(
          'Cronet_QuicHint_Destroy');
  late final _dart_Cronet_QuicHint_Destroy _Cronet_QuicHint_Destroy =
      _Cronet_QuicHint_Destroy_ptr.asFunction<_dart_Cronet_QuicHint_Destroy>();

  int Cronet_QuicHint_host_set(
    ffi.Pointer<Cronet_QuicHint> self,
    ffi.Pointer<ffi.Int8> host,
  ) {
    return _Cronet_QuicHint_host_set(
      self,
      host,
    );
  }

  late final _Cronet_QuicHint_host_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_QuicHint_host_set>>(
          'Cronet_QuicHint_host_set');
  late final _dart_Cronet_QuicHint_host_set _Cronet_QuicHint_host_set =
      _Cronet_QuicHint_host_set_ptr.asFunction<
          _dart_Cronet_QuicHint_host_set>();

  int Cronet_QuicHint_port_set(
    ffi.Pointer<Cronet_QuicHint> self,
    int port,
  ) {
    return _Cronet_QuicHint_port_set(
      self,
      port,
    );
  }

  late final _Cronet_QuicHint_port_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_QuicHint_port_set>>(
          'Cronet_QuicHint_port_set');
  late final _dart_Cronet_QuicHint_port_set _Cronet_QuicHint_port_set =
      _Cronet_QuicHint_port_set_ptr.asFunction<
          _dart_Cronet_QuicHint_port_set>();

  int Cronet_QuicHint_alternate_port_set(
    ffi.Pointer<Cronet_QuicHint> self,
    int alternate_port,
  ) {
    return _Cronet_QuicHint_alternate_port_set(
      self,
      alternate_port,
    );
  }

  late final _Cronet_QuicHint_alternate_port_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_QuicHint_alternate_port_set>>(
          'Cronet_QuicHint_alternate_port_set');
  late final _dart_Cronet_QuicHint_alternate_port_set
      _Cronet_QuicHint_alternate_port_set =
      _Cronet_QuicHint_alternate_port_set_ptr.asFunction<
          _dart_Cronet_QuicHint_alternate_port_set>();

  /// ////////////////////
  late final ffi.Pointer<ffi.Int32> _Cronet_PublicKeyPinsPtr =
      _lookup<ffi.Int32>('Cronet_PublicKeyPinsPtr');

  int get Cronet_PublicKeyPinsPtr => _Cronet_PublicKeyPinsPtr.value;

  set Cronet_PublicKeyPinsPtr(int value) =>
      _Cronet_PublicKeyPinsPtr.value = value;

  int Cronet_PublicKeyPins_Destroy(
    ffi.Pointer<Cronet_PublicKeyPins> self,
  ) {
    return _Cronet_PublicKeyPins_Destroy(
      self,
    );
  }

  late final _Cronet_PublicKeyPins_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_PublicKeyPins_Destroy>>(
          'Cronet_PublicKeyPins_Destroy');
  late final _dart_Cronet_PublicKeyPins_Destroy _Cronet_PublicKeyPins_Destroy =
      _Cronet_PublicKeyPins_Destroy_ptr.asFunction<
          _dart_Cronet_PublicKeyPins_Destroy>();

  int Cronet_PublicKeyPins_host_set(
    ffi.Pointer<Cronet_PublicKeyPins> self,
    ffi.Pointer<ffi.Int8> host,
  ) {
    return _Cronet_PublicKeyPins_host_set(
      self,
      host,
    );
  }

  late final _Cronet_PublicKeyPins_host_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_PublicKeyPins_host_set>>(
          'Cronet_PublicKeyPins_host_set');
  late final _dart_Cronet_PublicKeyPins_host_set
      _Cronet_PublicKeyPins_host_set = _Cronet_PublicKeyPins_host_set_ptr
          .asFunction<_dart_Cronet_PublicKeyPins_host_set>();

  int Cronet_PublicKeyPins_pins_sha256_add(
    ffi.Pointer<Cronet_PublicKeyPins> self,
    ffi.Pointer<ffi.Int8> element,
  ) {
    return _Cronet_PublicKeyPins_pins_sha256_add(
      self,
      element,
    );
  }

  late final _Cronet_PublicKeyPins_pins_sha256_add_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_PublicKeyPins_pins_sha256_add>>(
          'Cronet_PublicKeyPins_pins_sha256_add');
  late final _dart_Cronet_PublicKeyPins_pins_sha256_add
      _Cronet_PublicKeyPins_pins_sha256_add =
      _Cronet_PublicKeyPins_pins_sha256_add_ptr.asFunction<
          _dart_Cronet_PublicKeyPins_pins_sha256_add>();

  int Cronet_PublicKeyPins_include_subdomains_set(
    ffi.Pointer<Cronet_PublicKeyPins> self,
    int include_subdomains,
  ) {
    return _Cronet_PublicKeyPins_include_subdomains_set(
      self,
      include_subdomains,
    );
  }

  late final _Cronet_PublicKeyPins_include_subdomains_set_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_PublicKeyPins_include_subdomains_set>>(
      'Cronet_PublicKeyPins_include_subdomains_set');
  late final _dart_Cronet_PublicKeyPins_include_subdomains_set
      _Cronet_PublicKeyPins_include_subdomains_set =
      _Cronet_PublicKeyPins_include_subdomains_set_ptr.asFunction<
          _dart_Cronet_PublicKeyPins_include_subdomains_set>();

  int Cronet_PublicKeyPins_expiration_date_set(
    ffi.Pointer<Cronet_PublicKeyPins> self,
    int expiration_date,
  ) {
    return _Cronet_PublicKeyPins_expiration_date_set(
      self,
      expiration_date,
    );
  }

  late final _Cronet_PublicKeyPins_expiration_date_set_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_PublicKeyPins_expiration_date_set>>(
      'Cronet_PublicKeyPins_expiration_date_set');
  late final _dart_Cronet_PublicKeyPins_expiration_date_set
      _Cronet_PublicKeyPins_expiration_date_set =
      _Cronet_PublicKeyPins_expiration_date_set_ptr.asFunction<
          _dart_Cronet_PublicKeyPins_expiration_date_set>();

  late final ffi.Pointer<ffi.Int32> _uint32_t = _lookup<ffi.Int32>('uint32_t');

  int get uint32_t => _uint32_t.value;

  set uint32_t(int value) => _uint32_t.value = value;

  int Cronet_PublicKeyPins_pins_sha256_clear(
    ffi.Pointer<Cronet_PublicKeyPins> self,
  ) {
    return _Cronet_PublicKeyPins_pins_sha256_clear(
      self,
    );
  }

  late final _Cronet_PublicKeyPins_pins_sha256_clear_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_PublicKeyPins_pins_sha256_clear>>(
      'Cronet_PublicKeyPins_pins_sha256_clear');
  late final _dart_Cronet_PublicKeyPins_pins_sha256_clear
      _Cronet_PublicKeyPins_pins_sha256_clear =
      _Cronet_PublicKeyPins_pins_sha256_clear_ptr.asFunction<
          _dart_Cronet_PublicKeyPins_pins_sha256_clear>();

  /// ////////////////////
  late final ffi.Pointer<ffi.Int32> _Cronet_EngineParamsPtr =
      _lookup<ffi.Int32>('Cronet_EngineParamsPtr');

  int get Cronet_EngineParamsPtr => _Cronet_EngineParamsPtr.value;

  set Cronet_EngineParamsPtr(int value) =>
      _Cronet_EngineParamsPtr.value = value;

  int Cronet_EngineParams_Destroy(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_Destroy(
      self,
    );
  }

  late final _Cronet_EngineParams_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_EngineParams_Destroy>>(
          'Cronet_EngineParams_Destroy');
  late final _dart_Cronet_EngineParams_Destroy _Cronet_EngineParams_Destroy =
      _Cronet_EngineParams_Destroy_ptr.asFunction<
          _dart_Cronet_EngineParams_Destroy>();

  int Cronet_EngineParams_enable_check_result_set(
    ffi.Pointer<Cronet_EngineParams> self,
    int enable_check_result,
  ) {
    return _Cronet_EngineParams_enable_check_result_set(
      self,
      enable_check_result,
    );
  }

  late final _Cronet_EngineParams_enable_check_result_set_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_EngineParams_enable_check_result_set>>(
      'Cronet_EngineParams_enable_check_result_set');
  late final _dart_Cronet_EngineParams_enable_check_result_set
      _Cronet_EngineParams_enable_check_result_set =
      _Cronet_EngineParams_enable_check_result_set_ptr.asFunction<
          _dart_Cronet_EngineParams_enable_check_result_set>();

  int Cronet_EngineParams_user_agent_set(
    ffi.Pointer<Cronet_EngineParams> self,
    ffi.Pointer<ffi.Int8> user_agent,
  ) {
    return _Cronet_EngineParams_user_agent_set(
      self,
      user_agent,
    );
  }

  late final _Cronet_EngineParams_user_agent_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_EngineParams_user_agent_set>>(
          'Cronet_EngineParams_user_agent_set');
  late final _dart_Cronet_EngineParams_user_agent_set
      _Cronet_EngineParams_user_agent_set =
      _Cronet_EngineParams_user_agent_set_ptr.asFunction<
          _dart_Cronet_EngineParams_user_agent_set>();

  int Cronet_EngineParams_accept_language_set(
    ffi.Pointer<Cronet_EngineParams> self,
    ffi.Pointer<ffi.Int8> accept_language,
  ) {
    return _Cronet_EngineParams_accept_language_set(
      self,
      accept_language,
    );
  }

  late final _Cronet_EngineParams_accept_language_set_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_EngineParams_accept_language_set>>(
      'Cronet_EngineParams_accept_language_set');
  late final _dart_Cronet_EngineParams_accept_language_set
      _Cronet_EngineParams_accept_language_set =
      _Cronet_EngineParams_accept_language_set_ptr.asFunction<
          _dart_Cronet_EngineParams_accept_language_set>();

  int Cronet_EngineParams_storage_path_set(
    ffi.Pointer<Cronet_EngineParams> self,
    ffi.Pointer<ffi.Int8> storage_path,
  ) {
    return _Cronet_EngineParams_storage_path_set(
      self,
      storage_path,
    );
  }

  late final _Cronet_EngineParams_storage_path_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_EngineParams_storage_path_set>>(
          'Cronet_EngineParams_storage_path_set');
  late final _dart_Cronet_EngineParams_storage_path_set
      _Cronet_EngineParams_storage_path_set =
      _Cronet_EngineParams_storage_path_set_ptr.asFunction<
          _dart_Cronet_EngineParams_storage_path_set>();

  int Cronet_EngineParams_enable_quic_set(
    ffi.Pointer<Cronet_EngineParams> self,
    int enable_quic,
  ) {
    return _Cronet_EngineParams_enable_quic_set(
      self,
      enable_quic,
    );
  }

  late final _Cronet_EngineParams_enable_quic_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_EngineParams_enable_quic_set>>(
          'Cronet_EngineParams_enable_quic_set');
  late final _dart_Cronet_EngineParams_enable_quic_set
      _Cronet_EngineParams_enable_quic_set =
      _Cronet_EngineParams_enable_quic_set_ptr.asFunction<
          _dart_Cronet_EngineParams_enable_quic_set>();

  int Cronet_EngineParams_enable_http2_set(
    ffi.Pointer<Cronet_EngineParams> self,
    int enable_http2,
  ) {
    return _Cronet_EngineParams_enable_http2_set(
      self,
      enable_http2,
    );
  }

  late final _Cronet_EngineParams_enable_http2_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_EngineParams_enable_http2_set>>(
          'Cronet_EngineParams_enable_http2_set');
  late final _dart_Cronet_EngineParams_enable_http2_set
      _Cronet_EngineParams_enable_http2_set =
      _Cronet_EngineParams_enable_http2_set_ptr.asFunction<
          _dart_Cronet_EngineParams_enable_http2_set>();

  int Cronet_EngineParams_enable_brotli_set(
    ffi.Pointer<Cronet_EngineParams> self,
    int enable_brotli,
  ) {
    return _Cronet_EngineParams_enable_brotli_set(
      self,
      enable_brotli,
    );
  }

  late final _Cronet_EngineParams_enable_brotli_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_EngineParams_enable_brotli_set>>(
          'Cronet_EngineParams_enable_brotli_set');
  late final _dart_Cronet_EngineParams_enable_brotli_set
      _Cronet_EngineParams_enable_brotli_set =
      _Cronet_EngineParams_enable_brotli_set_ptr.asFunction<
          _dart_Cronet_EngineParams_enable_brotli_set>();

  int Cronet_EngineParams_http_cache_mode_set(
    ffi.Pointer<Cronet_EngineParams> self,
    int http_cache_mode,
  ) {
    return _Cronet_EngineParams_http_cache_mode_set(
      self,
      http_cache_mode,
    );
  }

  late final _Cronet_EngineParams_http_cache_mode_set_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_EngineParams_http_cache_mode_set>>(
      'Cronet_EngineParams_http_cache_mode_set');
  late final _dart_Cronet_EngineParams_http_cache_mode_set
      _Cronet_EngineParams_http_cache_mode_set =
      _Cronet_EngineParams_http_cache_mode_set_ptr.asFunction<
          _dart_Cronet_EngineParams_http_cache_mode_set>();

  int Cronet_EngineParams_http_cache_max_size_set(
    ffi.Pointer<Cronet_EngineParams> self,
    int http_cache_max_size,
  ) {
    return _Cronet_EngineParams_http_cache_max_size_set(
      self,
      http_cache_max_size,
    );
  }

  late final _Cronet_EngineParams_http_cache_max_size_set_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_EngineParams_http_cache_max_size_set>>(
      'Cronet_EngineParams_http_cache_max_size_set');
  late final _dart_Cronet_EngineParams_http_cache_max_size_set
      _Cronet_EngineParams_http_cache_max_size_set =
      _Cronet_EngineParams_http_cache_max_size_set_ptr.asFunction<
          _dart_Cronet_EngineParams_http_cache_max_size_set>();

  int Cronet_EngineParams_quic_hints_add(
    ffi.Pointer<Cronet_EngineParams> self,
    ffi.Pointer<Cronet_QuicHint> element,
  ) {
    return _Cronet_EngineParams_quic_hints_add(
      self,
      element,
    );
  }

  late final _Cronet_EngineParams_quic_hints_add_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_EngineParams_quic_hints_add>>(
          'Cronet_EngineParams_quic_hints_add');
  late final _dart_Cronet_EngineParams_quic_hints_add
      _Cronet_EngineParams_quic_hints_add =
      _Cronet_EngineParams_quic_hints_add_ptr.asFunction<
          _dart_Cronet_EngineParams_quic_hints_add>();

  int Cronet_EngineParams_public_key_pins_add(
    ffi.Pointer<Cronet_EngineParams> self,
    ffi.Pointer<Cronet_PublicKeyPins> element,
  ) {
    return _Cronet_EngineParams_public_key_pins_add(
      self,
      element,
    );
  }

  late final _Cronet_EngineParams_public_key_pins_add_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_EngineParams_public_key_pins_add>>(
      'Cronet_EngineParams_public_key_pins_add');
  late final _dart_Cronet_EngineParams_public_key_pins_add
      _Cronet_EngineParams_public_key_pins_add =
      _Cronet_EngineParams_public_key_pins_add_ptr.asFunction<
          _dart_Cronet_EngineParams_public_key_pins_add>();

  int Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set(
    ffi.Pointer<Cronet_EngineParams> self,
    int enable_public_key_pinning_bypass_for_local_trust_anchors,
  ) {
    return _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set(
      self,
      enable_public_key_pinning_bypass_for_local_trust_anchors,
    );
  }

  late final _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set_ptr =
      _lookup<
              ffi.NativeFunction<
                  Native_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set>>(
          'Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set');
  late final _dart_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set
      _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set =
      _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set_ptr
          .asFunction<
              _dart_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set>();

  int Cronet_EngineParams_network_thread_priority_set(
    ffi.Pointer<Cronet_EngineParams> self,
    double network_thread_priority,
  ) {
    return _Cronet_EngineParams_network_thread_priority_set(
      self,
      network_thread_priority,
    );
  }

  late final _Cronet_EngineParams_network_thread_priority_set_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_EngineParams_network_thread_priority_set>>(
      'Cronet_EngineParams_network_thread_priority_set');
  late final _dart_Cronet_EngineParams_network_thread_priority_set
      _Cronet_EngineParams_network_thread_priority_set =
      _Cronet_EngineParams_network_thread_priority_set_ptr.asFunction<
          _dart_Cronet_EngineParams_network_thread_priority_set>();

  int Cronet_EngineParams_experimental_options_set(
    ffi.Pointer<Cronet_EngineParams> self,
    ffi.Pointer<ffi.Int8> experimental_options,
  ) {
    return _Cronet_EngineParams_experimental_options_set(
      self,
      experimental_options,
    );
  }

  late final _Cronet_EngineParams_experimental_options_set_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_EngineParams_experimental_options_set>>(
      'Cronet_EngineParams_experimental_options_set');
  late final _dart_Cronet_EngineParams_experimental_options_set
      _Cronet_EngineParams_experimental_options_set =
      _Cronet_EngineParams_experimental_options_set_ptr.asFunction<
          _dart_Cronet_EngineParams_experimental_options_set>();

  late final ffi.Pointer<ffi.Int32> _Cronet_EngineParams_HTTP_CACHE_MODE_1 =
      _lookup<ffi.Int32>('Cronet_EngineParams_HTTP_CACHE_MODE');

  int get Cronet_EngineParams_HTTP_CACHE_MODE_1 =>
      _Cronet_EngineParams_HTTP_CACHE_MODE_1.value;

  set Cronet_EngineParams_HTTP_CACHE_MODE_1(int value) =>
      _Cronet_EngineParams_HTTP_CACHE_MODE_1.value = value;

  int Cronet_EngineParams_quic_hints_clear(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_quic_hints_clear(
      self,
    );
  }

  late final _Cronet_EngineParams_quic_hints_clear_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_EngineParams_quic_hints_clear>>(
          'Cronet_EngineParams_quic_hints_clear');
  late final _dart_Cronet_EngineParams_quic_hints_clear
      _Cronet_EngineParams_quic_hints_clear =
      _Cronet_EngineParams_quic_hints_clear_ptr.asFunction<
          _dart_Cronet_EngineParams_quic_hints_clear>();

  int Cronet_EngineParams_public_key_pins_clear(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_public_key_pins_clear(
      self,
    );
  }

  late final _Cronet_EngineParams_public_key_pins_clear_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_EngineParams_public_key_pins_clear>>(
      'Cronet_EngineParams_public_key_pins_clear');
  late final _dart_Cronet_EngineParams_public_key_pins_clear
      _Cronet_EngineParams_public_key_pins_clear =
      _Cronet_EngineParams_public_key_pins_clear_ptr.asFunction<
          _dart_Cronet_EngineParams_public_key_pins_clear>();

  int Cronet_EngineParams_network_thread_priority_get(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_network_thread_priority_get(
      self,
    );
  }

  late final _Cronet_EngineParams_network_thread_priority_get_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_EngineParams_network_thread_priority_get>>(
      'Cronet_EngineParams_network_thread_priority_get');
  late final _dart_Cronet_EngineParams_network_thread_priority_get
      _Cronet_EngineParams_network_thread_priority_get =
      _Cronet_EngineParams_network_thread_priority_get_ptr.asFunction<
          _dart_Cronet_EngineParams_network_thread_priority_get>();

  /// ////////////////////
  late final ffi.Pointer<ffi.Int32> _Cronet_HttpHeaderPtr =
      _lookup<ffi.Int32>('Cronet_HttpHeaderPtr');

  int get Cronet_HttpHeaderPtr => _Cronet_HttpHeaderPtr.value;

  set Cronet_HttpHeaderPtr(int value) => _Cronet_HttpHeaderPtr.value = value;

  int Cronet_HttpHeader_Destroy(
    ffi.Pointer<Cronet_HttpHeader> self,
  ) {
    return _Cronet_HttpHeader_Destroy(
      self,
    );
  }

  late final _Cronet_HttpHeader_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_HttpHeader_Destroy>>(
          'Cronet_HttpHeader_Destroy');
  late final _dart_Cronet_HttpHeader_Destroy _Cronet_HttpHeader_Destroy =
      _Cronet_HttpHeader_Destroy_ptr.asFunction<
          _dart_Cronet_HttpHeader_Destroy>();

  int Cronet_HttpHeader_name_set(
    ffi.Pointer<Cronet_HttpHeader> self,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _Cronet_HttpHeader_name_set(
      self,
      name,
    );
  }

  late final _Cronet_HttpHeader_name_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_HttpHeader_name_set>>(
          'Cronet_HttpHeader_name_set');
  late final _dart_Cronet_HttpHeader_name_set _Cronet_HttpHeader_name_set =
      _Cronet_HttpHeader_name_set_ptr.asFunction<
          _dart_Cronet_HttpHeader_name_set>();

  int Cronet_HttpHeader_value_set(
    ffi.Pointer<Cronet_HttpHeader> self,
    ffi.Pointer<ffi.Int8> value,
  ) {
    return _Cronet_HttpHeader_value_set(
      self,
      value,
    );
  }

  late final _Cronet_HttpHeader_value_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_HttpHeader_value_set>>(
          'Cronet_HttpHeader_value_set');
  late final _dart_Cronet_HttpHeader_value_set _Cronet_HttpHeader_value_set =
      _Cronet_HttpHeader_value_set_ptr.asFunction<
          _dart_Cronet_HttpHeader_value_set>();

  /// ////////////////////
  late final ffi.Pointer<ffi.Int32> _Cronet_UrlResponseInfoPtr =
      _lookup<ffi.Int32>('Cronet_UrlResponseInfoPtr');

  int get Cronet_UrlResponseInfoPtr => _Cronet_UrlResponseInfoPtr.value;

  set Cronet_UrlResponseInfoPtr(int value) =>
      _Cronet_UrlResponseInfoPtr.value = value;

  int Cronet_UrlResponseInfo_Destroy(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
  ) {
    return _Cronet_UrlResponseInfo_Destroy(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UrlResponseInfo_Destroy>>(
          'Cronet_UrlResponseInfo_Destroy');
  late final _dart_Cronet_UrlResponseInfo_Destroy
      _Cronet_UrlResponseInfo_Destroy = _Cronet_UrlResponseInfo_Destroy_ptr
          .asFunction<_dart_Cronet_UrlResponseInfo_Destroy>();

  int Cronet_UrlResponseInfo_url_set(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    ffi.Pointer<ffi.Int8> url,
  ) {
    return _Cronet_UrlResponseInfo_url_set(
      self,
      url,
    );
  }

  late final _Cronet_UrlResponseInfo_url_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UrlResponseInfo_url_set>>(
          'Cronet_UrlResponseInfo_url_set');
  late final _dart_Cronet_UrlResponseInfo_url_set
      _Cronet_UrlResponseInfo_url_set = _Cronet_UrlResponseInfo_url_set_ptr
          .asFunction<_dart_Cronet_UrlResponseInfo_url_set>();

  int Cronet_UrlResponseInfo_url_chain_add(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    ffi.Pointer<ffi.Int8> element,
  ) {
    return _Cronet_UrlResponseInfo_url_chain_add(
      self,
      element,
    );
  }

  late final _Cronet_UrlResponseInfo_url_chain_add_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UrlResponseInfo_url_chain_add>>(
          'Cronet_UrlResponseInfo_url_chain_add');
  late final _dart_Cronet_UrlResponseInfo_url_chain_add
      _Cronet_UrlResponseInfo_url_chain_add =
      _Cronet_UrlResponseInfo_url_chain_add_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_url_chain_add>();

  int Cronet_UrlResponseInfo_http_status_code_set(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    int http_status_code,
  ) {
    return _Cronet_UrlResponseInfo_http_status_code_set(
      self,
      http_status_code,
    );
  }

  late final _Cronet_UrlResponseInfo_http_status_code_set_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_http_status_code_set>>(
      'Cronet_UrlResponseInfo_http_status_code_set');
  late final _dart_Cronet_UrlResponseInfo_http_status_code_set
      _Cronet_UrlResponseInfo_http_status_code_set =
      _Cronet_UrlResponseInfo_http_status_code_set_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_http_status_code_set>();

  int Cronet_UrlResponseInfo_http_status_text_set(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    ffi.Pointer<ffi.Int8> http_status_text,
  ) {
    return _Cronet_UrlResponseInfo_http_status_text_set(
      self,
      http_status_text,
    );
  }

  late final _Cronet_UrlResponseInfo_http_status_text_set_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_http_status_text_set>>(
      'Cronet_UrlResponseInfo_http_status_text_set');
  late final _dart_Cronet_UrlResponseInfo_http_status_text_set
      _Cronet_UrlResponseInfo_http_status_text_set =
      _Cronet_UrlResponseInfo_http_status_text_set_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_http_status_text_set>();

  int Cronet_UrlResponseInfo_all_headers_list_add(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    ffi.Pointer<Cronet_HttpHeader> element,
  ) {
    return _Cronet_UrlResponseInfo_all_headers_list_add(
      self,
      element,
    );
  }

  late final _Cronet_UrlResponseInfo_all_headers_list_add_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_all_headers_list_add>>(
      'Cronet_UrlResponseInfo_all_headers_list_add');
  late final _dart_Cronet_UrlResponseInfo_all_headers_list_add
      _Cronet_UrlResponseInfo_all_headers_list_add =
      _Cronet_UrlResponseInfo_all_headers_list_add_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_all_headers_list_add>();

  int Cronet_UrlResponseInfo_was_cached_set(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    int was_cached,
  ) {
    return _Cronet_UrlResponseInfo_was_cached_set(
      self,
      was_cached,
    );
  }

  late final _Cronet_UrlResponseInfo_was_cached_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UrlResponseInfo_was_cached_set>>(
          'Cronet_UrlResponseInfo_was_cached_set');
  late final _dart_Cronet_UrlResponseInfo_was_cached_set
      _Cronet_UrlResponseInfo_was_cached_set =
      _Cronet_UrlResponseInfo_was_cached_set_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_was_cached_set>();

  int Cronet_UrlResponseInfo_negotiated_protocol_set(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    ffi.Pointer<ffi.Int8> negotiated_protocol,
  ) {
    return _Cronet_UrlResponseInfo_negotiated_protocol_set(
      self,
      negotiated_protocol,
    );
  }

  late final _Cronet_UrlResponseInfo_negotiated_protocol_set_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_negotiated_protocol_set>>(
      'Cronet_UrlResponseInfo_negotiated_protocol_set');
  late final _dart_Cronet_UrlResponseInfo_negotiated_protocol_set
      _Cronet_UrlResponseInfo_negotiated_protocol_set =
      _Cronet_UrlResponseInfo_negotiated_protocol_set_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_negotiated_protocol_set>();

  int Cronet_UrlResponseInfo_proxy_server_set(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    ffi.Pointer<ffi.Int8> proxy_server,
  ) {
    return _Cronet_UrlResponseInfo_proxy_server_set(
      self,
      proxy_server,
    );
  }

  late final _Cronet_UrlResponseInfo_proxy_server_set_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_UrlResponseInfo_proxy_server_set>>(
      'Cronet_UrlResponseInfo_proxy_server_set');
  late final _dart_Cronet_UrlResponseInfo_proxy_server_set
      _Cronet_UrlResponseInfo_proxy_server_set =
      _Cronet_UrlResponseInfo_proxy_server_set_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_proxy_server_set>();

  int Cronet_UrlResponseInfo_received_byte_count_set(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    int received_byte_count,
  ) {
    return _Cronet_UrlResponseInfo_received_byte_count_set(
      self,
      received_byte_count,
    );
  }

  late final _Cronet_UrlResponseInfo_received_byte_count_set_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_received_byte_count_set>>(
      'Cronet_UrlResponseInfo_received_byte_count_set');
  late final _dart_Cronet_UrlResponseInfo_received_byte_count_set
      _Cronet_UrlResponseInfo_received_byte_count_set =
      _Cronet_UrlResponseInfo_received_byte_count_set_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_received_byte_count_set>();

  int Cronet_UrlResponseInfo_url_chain_clear(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
  ) {
    return _Cronet_UrlResponseInfo_url_chain_clear(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_url_chain_clear_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_UrlResponseInfo_url_chain_clear>>(
      'Cronet_UrlResponseInfo_url_chain_clear');
  late final _dart_Cronet_UrlResponseInfo_url_chain_clear
      _Cronet_UrlResponseInfo_url_chain_clear =
      _Cronet_UrlResponseInfo_url_chain_clear_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_url_chain_clear>();

  int Cronet_UrlResponseInfo_all_headers_list_clear(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
  ) {
    return _Cronet_UrlResponseInfo_all_headers_list_clear(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_all_headers_list_clear_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_all_headers_list_clear>>(
      'Cronet_UrlResponseInfo_all_headers_list_clear');
  late final _dart_Cronet_UrlResponseInfo_all_headers_list_clear
      _Cronet_UrlResponseInfo_all_headers_list_clear =
      _Cronet_UrlResponseInfo_all_headers_list_clear_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_all_headers_list_clear>();

  /// ////////////////////
  late final ffi.Pointer<ffi.Int32> _Cronet_UrlRequestParamsPtr =
      _lookup<ffi.Int32>('Cronet_UrlRequestParamsPtr');

  int get Cronet_UrlRequestParamsPtr => _Cronet_UrlRequestParamsPtr.value;

  set Cronet_UrlRequestParamsPtr(int value) =>
      _Cronet_UrlRequestParamsPtr.value = value;

  int Cronet_UrlRequestParams_Destroy(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_Destroy(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UrlRequestParams_Destroy>>(
          'Cronet_UrlRequestParams_Destroy');
  late final _dart_Cronet_UrlRequestParams_Destroy
      _Cronet_UrlRequestParams_Destroy = _Cronet_UrlRequestParams_Destroy_ptr
          .asFunction<_dart_Cronet_UrlRequestParams_Destroy>();

  int Cronet_UrlRequestParams_http_method_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    ffi.Pointer<ffi.Int8> http_method,
  ) {
    return _Cronet_UrlRequestParams_http_method_set(
      self,
      http_method,
    );
  }

  late final _Cronet_UrlRequestParams_http_method_set_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_UrlRequestParams_http_method_set>>(
      'Cronet_UrlRequestParams_http_method_set');
  late final _dart_Cronet_UrlRequestParams_http_method_set
      _Cronet_UrlRequestParams_http_method_set =
      _Cronet_UrlRequestParams_http_method_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_http_method_set>();

  int Cronet_UrlRequestParams_request_headers_add(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    ffi.Pointer<Cronet_HttpHeader> element,
  ) {
    return _Cronet_UrlRequestParams_request_headers_add(
      self,
      element,
    );
  }

  late final _Cronet_UrlRequestParams_request_headers_add_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestParams_request_headers_add>>(
      'Cronet_UrlRequestParams_request_headers_add');
  late final _dart_Cronet_UrlRequestParams_request_headers_add
      _Cronet_UrlRequestParams_request_headers_add =
      _Cronet_UrlRequestParams_request_headers_add_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_request_headers_add>();

  int Cronet_UrlRequestParams_disable_cache_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    int disable_cache,
  ) {
    return _Cronet_UrlRequestParams_disable_cache_set(
      self,
      disable_cache,
    );
  }

  late final _Cronet_UrlRequestParams_disable_cache_set_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_UrlRequestParams_disable_cache_set>>(
      'Cronet_UrlRequestParams_disable_cache_set');
  late final _dart_Cronet_UrlRequestParams_disable_cache_set
      _Cronet_UrlRequestParams_disable_cache_set =
      _Cronet_UrlRequestParams_disable_cache_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_disable_cache_set>();

  int Cronet_UrlRequestParams_priority_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    int priority,
  ) {
    return _Cronet_UrlRequestParams_priority_set(
      self,
      priority,
    );
  }

  late final _Cronet_UrlRequestParams_priority_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_UrlRequestParams_priority_set>>(
          'Cronet_UrlRequestParams_priority_set');
  late final _dart_Cronet_UrlRequestParams_priority_set
      _Cronet_UrlRequestParams_priority_set =
      _Cronet_UrlRequestParams_priority_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_priority_set>();

  int Cronet_UrlRequestParams_upload_data_provider_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    ffi.Pointer<Cronet_UploadDataProvider> upload_data_provider,
  ) {
    return _Cronet_UrlRequestParams_upload_data_provider_set(
      self,
      upload_data_provider,
    );
  }

  late final _Cronet_UrlRequestParams_upload_data_provider_set_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestParams_upload_data_provider_set>>(
      'Cronet_UrlRequestParams_upload_data_provider_set');
  late final _dart_Cronet_UrlRequestParams_upload_data_provider_set
      _Cronet_UrlRequestParams_upload_data_provider_set =
      _Cronet_UrlRequestParams_upload_data_provider_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_upload_data_provider_set>();

  int Cronet_UrlRequestParams_upload_data_provider_executor_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    ffi.Pointer<Cronet_Executor> upload_data_provider_executor,
  ) {
    return _Cronet_UrlRequestParams_upload_data_provider_executor_set(
      self,
      upload_data_provider_executor,
    );
  }

  late final _Cronet_UrlRequestParams_upload_data_provider_executor_set_ptr =
      _lookup<
              ffi.NativeFunction<
                  Native_Cronet_UrlRequestParams_upload_data_provider_executor_set>>(
          'Cronet_UrlRequestParams_upload_data_provider_executor_set');
  late final _dart_Cronet_UrlRequestParams_upload_data_provider_executor_set
      _Cronet_UrlRequestParams_upload_data_provider_executor_set =
      _Cronet_UrlRequestParams_upload_data_provider_executor_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_upload_data_provider_executor_set>();

  int Cronet_UrlRequestParams_allow_direct_executor_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    int allow_direct_executor,
  ) {
    return _Cronet_UrlRequestParams_allow_direct_executor_set(
      self,
      allow_direct_executor,
    );
  }

  late final _Cronet_UrlRequestParams_allow_direct_executor_set_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestParams_allow_direct_executor_set>>(
      'Cronet_UrlRequestParams_allow_direct_executor_set');
  late final _dart_Cronet_UrlRequestParams_allow_direct_executor_set
      _Cronet_UrlRequestParams_allow_direct_executor_set =
      _Cronet_UrlRequestParams_allow_direct_executor_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_allow_direct_executor_set>();

  int Cronet_UrlRequestParams_annotations_add(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    ffi.Pointer<ffi.Void> element,
  ) {
    return _Cronet_UrlRequestParams_annotations_add(
      self,
      element,
    );
  }

  late final _Cronet_UrlRequestParams_annotations_add_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_UrlRequestParams_annotations_add>>(
      'Cronet_UrlRequestParams_annotations_add');
  late final _dart_Cronet_UrlRequestParams_annotations_add
      _Cronet_UrlRequestParams_annotations_add =
      _Cronet_UrlRequestParams_annotations_add_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_annotations_add>();

  int Cronet_UrlRequestParams_request_finished_listener_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    ffi.Pointer<Cronet_RequestFinishedInfoListener> request_finished_listener,
  ) {
    return _Cronet_UrlRequestParams_request_finished_listener_set(
      self,
      request_finished_listener,
    );
  }

  late final _Cronet_UrlRequestParams_request_finished_listener_set_ptr =
      _lookup<
              ffi.NativeFunction<
                  Native_Cronet_UrlRequestParams_request_finished_listener_set>>(
          'Cronet_UrlRequestParams_request_finished_listener_set');
  late final _dart_Cronet_UrlRequestParams_request_finished_listener_set
      _Cronet_UrlRequestParams_request_finished_listener_set =
      _Cronet_UrlRequestParams_request_finished_listener_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_request_finished_listener_set>();

  int Cronet_UrlRequestParams_request_finished_executor_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    ffi.Pointer<Cronet_Executor> request_finished_executor,
  ) {
    return _Cronet_UrlRequestParams_request_finished_executor_set(
      self,
      request_finished_executor,
    );
  }

  late final _Cronet_UrlRequestParams_request_finished_executor_set_ptr =
      _lookup<
              ffi.NativeFunction<
                  Native_Cronet_UrlRequestParams_request_finished_executor_set>>(
          'Cronet_UrlRequestParams_request_finished_executor_set');
  late final _dart_Cronet_UrlRequestParams_request_finished_executor_set
      _Cronet_UrlRequestParams_request_finished_executor_set =
      _Cronet_UrlRequestParams_request_finished_executor_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_request_finished_executor_set>();

  int Cronet_UrlRequestParams_idempotency_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    int idempotency,
  ) {
    return _Cronet_UrlRequestParams_idempotency_set(
      self,
      idempotency,
    );
  }

  late final _Cronet_UrlRequestParams_idempotency_set_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_UrlRequestParams_idempotency_set>>(
      'Cronet_UrlRequestParams_idempotency_set');
  late final _dart_Cronet_UrlRequestParams_idempotency_set
      _Cronet_UrlRequestParams_idempotency_set =
      _Cronet_UrlRequestParams_idempotency_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_idempotency_set>();

  int Cronet_UrlRequestParams_request_headers_clear(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_request_headers_clear(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_request_headers_clear_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestParams_request_headers_clear>>(
      'Cronet_UrlRequestParams_request_headers_clear');
  late final _dart_Cronet_UrlRequestParams_request_headers_clear
      _Cronet_UrlRequestParams_request_headers_clear =
      _Cronet_UrlRequestParams_request_headers_clear_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_request_headers_clear>();

  late final ffi.Pointer<ffi.Int32>
      _Cronet_UrlRequestParams_REQUEST_PRIORITY_1 =
      _lookup<ffi.Int32>('Cronet_UrlRequestParams_REQUEST_PRIORITY');

  int get Cronet_UrlRequestParams_REQUEST_PRIORITY_1 =>
      _Cronet_UrlRequestParams_REQUEST_PRIORITY_1.value;

  set Cronet_UrlRequestParams_REQUEST_PRIORITY_1(int value) =>
      _Cronet_UrlRequestParams_REQUEST_PRIORITY_1.value = value;

  int Cronet_UrlRequestParams_annotations_clear(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_annotations_clear(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_annotations_clear_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_UrlRequestParams_annotations_clear>>(
      'Cronet_UrlRequestParams_annotations_clear');
  late final _dart_Cronet_UrlRequestParams_annotations_clear
      _Cronet_UrlRequestParams_annotations_clear =
      _Cronet_UrlRequestParams_annotations_clear_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_annotations_clear>();

  late final ffi.Pointer<ffi.Int32> _Cronet_UrlRequestParams_IDEMPOTENCY_1 =
      _lookup<ffi.Int32>('Cronet_UrlRequestParams_IDEMPOTENCY');

  int get Cronet_UrlRequestParams_IDEMPOTENCY_1 =>
      _Cronet_UrlRequestParams_IDEMPOTENCY_1.value;

  set Cronet_UrlRequestParams_IDEMPOTENCY_1(int value) =>
      _Cronet_UrlRequestParams_IDEMPOTENCY_1.value = value;

  /// ////////////////////
  late final ffi.Pointer<ffi.Int32> _Cronet_DateTimePtr =
      _lookup<ffi.Int32>('Cronet_DateTimePtr');

  int get Cronet_DateTimePtr => _Cronet_DateTimePtr.value;

  set Cronet_DateTimePtr(int value) => _Cronet_DateTimePtr.value = value;

  int Cronet_DateTime_Destroy(
    ffi.Pointer<Cronet_DateTime> self,
  ) {
    return _Cronet_DateTime_Destroy(
      self,
    );
  }

  late final _Cronet_DateTime_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_DateTime_Destroy>>(
          'Cronet_DateTime_Destroy');
  late final _dart_Cronet_DateTime_Destroy _Cronet_DateTime_Destroy =
      _Cronet_DateTime_Destroy_ptr.asFunction<_dart_Cronet_DateTime_Destroy>();

  int Cronet_DateTime_value_set(
    ffi.Pointer<Cronet_DateTime> self,
    int value,
  ) {
    return _Cronet_DateTime_value_set(
      self,
      value,
    );
  }

  late final _Cronet_DateTime_value_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_DateTime_value_set>>(
          'Cronet_DateTime_value_set');
  late final _dart_Cronet_DateTime_value_set _Cronet_DateTime_value_set =
      _Cronet_DateTime_value_set_ptr.asFunction<
          _dart_Cronet_DateTime_value_set>();

  /// ////////////////////
  late final ffi.Pointer<ffi.Int32> _Cronet_MetricsPtr =
      _lookup<ffi.Int32>('Cronet_MetricsPtr');

  int get Cronet_MetricsPtr => _Cronet_MetricsPtr.value;

  set Cronet_MetricsPtr(int value) => _Cronet_MetricsPtr.value = value;

  int Cronet_Metrics_Destroy(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_Destroy(
      self,
    );
  }

  late final _Cronet_Metrics_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_Destroy>>(
          'Cronet_Metrics_Destroy');
  late final _dart_Cronet_Metrics_Destroy _Cronet_Metrics_Destroy =
      _Cronet_Metrics_Destroy_ptr.asFunction<_dart_Cronet_Metrics_Destroy>();

  int Cronet_Metrics_request_start_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> request_start,
  ) {
    return _Cronet_Metrics_request_start_set(
      self,
      request_start,
    );
  }

  late final _Cronet_Metrics_request_start_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_request_start_set>>(
          'Cronet_Metrics_request_start_set');
  late final _dart_Cronet_Metrics_request_start_set
      _Cronet_Metrics_request_start_set = _Cronet_Metrics_request_start_set_ptr
          .asFunction<_dart_Cronet_Metrics_request_start_set>();

  void Cronet_Metrics_request_start_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> request_start,
  ) {
    return _Cronet_Metrics_request_start_move(
      self,
      request_start,
    );
  }

  late final _Cronet_Metrics_request_start_move_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_request_start_move>>(
          'Cronet_Metrics_request_start_move');
  late final _dart_Cronet_Metrics_request_start_move
      _Cronet_Metrics_request_start_move =
      _Cronet_Metrics_request_start_move_ptr.asFunction<
          _dart_Cronet_Metrics_request_start_move>();

  int Cronet_Metrics_dns_start_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> dns_start,
  ) {
    return _Cronet_Metrics_dns_start_set(
      self,
      dns_start,
    );
  }

  late final _Cronet_Metrics_dns_start_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_dns_start_set>>(
          'Cronet_Metrics_dns_start_set');
  late final _dart_Cronet_Metrics_dns_start_set _Cronet_Metrics_dns_start_set =
      _Cronet_Metrics_dns_start_set_ptr.asFunction<
          _dart_Cronet_Metrics_dns_start_set>();

  void Cronet_Metrics_dns_start_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> dns_start,
  ) {
    return _Cronet_Metrics_dns_start_move(
      self,
      dns_start,
    );
  }

  late final _Cronet_Metrics_dns_start_move_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_dns_start_move>>(
          'Cronet_Metrics_dns_start_move');
  late final _dart_Cronet_Metrics_dns_start_move
      _Cronet_Metrics_dns_start_move = _Cronet_Metrics_dns_start_move_ptr
          .asFunction<_dart_Cronet_Metrics_dns_start_move>();

  int Cronet_Metrics_dns_end_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> dns_end,
  ) {
    return _Cronet_Metrics_dns_end_set(
      self,
      dns_end,
    );
  }

  late final _Cronet_Metrics_dns_end_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_dns_end_set>>(
          'Cronet_Metrics_dns_end_set');
  late final _dart_Cronet_Metrics_dns_end_set _Cronet_Metrics_dns_end_set =
      _Cronet_Metrics_dns_end_set_ptr.asFunction<
          _dart_Cronet_Metrics_dns_end_set>();

  void Cronet_Metrics_dns_end_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> dns_end,
  ) {
    return _Cronet_Metrics_dns_end_move(
      self,
      dns_end,
    );
  }

  late final _Cronet_Metrics_dns_end_move_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_dns_end_move>>(
          'Cronet_Metrics_dns_end_move');
  late final _dart_Cronet_Metrics_dns_end_move _Cronet_Metrics_dns_end_move =
      _Cronet_Metrics_dns_end_move_ptr.asFunction<
          _dart_Cronet_Metrics_dns_end_move>();

  int Cronet_Metrics_connect_start_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> connect_start,
  ) {
    return _Cronet_Metrics_connect_start_set(
      self,
      connect_start,
    );
  }

  late final _Cronet_Metrics_connect_start_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_connect_start_set>>(
          'Cronet_Metrics_connect_start_set');
  late final _dart_Cronet_Metrics_connect_start_set
      _Cronet_Metrics_connect_start_set = _Cronet_Metrics_connect_start_set_ptr
          .asFunction<_dart_Cronet_Metrics_connect_start_set>();

  void Cronet_Metrics_connect_start_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> connect_start,
  ) {
    return _Cronet_Metrics_connect_start_move(
      self,
      connect_start,
    );
  }

  late final _Cronet_Metrics_connect_start_move_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_connect_start_move>>(
          'Cronet_Metrics_connect_start_move');
  late final _dart_Cronet_Metrics_connect_start_move
      _Cronet_Metrics_connect_start_move =
      _Cronet_Metrics_connect_start_move_ptr.asFunction<
          _dart_Cronet_Metrics_connect_start_move>();

  int Cronet_Metrics_connect_end_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> connect_end,
  ) {
    return _Cronet_Metrics_connect_end_set(
      self,
      connect_end,
    );
  }

  late final _Cronet_Metrics_connect_end_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_connect_end_set>>(
          'Cronet_Metrics_connect_end_set');
  late final _dart_Cronet_Metrics_connect_end_set
      _Cronet_Metrics_connect_end_set = _Cronet_Metrics_connect_end_set_ptr
          .asFunction<_dart_Cronet_Metrics_connect_end_set>();

  void Cronet_Metrics_connect_end_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> connect_end,
  ) {
    return _Cronet_Metrics_connect_end_move(
      self,
      connect_end,
    );
  }

  late final _Cronet_Metrics_connect_end_move_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_connect_end_move>>(
          'Cronet_Metrics_connect_end_move');
  late final _dart_Cronet_Metrics_connect_end_move
      _Cronet_Metrics_connect_end_move = _Cronet_Metrics_connect_end_move_ptr
          .asFunction<_dart_Cronet_Metrics_connect_end_move>();

  int Cronet_Metrics_ssl_start_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> ssl_start,
  ) {
    return _Cronet_Metrics_ssl_start_set(
      self,
      ssl_start,
    );
  }

  late final _Cronet_Metrics_ssl_start_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_ssl_start_set>>(
          'Cronet_Metrics_ssl_start_set');
  late final _dart_Cronet_Metrics_ssl_start_set _Cronet_Metrics_ssl_start_set =
      _Cronet_Metrics_ssl_start_set_ptr.asFunction<
          _dart_Cronet_Metrics_ssl_start_set>();

  void Cronet_Metrics_ssl_start_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> ssl_start,
  ) {
    return _Cronet_Metrics_ssl_start_move(
      self,
      ssl_start,
    );
  }

  late final _Cronet_Metrics_ssl_start_move_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_ssl_start_move>>(
          'Cronet_Metrics_ssl_start_move');
  late final _dart_Cronet_Metrics_ssl_start_move
      _Cronet_Metrics_ssl_start_move = _Cronet_Metrics_ssl_start_move_ptr
          .asFunction<_dart_Cronet_Metrics_ssl_start_move>();

  int Cronet_Metrics_ssl_end_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> ssl_end,
  ) {
    return _Cronet_Metrics_ssl_end_set(
      self,
      ssl_end,
    );
  }

  late final _Cronet_Metrics_ssl_end_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_ssl_end_set>>(
          'Cronet_Metrics_ssl_end_set');
  late final _dart_Cronet_Metrics_ssl_end_set _Cronet_Metrics_ssl_end_set =
      _Cronet_Metrics_ssl_end_set_ptr.asFunction<
          _dart_Cronet_Metrics_ssl_end_set>();

  void Cronet_Metrics_ssl_end_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> ssl_end,
  ) {
    return _Cronet_Metrics_ssl_end_move(
      self,
      ssl_end,
    );
  }

  late final _Cronet_Metrics_ssl_end_move_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_ssl_end_move>>(
          'Cronet_Metrics_ssl_end_move');
  late final _dart_Cronet_Metrics_ssl_end_move _Cronet_Metrics_ssl_end_move =
      _Cronet_Metrics_ssl_end_move_ptr.asFunction<
          _dart_Cronet_Metrics_ssl_end_move>();

  int Cronet_Metrics_sending_start_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> sending_start,
  ) {
    return _Cronet_Metrics_sending_start_set(
      self,
      sending_start,
    );
  }

  late final _Cronet_Metrics_sending_start_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_sending_start_set>>(
          'Cronet_Metrics_sending_start_set');
  late final _dart_Cronet_Metrics_sending_start_set
      _Cronet_Metrics_sending_start_set = _Cronet_Metrics_sending_start_set_ptr
          .asFunction<_dart_Cronet_Metrics_sending_start_set>();

  void Cronet_Metrics_sending_start_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> sending_start,
  ) {
    return _Cronet_Metrics_sending_start_move(
      self,
      sending_start,
    );
  }

  late final _Cronet_Metrics_sending_start_move_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_sending_start_move>>(
          'Cronet_Metrics_sending_start_move');
  late final _dart_Cronet_Metrics_sending_start_move
      _Cronet_Metrics_sending_start_move =
      _Cronet_Metrics_sending_start_move_ptr.asFunction<
          _dart_Cronet_Metrics_sending_start_move>();

  int Cronet_Metrics_sending_end_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> sending_end,
  ) {
    return _Cronet_Metrics_sending_end_set(
      self,
      sending_end,
    );
  }

  late final _Cronet_Metrics_sending_end_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_sending_end_set>>(
          'Cronet_Metrics_sending_end_set');
  late final _dart_Cronet_Metrics_sending_end_set
      _Cronet_Metrics_sending_end_set = _Cronet_Metrics_sending_end_set_ptr
          .asFunction<_dart_Cronet_Metrics_sending_end_set>();

  void Cronet_Metrics_sending_end_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> sending_end,
  ) {
    return _Cronet_Metrics_sending_end_move(
      self,
      sending_end,
    );
  }

  late final _Cronet_Metrics_sending_end_move_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_sending_end_move>>(
          'Cronet_Metrics_sending_end_move');
  late final _dart_Cronet_Metrics_sending_end_move
      _Cronet_Metrics_sending_end_move = _Cronet_Metrics_sending_end_move_ptr
          .asFunction<_dart_Cronet_Metrics_sending_end_move>();

  int Cronet_Metrics_push_start_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> push_start,
  ) {
    return _Cronet_Metrics_push_start_set(
      self,
      push_start,
    );
  }

  late final _Cronet_Metrics_push_start_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_push_start_set>>(
          'Cronet_Metrics_push_start_set');
  late final _dart_Cronet_Metrics_push_start_set
      _Cronet_Metrics_push_start_set = _Cronet_Metrics_push_start_set_ptr
          .asFunction<_dart_Cronet_Metrics_push_start_set>();

  void Cronet_Metrics_push_start_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> push_start,
  ) {
    return _Cronet_Metrics_push_start_move(
      self,
      push_start,
    );
  }

  late final _Cronet_Metrics_push_start_move_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_push_start_move>>(
          'Cronet_Metrics_push_start_move');
  late final _dart_Cronet_Metrics_push_start_move
      _Cronet_Metrics_push_start_move = _Cronet_Metrics_push_start_move_ptr
          .asFunction<_dart_Cronet_Metrics_push_start_move>();

  int Cronet_Metrics_push_end_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> push_end,
  ) {
    return _Cronet_Metrics_push_end_set(
      self,
      push_end,
    );
  }

  late final _Cronet_Metrics_push_end_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_push_end_set>>(
          'Cronet_Metrics_push_end_set');
  late final _dart_Cronet_Metrics_push_end_set _Cronet_Metrics_push_end_set =
      _Cronet_Metrics_push_end_set_ptr.asFunction<
          _dart_Cronet_Metrics_push_end_set>();

  void Cronet_Metrics_push_end_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> push_end,
  ) {
    return _Cronet_Metrics_push_end_move(
      self,
      push_end,
    );
  }

  late final _Cronet_Metrics_push_end_move_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_push_end_move>>(
          'Cronet_Metrics_push_end_move');
  late final _dart_Cronet_Metrics_push_end_move _Cronet_Metrics_push_end_move =
      _Cronet_Metrics_push_end_move_ptr.asFunction<
          _dart_Cronet_Metrics_push_end_move>();

  int Cronet_Metrics_response_start_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> response_start,
  ) {
    return _Cronet_Metrics_response_start_set(
      self,
      response_start,
    );
  }

  late final _Cronet_Metrics_response_start_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_response_start_set>>(
          'Cronet_Metrics_response_start_set');
  late final _dart_Cronet_Metrics_response_start_set
      _Cronet_Metrics_response_start_set =
      _Cronet_Metrics_response_start_set_ptr.asFunction<
          _dart_Cronet_Metrics_response_start_set>();

  void Cronet_Metrics_response_start_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> response_start,
  ) {
    return _Cronet_Metrics_response_start_move(
      self,
      response_start,
    );
  }

  late final _Cronet_Metrics_response_start_move_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_response_start_move>>(
          'Cronet_Metrics_response_start_move');
  late final _dart_Cronet_Metrics_response_start_move
      _Cronet_Metrics_response_start_move =
      _Cronet_Metrics_response_start_move_ptr.asFunction<
          _dart_Cronet_Metrics_response_start_move>();

  int Cronet_Metrics_request_end_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> request_end,
  ) {
    return _Cronet_Metrics_request_end_set(
      self,
      request_end,
    );
  }

  late final _Cronet_Metrics_request_end_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_request_end_set>>(
          'Cronet_Metrics_request_end_set');
  late final _dart_Cronet_Metrics_request_end_set
      _Cronet_Metrics_request_end_set = _Cronet_Metrics_request_end_set_ptr
          .asFunction<_dart_Cronet_Metrics_request_end_set>();

  void Cronet_Metrics_request_end_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> request_end,
  ) {
    return _Cronet_Metrics_request_end_move(
      self,
      request_end,
    );
  }

  late final _Cronet_Metrics_request_end_move_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_request_end_move>>(
          'Cronet_Metrics_request_end_move');
  late final _dart_Cronet_Metrics_request_end_move
      _Cronet_Metrics_request_end_move = _Cronet_Metrics_request_end_move_ptr
          .asFunction<_dart_Cronet_Metrics_request_end_move>();

  int Cronet_Metrics_socket_reused_set(
    ffi.Pointer<Cronet_Metrics> self,
    int socket_reused,
  ) {
    return _Cronet_Metrics_socket_reused_set(
      self,
      socket_reused,
    );
  }

  late final _Cronet_Metrics_socket_reused_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_socket_reused_set>>(
          'Cronet_Metrics_socket_reused_set');
  late final _dart_Cronet_Metrics_socket_reused_set
      _Cronet_Metrics_socket_reused_set = _Cronet_Metrics_socket_reused_set_ptr
          .asFunction<_dart_Cronet_Metrics_socket_reused_set>();

  int Cronet_Metrics_sent_byte_count_set(
    ffi.Pointer<Cronet_Metrics> self,
    int sent_byte_count,
  ) {
    return _Cronet_Metrics_sent_byte_count_set(
      self,
      sent_byte_count,
    );
  }

  late final _Cronet_Metrics_sent_byte_count_set_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Metrics_sent_byte_count_set>>(
          'Cronet_Metrics_sent_byte_count_set');
  late final _dart_Cronet_Metrics_sent_byte_count_set
      _Cronet_Metrics_sent_byte_count_set =
      _Cronet_Metrics_sent_byte_count_set_ptr.asFunction<
          _dart_Cronet_Metrics_sent_byte_count_set>();

  int Cronet_Metrics_received_byte_count_set(
    ffi.Pointer<Cronet_Metrics> self,
    int received_byte_count,
  ) {
    return _Cronet_Metrics_received_byte_count_set(
      self,
      received_byte_count,
    );
  }

  late final _Cronet_Metrics_received_byte_count_set_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_Metrics_received_byte_count_set>>(
      'Cronet_Metrics_received_byte_count_set');
  late final _dart_Cronet_Metrics_received_byte_count_set
      _Cronet_Metrics_received_byte_count_set =
      _Cronet_Metrics_received_byte_count_set_ptr.asFunction<
          _dart_Cronet_Metrics_received_byte_count_set>();

  /// ////////////////////
  late final ffi.Pointer<ffi.Int32> _Cronet_RequestFinishedInfoPtr =
      _lookup<ffi.Int32>('Cronet_RequestFinishedInfoPtr');

  int get Cronet_RequestFinishedInfoPtr => _Cronet_RequestFinishedInfoPtr.value;

  set Cronet_RequestFinishedInfoPtr(int value) =>
      _Cronet_RequestFinishedInfoPtr.value = value;

  int Cronet_RequestFinishedInfo_Destroy(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ) {
    return _Cronet_RequestFinishedInfo_Destroy(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfo_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_RequestFinishedInfo_Destroy>>(
          'Cronet_RequestFinishedInfo_Destroy');
  late final _dart_Cronet_RequestFinishedInfo_Destroy
      _Cronet_RequestFinishedInfo_Destroy =
      _Cronet_RequestFinishedInfo_Destroy_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_Destroy>();

  int Cronet_RequestFinishedInfo_metrics_set(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
    ffi.Pointer<Cronet_Metrics> metrics,
  ) {
    return _Cronet_RequestFinishedInfo_metrics_set(
      self,
      metrics,
    );
  }

  late final _Cronet_RequestFinishedInfo_metrics_set_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_RequestFinishedInfo_metrics_set>>(
      'Cronet_RequestFinishedInfo_metrics_set');
  late final _dart_Cronet_RequestFinishedInfo_metrics_set
      _Cronet_RequestFinishedInfo_metrics_set =
      _Cronet_RequestFinishedInfo_metrics_set_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_metrics_set>();

  void Cronet_RequestFinishedInfo_metrics_move(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
    ffi.Pointer<Cronet_Metrics> metrics,
  ) {
    return _Cronet_RequestFinishedInfo_metrics_move(
      self,
      metrics,
    );
  }

  late final _Cronet_RequestFinishedInfo_metrics_move_ptr = _lookup<
          ffi.NativeFunction<Native_Cronet_RequestFinishedInfo_metrics_move>>(
      'Cronet_RequestFinishedInfo_metrics_move');
  late final _dart_Cronet_RequestFinishedInfo_metrics_move
      _Cronet_RequestFinishedInfo_metrics_move =
      _Cronet_RequestFinishedInfo_metrics_move_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_metrics_move>();

  int Cronet_RequestFinishedInfo_annotations_add(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
    ffi.Pointer<ffi.Void> element,
  ) {
    return _Cronet_RequestFinishedInfo_annotations_add(
      self,
      element,
    );
  }

  late final _Cronet_RequestFinishedInfo_annotations_add_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_RequestFinishedInfo_annotations_add>>(
      'Cronet_RequestFinishedInfo_annotations_add');
  late final _dart_Cronet_RequestFinishedInfo_annotations_add
      _Cronet_RequestFinishedInfo_annotations_add =
      _Cronet_RequestFinishedInfo_annotations_add_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_annotations_add>();

  int Cronet_RequestFinishedInfo_finished_reason_set(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
    int finished_reason,
  ) {
    return _Cronet_RequestFinishedInfo_finished_reason_set(
      self,
      finished_reason,
    );
  }

  late final _Cronet_RequestFinishedInfo_finished_reason_set_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_RequestFinishedInfo_finished_reason_set>>(
      'Cronet_RequestFinishedInfo_finished_reason_set');
  late final _dart_Cronet_RequestFinishedInfo_finished_reason_set
      _Cronet_RequestFinishedInfo_finished_reason_set =
      _Cronet_RequestFinishedInfo_finished_reason_set_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_finished_reason_set>();

  int Cronet_RequestFinishedInfo_annotations_clear(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ) {
    return _Cronet_RequestFinishedInfo_annotations_clear(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfo_annotations_clear_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_RequestFinishedInfo_annotations_clear>>(
      'Cronet_RequestFinishedInfo_annotations_clear');
  late final _dart_Cronet_RequestFinishedInfo_annotations_clear
      _Cronet_RequestFinishedInfo_annotations_clear =
      _Cronet_RequestFinishedInfo_annotations_clear_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_annotations_clear>();

  late final ffi.Pointer<ffi.Int32>
      _Cronet_RequestFinishedInfo_FINISHED_REASON_1 =
      _lookup<ffi.Int32>('Cronet_RequestFinishedInfo_FINISHED_REASON');

  int get Cronet_RequestFinishedInfo_FINISHED_REASON_1 =>
      _Cronet_RequestFinishedInfo_FINISHED_REASON_1.value;

  set Cronet_RequestFinishedInfo_FINISHED_REASON_1(int value) =>
      _Cronet_RequestFinishedInfo_FINISHED_REASON_1.value = value;

  void Cronet_Engine_SetMockCertVerifierForTesting(
    int engine,
    ffi.Pointer<ffi.Void> raw_mock_cert_verifier,
  ) {
    return _Cronet_Engine_SetMockCertVerifierForTesting(
      engine,
      raw_mock_cert_verifier,
    );
  }

  late final _Cronet_Engine_SetMockCertVerifierForTesting_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_Engine_SetMockCertVerifierForTesting>>(
      'Cronet_Engine_SetMockCertVerifierForTesting');
  late final _dart_Cronet_Engine_SetMockCertVerifierForTesting
      _Cronet_Engine_SetMockCertVerifierForTesting =
      _Cronet_Engine_SetMockCertVerifierForTesting_ptr.asFunction<
          _dart_Cronet_Engine_SetMockCertVerifierForTesting>();

  ffi.Pointer<stream_engine> Cronet_Engine_GetStreamEngine(
    int engine,
  ) {
    return _Cronet_Engine_GetStreamEngine(
      engine,
    );
  }

  late final _Cronet_Engine_GetStreamEngine_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Engine_GetStreamEngine>>(
          'Cronet_Engine_GetStreamEngine');
  late final _dart_Cronet_Engine_GetStreamEngine
      _Cronet_Engine_GetStreamEngine = _Cronet_Engine_GetStreamEngine_ptr
          .asFunction<_dart_Cronet_Engine_GetStreamEngine>();

  late final ffi.Pointer<ffi.Int32> _cronet = _lookup<ffi.Int32>('cronet');

  int get cronet => _cronet.value;

  set cronet(int value) => _cronet.value = value;

  void PerfTest(
    ffi.Pointer<ffi.Int8> json_args,
  ) {
    return _PerfTest(
      json_args,
    );
  }

  late final _PerfTest_ptr =
      _lookup<ffi.NativeFunction<Native_PerfTest>>('PerfTest');
  late final _dart_PerfTest _PerfTest =
      _PerfTest_ptr.asFunction<_dart_PerfTest>();

  ffi.Pointer<ffi.Int32> __daylight() {
    return ___daylight();
  }

  late final ___daylight_ptr =
      _lookup<ffi.NativeFunction<Native___daylight>>('__daylight');
  late final _dart___daylight ___daylight =
      ___daylight_ptr.asFunction<_dart___daylight>();

  ffi.Pointer<ffi.Int64> __dstbias() {
    return ___dstbias();
  }

  late final ___dstbias_ptr =
      _lookup<ffi.NativeFunction<Native___dstbias>>('__dstbias');
  late final _dart___dstbias ___dstbias =
      ___dstbias_ptr.asFunction<_dart___dstbias>();

  ffi.Pointer<ffi.Int64> __timezone() {
    return ___timezone();
  }

  late final ___timezone_ptr =
      _lookup<ffi.NativeFunction<Native___timezone>>('__timezone');
  late final _dart___timezone ___timezone =
      ___timezone_ptr.asFunction<_dart___timezone>();

  ffi.Pointer<ffi.Pointer<ffi.Int8>> __tzname() {
    return ___tzname();
  }

  late final ___tzname_ptr =
      _lookup<ffi.NativeFunction<Native___tzname>>('__tzname');
  late final _dart___tzname ___tzname =
      ___tzname_ptr.asFunction<_dart___tzname>();

  int _get_daylight(
    ffi.Pointer<ffi.Int32> _Daylight,
  ) {
    return __get_daylight(
      _Daylight,
    );
  }

  late final __get_daylight_ptr =
      _lookup<ffi.NativeFunction<Native__get_daylight>>('_get_daylight');
  late final _dart__get_daylight __get_daylight =
      __get_daylight_ptr.asFunction<_dart__get_daylight>();

  int _get_dstbias(
    ffi.Pointer<ffi.Int64> _DaylightSavingsBias,
  ) {
    return __get_dstbias(
      _DaylightSavingsBias,
    );
  }

  late final __get_dstbias_ptr =
      _lookup<ffi.NativeFunction<Native__get_dstbias>>('_get_dstbias');
  late final _dart__get_dstbias __get_dstbias =
      __get_dstbias_ptr.asFunction<_dart__get_dstbias>();

  int _get_timezone(
    ffi.Pointer<ffi.Int64> _TimeZone,
  ) {
    return __get_timezone(
      _TimeZone,
    );
  }

  late final __get_timezone_ptr =
      _lookup<ffi.NativeFunction<Native__get_timezone>>('_get_timezone');
  late final _dart__get_timezone __get_timezone =
      __get_timezone_ptr.asFunction<_dart__get_timezone>();

  int _get_tzname(
    ffi.Pointer<ffi.Uint64> _ReturnValue,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    int _Index,
  ) {
    return __get_tzname(
      _ReturnValue,
      _Buffer,
      _SizeInBytes,
      _Index,
    );
  }

  late final __get_tzname_ptr =
      _lookup<ffi.NativeFunction<Native__get_tzname>>('_get_tzname');
  late final _dart__get_tzname __get_tzname =
      __get_tzname_ptr.asFunction<_dart__get_tzname>();

  ffi.Pointer<ffi.Int8> asctime(
    ffi.Pointer<tm> _Tm,
  ) {
    return _asctime(
      _Tm,
    );
  }

  late final _asctime_ptr =
      _lookup<ffi.NativeFunction<Native_asctime>>('asctime');
  late final _dart_asctime _asctime = _asctime_ptr.asFunction<_dart_asctime>();

  int asctime_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<tm> _Tm,
  ) {
    return _asctime_s(
      _Buffer,
      _SizeInBytes,
      _Tm,
    );
  }

  late final _asctime_s_ptr =
      _lookup<ffi.NativeFunction<Native_asctime_s>>('asctime_s');
  late final _dart_asctime_s _asctime_s =
      _asctime_s_ptr.asFunction<_dart_asctime_s>();

  int clock() {
    return _clock();
  }

  late final _clock_ptr = _lookup<ffi.NativeFunction<Native_clock>>('clock');
  late final _dart_clock _clock = _clock_ptr.asFunction<_dart_clock>();

  ffi.Pointer<ffi.Int8> _ctime32(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __ctime32(
      _Time,
    );
  }

  late final __ctime32_ptr =
      _lookup<ffi.NativeFunction<Native__ctime32>>('_ctime32');
  late final _dart__ctime32 __ctime32 =
      __ctime32_ptr.asFunction<_dart__ctime32>();

  int _ctime32_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __ctime32_s(
      _Buffer,
      _SizeInBytes,
      _Time,
    );
  }

  late final __ctime32_s_ptr =
      _lookup<ffi.NativeFunction<Native__ctime32_s>>('_ctime32_s');
  late final _dart__ctime32_s __ctime32_s =
      __ctime32_s_ptr.asFunction<_dart__ctime32_s>();

  ffi.Pointer<ffi.Int8> _ctime64(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __ctime64(
      _Time,
    );
  }

  late final __ctime64_ptr =
      _lookup<ffi.NativeFunction<Native__ctime64>>('_ctime64');
  late final _dart__ctime64 __ctime64 =
      __ctime64_ptr.asFunction<_dart__ctime64>();

  int _ctime64_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __ctime64_s(
      _Buffer,
      _SizeInBytes,
      _Time,
    );
  }

  late final __ctime64_s_ptr =
      _lookup<ffi.NativeFunction<Native__ctime64_s>>('_ctime64_s');
  late final _dart__ctime64_s __ctime64_s =
      __ctime64_s_ptr.asFunction<_dart__ctime64_s>();

  double _difftime32(
    int _Time1,
    int _Time2,
  ) {
    return __difftime32(
      _Time1,
      _Time2,
    );
  }

  late final __difftime32_ptr =
      _lookup<ffi.NativeFunction<Native__difftime32>>('_difftime32');
  late final _dart__difftime32 __difftime32 =
      __difftime32_ptr.asFunction<_dart__difftime32>();

  double _difftime64(
    int _Time1,
    int _Time2,
  ) {
    return __difftime64(
      _Time1,
      _Time2,
    );
  }

  late final __difftime64_ptr =
      _lookup<ffi.NativeFunction<Native__difftime64>>('_difftime64');
  late final _dart__difftime64 __difftime64 =
      __difftime64_ptr.asFunction<_dart__difftime64>();

  ffi.Pointer<tm> _gmtime32(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __gmtime32(
      _Time,
    );
  }

  late final __gmtime32_ptr =
      _lookup<ffi.NativeFunction<Native__gmtime32>>('_gmtime32');
  late final _dart__gmtime32 __gmtime32 =
      __gmtime32_ptr.asFunction<_dart__gmtime32>();

  int _gmtime32_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __gmtime32_s(
      _Tm,
      _Time,
    );
  }

  late final __gmtime32_s_ptr =
      _lookup<ffi.NativeFunction<Native__gmtime32_s>>('_gmtime32_s');
  late final _dart__gmtime32_s __gmtime32_s =
      __gmtime32_s_ptr.asFunction<_dart__gmtime32_s>();

  ffi.Pointer<tm> _gmtime64(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __gmtime64(
      _Time,
    );
  }

  late final __gmtime64_ptr =
      _lookup<ffi.NativeFunction<Native__gmtime64>>('_gmtime64');
  late final _dart__gmtime64 __gmtime64 =
      __gmtime64_ptr.asFunction<_dart__gmtime64>();

  int _gmtime64_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __gmtime64_s(
      _Tm,
      _Time,
    );
  }

  late final __gmtime64_s_ptr =
      _lookup<ffi.NativeFunction<Native__gmtime64_s>>('_gmtime64_s');
  late final _dart__gmtime64_s __gmtime64_s =
      __gmtime64_s_ptr.asFunction<_dart__gmtime64_s>();

  ffi.Pointer<tm> _localtime32(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __localtime32(
      _Time,
    );
  }

  late final __localtime32_ptr =
      _lookup<ffi.NativeFunction<Native__localtime32>>('_localtime32');
  late final _dart__localtime32 __localtime32 =
      __localtime32_ptr.asFunction<_dart__localtime32>();

  int _localtime32_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __localtime32_s(
      _Tm,
      _Time,
    );
  }

  late final __localtime32_s_ptr =
      _lookup<ffi.NativeFunction<Native__localtime32_s>>('_localtime32_s');
  late final _dart__localtime32_s __localtime32_s =
      __localtime32_s_ptr.asFunction<_dart__localtime32_s>();

  ffi.Pointer<tm> _localtime64(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __localtime64(
      _Time,
    );
  }

  late final __localtime64_ptr =
      _lookup<ffi.NativeFunction<Native__localtime64>>('_localtime64');
  late final _dart__localtime64 __localtime64 =
      __localtime64_ptr.asFunction<_dart__localtime64>();

  int _localtime64_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __localtime64_s(
      _Tm,
      _Time,
    );
  }

  late final __localtime64_s_ptr =
      _lookup<ffi.NativeFunction<Native__localtime64_s>>('_localtime64_s');
  late final _dart__localtime64_s __localtime64_s =
      __localtime64_s_ptr.asFunction<_dart__localtime64_s>();

  int _mkgmtime32(
    ffi.Pointer<tm> _Tm,
  ) {
    return __mkgmtime32(
      _Tm,
    );
  }

  late final __mkgmtime32_ptr =
      _lookup<ffi.NativeFunction<Native__mkgmtime32>>('_mkgmtime32');
  late final _dart__mkgmtime32 __mkgmtime32 =
      __mkgmtime32_ptr.asFunction<_dart__mkgmtime32>();

  int _mkgmtime64(
    ffi.Pointer<tm> _Tm,
  ) {
    return __mkgmtime64(
      _Tm,
    );
  }

  late final __mkgmtime64_ptr =
      _lookup<ffi.NativeFunction<Native__mkgmtime64>>('_mkgmtime64');
  late final _dart__mkgmtime64 __mkgmtime64 =
      __mkgmtime64_ptr.asFunction<_dart__mkgmtime64>();

  int _mktime32(
    ffi.Pointer<tm> _Tm,
  ) {
    return __mktime32(
      _Tm,
    );
  }

  late final __mktime32_ptr =
      _lookup<ffi.NativeFunction<Native__mktime32>>('_mktime32');
  late final _dart__mktime32 __mktime32 =
      __mktime32_ptr.asFunction<_dart__mktime32>();

  int _mktime64(
    ffi.Pointer<tm> _Tm,
  ) {
    return __mktime64(
      _Tm,
    );
  }

  late final __mktime64_ptr =
      _lookup<ffi.NativeFunction<Native__mktime64>>('_mktime64');
  late final _dart__mktime64 __mktime64 =
      __mktime64_ptr.asFunction<_dart__mktime64>();

  int strftime(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<tm> _Tm,
  ) {
    return _strftime(
      _Buffer,
      _SizeInBytes,
      _Format,
      _Tm,
    );
  }

  late final _strftime_ptr =
      _lookup<ffi.NativeFunction<Native_strftime>>('strftime');
  late final _dart_strftime _strftime =
      _strftime_ptr.asFunction<_dart_strftime>();

  int _strftime_l(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _MaxSize,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strftime_l(
      _Buffer,
      _MaxSize,
      _Format,
      _Tm,
      _Locale,
    );
  }

  late final __strftime_l_ptr =
      _lookup<ffi.NativeFunction<Native__strftime_l>>('_strftime_l');
  late final _dart__strftime_l __strftime_l =
      __strftime_l_ptr.asFunction<_dart__strftime_l>();

  int _strdate_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
  ) {
    return __strdate_s(
      _Buffer,
      _SizeInBytes,
    );
  }

  late final __strdate_s_ptr =
      _lookup<ffi.NativeFunction<Native__strdate_s>>('_strdate_s');
  late final _dart__strdate_s __strdate_s =
      __strdate_s_ptr.asFunction<_dart__strdate_s>();

  ffi.Pointer<ffi.Int8> _strdate(
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return __strdate(
      _Buffer,
    );
  }

  late final __strdate_ptr =
      _lookup<ffi.NativeFunction<Native__strdate>>('_strdate');
  late final _dart__strdate __strdate =
      __strdate_ptr.asFunction<_dart__strdate>();

  int _strtime_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
  ) {
    return __strtime_s(
      _Buffer,
      _SizeInBytes,
    );
  }

  late final __strtime_s_ptr =
      _lookup<ffi.NativeFunction<Native__strtime_s>>('_strtime_s');
  late final _dart__strtime_s __strtime_s =
      __strtime_s_ptr.asFunction<_dart__strtime_s>();

  ffi.Pointer<ffi.Int8> _strtime(
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return __strtime(
      _Buffer,
    );
  }

  late final __strtime_ptr =
      _lookup<ffi.NativeFunction<Native__strtime>>('_strtime');
  late final _dart__strtime __strtime =
      __strtime_ptr.asFunction<_dart__strtime>();

  int _time32(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __time32(
      _Time,
    );
  }

  late final __time32_ptr =
      _lookup<ffi.NativeFunction<Native__time32>>('_time32');
  late final _dart__time32 __time32 = __time32_ptr.asFunction<_dart__time32>();

  int _time64(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    return __time64(
      _Time,
    );
  }

  late final __time64_ptr =
      _lookup<ffi.NativeFunction<Native__time64>>('_time64');
  late final _dart__time64 __time64 = __time64_ptr.asFunction<_dart__time64>();

  int _timespec32_get(
    ffi.Pointer<_timespec32> _Ts,
    int _Base,
  ) {
    return __timespec32_get(
      _Ts,
      _Base,
    );
  }

  late final __timespec32_get_ptr =
      _lookup<ffi.NativeFunction<Native__timespec32_get>>('_timespec32_get');
  late final _dart__timespec32_get __timespec32_get =
      __timespec32_get_ptr.asFunction<_dart__timespec32_get>();

  int _timespec64_get(
    ffi.Pointer<_timespec64> _Ts,
    int _Base,
  ) {
    return __timespec64_get(
      _Ts,
      _Base,
    );
  }

  late final __timespec64_get_ptr =
      _lookup<ffi.NativeFunction<Native__timespec64_get>>('_timespec64_get');
  late final _dart__timespec64_get __timespec64_get =
      __timespec64_get_ptr.asFunction<_dart__timespec64_get>();

  void _tzset() {
    return __tzset();
  }

  late final __tzset_ptr = _lookup<ffi.NativeFunction<Native__tzset>>('_tzset');
  late final _dart__tzset __tzset = __tzset_ptr.asFunction<_dart__tzset>();

  int _getsystime(
    ffi.Pointer<tm> _Tm,
  ) {
    return __getsystime(
      _Tm,
    );
  }

  late final __getsystime_ptr =
      _lookup<ffi.NativeFunction<Native__getsystime>>('_getsystime');
  late final _dart__getsystime __getsystime =
      __getsystime_ptr.asFunction<_dart__getsystime>();

  int _setsystime(
    ffi.Pointer<tm> _Tm,
    int _Milliseconds,
  ) {
    return __setsystime(
      _Tm,
      _Milliseconds,
    );
  }

  late final __setsystime_ptr =
      _lookup<ffi.NativeFunction<Native__setsystime>>('_setsystime');
  late final _dart__setsystime __setsystime =
      __setsystime_ptr.asFunction<_dart__setsystime>();

  void tzset() {
    return _tzset_1();
  }

  late final _tzset_ptr = _lookup<ffi.NativeFunction<Native_tzset>>('tzset');
  late final _dart_tzset _tzset_1 = _tzset_ptr.asFunction<_dart_tzset>();

  int _cgetws_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Uint64> _SizeRead,
  ) {
    return __cgetws_s(
      _Buffer,
      _BufferCount,
      _SizeRead,
    );
  }

  late final __cgetws_s_ptr =
      _lookup<ffi.NativeFunction<Native__cgetws_s>>('_cgetws_s');
  late final _dart__cgetws_s __cgetws_s =
      __cgetws_s_ptr.asFunction<_dart__cgetws_s>();

  int xtime_get(
    ffi.Pointer<ffi.Int32> arg0,
    int arg1,
  ) {
    return _xtime_get(
      arg0,
      arg1,
    );
  }

  late final _xtime_get_ptr =
      _lookup<ffi.NativeFunction<Native_xtime_get>>('xtime_get');
  late final _dart_xtime_get _xtime_get =
      _xtime_get_ptr.asFunction<_dart_xtime_get>();

  int _Xtime_diff_to_millis(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return __Xtime_diff_to_millis(
      arg0,
    );
  }

  late final __Xtime_diff_to_millis_ptr =
      _lookup<ffi.NativeFunction<Native__Xtime_diff_to_millis>>(
          '_Xtime_diff_to_millis');
  late final _dart__Xtime_diff_to_millis __Xtime_diff_to_millis =
      __Xtime_diff_to_millis_ptr.asFunction<_dart__Xtime_diff_to_millis>();

  int _Xtime_diff_to_millis2(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    return __Xtime_diff_to_millis2(
      arg0,
      arg1,
    );
  }

  late final __Xtime_diff_to_millis2_ptr =
      _lookup<ffi.NativeFunction<Native__Xtime_diff_to_millis2>>(
          '_Xtime_diff_to_millis2');
  late final _dart__Xtime_diff_to_millis2 __Xtime_diff_to_millis2 =
      __Xtime_diff_to_millis2_ptr.asFunction<_dart__Xtime_diff_to_millis2>();

  int _Xtime_get_ticks() {
    return __Xtime_get_ticks();
  }

  late final __Xtime_get_ticks_ptr =
      _lookup<ffi.NativeFunction<Native__Xtime_get_ticks>>('_Xtime_get_ticks');
  late final _dart__Xtime_get_ticks __Xtime_get_ticks =
      __Xtime_get_ticks_ptr.asFunction<_dart__Xtime_get_ticks>();

  int _Query_perf_counter() {
    return __Query_perf_counter();
  }

  late final __Query_perf_counter_ptr =
      _lookup<ffi.NativeFunction<Native__Query_perf_counter>>(
          '_Query_perf_counter');
  late final _dart__Query_perf_counter __Query_perf_counter =
      __Query_perf_counter_ptr.asFunction<_dart__Query_perf_counter>();

  int _Query_perf_frequency() {
    return __Query_perf_frequency();
  }

  late final __Query_perf_frequency_ptr =
      _lookup<ffi.NativeFunction<Native__Query_perf_frequency>>(
          '_Query_perf_frequency');
  late final _dart__Query_perf_frequency __Query_perf_frequency =
      __Query_perf_frequency_ptr.asFunction<_dart__Query_perf_frequency>();

  late final ffi.Pointer<ffi.Int32> __Thrd_id_t =
      _lookup<ffi.Int32>('_Thrd_id_t');

  int get _Thrd_id_t => __Thrd_id_t.value;

  set _Thrd_id_t(int value) => __Thrd_id_t.value = value;

  late final ffi.Pointer<ffi.Int32> __Mtx_t = _lookup<ffi.Int32>('_Mtx_t');

  int get _Mtx_t => __Mtx_t.value;

  set _Mtx_t(int value) => __Mtx_t.value = value;

  late final ffi.Pointer<ffi.Int32> __Cnd_t = _lookup<ffi.Int32>('_Cnd_t');

  int get _Cnd_t => __Cnd_t.value;

  set _Cnd_t(int value) => __Cnd_t.value = value;

  int _Thrd_detach() {
    return __Thrd_detach();
  }

  late final __Thrd_detach_ptr =
      _lookup<ffi.NativeFunction<Native__Thrd_detach>>('_Thrd_detach');
  late final _dart__Thrd_detach __Thrd_detach =
      __Thrd_detach_ptr.asFunction<_dart__Thrd_detach>();

  int _Thrd_join() {
    return __Thrd_join();
  }

  late final __Thrd_join_ptr =
      _lookup<ffi.NativeFunction<Native__Thrd_join>>('_Thrd_join');
  late final _dart__Thrd_join __Thrd_join =
      __Thrd_join_ptr.asFunction<_dart__Thrd_join>();

  void _Thrd_sleep(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return __Thrd_sleep(
      arg0,
    );
  }

  late final __Thrd_sleep_ptr =
      _lookup<ffi.NativeFunction<Native__Thrd_sleep>>('_Thrd_sleep');
  late final _dart__Thrd_sleep __Thrd_sleep =
      __Thrd_sleep_ptr.asFunction<_dart__Thrd_sleep>();

  void _Thrd_yield() {
    return __Thrd_yield();
  }

  late final __Thrd_yield_ptr =
      _lookup<ffi.NativeFunction<Native__Thrd_yield>>('_Thrd_yield');
  late final _dart__Thrd_yield __Thrd_yield =
      __Thrd_yield_ptr.asFunction<_dart__Thrd_yield>();

  int _Thrd_hardware_concurrency() {
    return __Thrd_hardware_concurrency();
  }

  late final __Thrd_hardware_concurrency_ptr =
      _lookup<ffi.NativeFunction<Native__Thrd_hardware_concurrency>>(
          '_Thrd_hardware_concurrency');
  late final _dart__Thrd_hardware_concurrency __Thrd_hardware_concurrency =
      __Thrd_hardware_concurrency_ptr
          .asFunction<_dart__Thrd_hardware_concurrency>();

  int _Thrd_id() {
    return __Thrd_id();
  }

  late final __Thrd_id_ptr =
      _lookup<ffi.NativeFunction<Native__Thrd_id>>('_Thrd_id');
  late final _dart__Thrd_id __Thrd_id =
      __Thrd_id_ptr.asFunction<_dart__Thrd_id>();

  int _Mtx_init(
    ffi.Pointer<ffi.Int32> arg0,
    int arg1,
  ) {
    return __Mtx_init(
      arg0,
      arg1,
    );
  }

  late final __Mtx_init_ptr =
      _lookup<ffi.NativeFunction<Native__Mtx_init>>('_Mtx_init');
  late final _dart__Mtx_init __Mtx_init =
      __Mtx_init_ptr.asFunction<_dart__Mtx_init>();

  void _Mtx_destroy() {
    return __Mtx_destroy();
  }

  late final __Mtx_destroy_ptr =
      _lookup<ffi.NativeFunction<Native__Mtx_destroy>>('_Mtx_destroy');
  late final _dart__Mtx_destroy __Mtx_destroy =
      __Mtx_destroy_ptr.asFunction<_dart__Mtx_destroy>();

  void _Mtx_init_in_situ() {
    return __Mtx_init_in_situ();
  }

  late final __Mtx_init_in_situ_ptr =
      _lookup<ffi.NativeFunction<Native__Mtx_init_in_situ>>(
          '_Mtx_init_in_situ');
  late final _dart__Mtx_init_in_situ __Mtx_init_in_situ =
      __Mtx_init_in_situ_ptr.asFunction<_dart__Mtx_init_in_situ>();

  void _Mtx_destroy_in_situ() {
    return __Mtx_destroy_in_situ();
  }

  late final __Mtx_destroy_in_situ_ptr =
      _lookup<ffi.NativeFunction<Native__Mtx_destroy_in_situ>>(
          '_Mtx_destroy_in_situ');
  late final _dart__Mtx_destroy_in_situ __Mtx_destroy_in_situ =
      __Mtx_destroy_in_situ_ptr.asFunction<_dart__Mtx_destroy_in_situ>();

  int _Mtx_current_owns() {
    return __Mtx_current_owns();
  }

  late final __Mtx_current_owns_ptr =
      _lookup<ffi.NativeFunction<Native__Mtx_current_owns>>(
          '_Mtx_current_owns');
  late final _dart__Mtx_current_owns __Mtx_current_owns =
      __Mtx_current_owns_ptr.asFunction<_dart__Mtx_current_owns>();

  int _Mtx_lock() {
    return __Mtx_lock();
  }

  late final __Mtx_lock_ptr =
      _lookup<ffi.NativeFunction<Native__Mtx_lock>>('_Mtx_lock');
  late final _dart__Mtx_lock __Mtx_lock =
      __Mtx_lock_ptr.asFunction<_dart__Mtx_lock>();

  int _Mtx_trylock() {
    return __Mtx_trylock();
  }

  late final __Mtx_trylock_ptr =
      _lookup<ffi.NativeFunction<Native__Mtx_trylock>>('_Mtx_trylock');
  late final _dart__Mtx_trylock __Mtx_trylock =
      __Mtx_trylock_ptr.asFunction<_dart__Mtx_trylock>();

  int _Mtx_timedlock() {
    return __Mtx_timedlock();
  }

  late final __Mtx_timedlock_ptr =
      _lookup<ffi.NativeFunction<Native__Mtx_timedlock>>('_Mtx_timedlock');
  late final _dart__Mtx_timedlock __Mtx_timedlock =
      __Mtx_timedlock_ptr.asFunction<_dart__Mtx_timedlock>();

  int _Mtx_unlock() {
    return __Mtx_unlock();
  }

  late final __Mtx_unlock_ptr =
      _lookup<ffi.NativeFunction<Native__Mtx_unlock>>('_Mtx_unlock');
  late final _dart__Mtx_unlock __Mtx_unlock =
      __Mtx_unlock_ptr.asFunction<_dart__Mtx_unlock>();

  ffi.Pointer<ffi.Void> _Mtx_getconcrtcs() {
    return __Mtx_getconcrtcs();
  }

  late final __Mtx_getconcrtcs_ptr =
      _lookup<ffi.NativeFunction<Native__Mtx_getconcrtcs>>('_Mtx_getconcrtcs');
  late final _dart__Mtx_getconcrtcs __Mtx_getconcrtcs =
      __Mtx_getconcrtcs_ptr.asFunction<_dart__Mtx_getconcrtcs>();

  void _Mtx_clear_owner() {
    return __Mtx_clear_owner();
  }

  late final __Mtx_clear_owner_ptr =
      _lookup<ffi.NativeFunction<Native__Mtx_clear_owner>>('_Mtx_clear_owner');
  late final _dart__Mtx_clear_owner __Mtx_clear_owner =
      __Mtx_clear_owner_ptr.asFunction<_dart__Mtx_clear_owner>();

  void _Mtx_reset_owner() {
    return __Mtx_reset_owner();
  }

  late final __Mtx_reset_owner_ptr =
      _lookup<ffi.NativeFunction<Native__Mtx_reset_owner>>('_Mtx_reset_owner');
  late final _dart__Mtx_reset_owner __Mtx_reset_owner =
      __Mtx_reset_owner_ptr.asFunction<_dart__Mtx_reset_owner>();

  late final ffi.Pointer<ffi.Int32> __Smtx_t = _lookup<ffi.Int32>('_Smtx_t');

  int get _Smtx_t => __Smtx_t.value;

  set _Smtx_t(int value) => __Smtx_t.value = value;

  void _Smtx_lock_exclusive(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return __Smtx_lock_exclusive(
      arg0,
    );
  }

  late final __Smtx_lock_exclusive_ptr =
      _lookup<ffi.NativeFunction<Native__Smtx_lock_exclusive>>(
          '_Smtx_lock_exclusive');
  late final _dart__Smtx_lock_exclusive __Smtx_lock_exclusive =
      __Smtx_lock_exclusive_ptr.asFunction<_dart__Smtx_lock_exclusive>();

  void _Smtx_lock_shared(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return __Smtx_lock_shared(
      arg0,
    );
  }

  late final __Smtx_lock_shared_ptr =
      _lookup<ffi.NativeFunction<Native__Smtx_lock_shared>>(
          '_Smtx_lock_shared');
  late final _dart__Smtx_lock_shared __Smtx_lock_shared =
      __Smtx_lock_shared_ptr.asFunction<_dart__Smtx_lock_shared>();

  int _Smtx_try_lock_exclusive(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return __Smtx_try_lock_exclusive(
      arg0,
    );
  }

  late final __Smtx_try_lock_exclusive_ptr =
      _lookup<ffi.NativeFunction<Native__Smtx_try_lock_exclusive>>(
          '_Smtx_try_lock_exclusive');
  late final _dart__Smtx_try_lock_exclusive __Smtx_try_lock_exclusive =
      __Smtx_try_lock_exclusive_ptr
          .asFunction<_dart__Smtx_try_lock_exclusive>();

  int _Smtx_try_lock_shared(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return __Smtx_try_lock_shared(
      arg0,
    );
  }

  late final __Smtx_try_lock_shared_ptr =
      _lookup<ffi.NativeFunction<Native__Smtx_try_lock_shared>>(
          '_Smtx_try_lock_shared');
  late final _dart__Smtx_try_lock_shared __Smtx_try_lock_shared =
      __Smtx_try_lock_shared_ptr.asFunction<_dart__Smtx_try_lock_shared>();

  void _Smtx_unlock_exclusive(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return __Smtx_unlock_exclusive(
      arg0,
    );
  }

  late final __Smtx_unlock_exclusive_ptr =
      _lookup<ffi.NativeFunction<Native__Smtx_unlock_exclusive>>(
          '_Smtx_unlock_exclusive');
  late final _dart__Smtx_unlock_exclusive __Smtx_unlock_exclusive =
      __Smtx_unlock_exclusive_ptr.asFunction<_dart__Smtx_unlock_exclusive>();

  void _Smtx_unlock_shared(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return __Smtx_unlock_shared(
      arg0,
    );
  }

  late final __Smtx_unlock_shared_ptr =
      _lookup<ffi.NativeFunction<Native__Smtx_unlock_shared>>(
          '_Smtx_unlock_shared');
  late final _dart__Smtx_unlock_shared __Smtx_unlock_shared =
      __Smtx_unlock_shared_ptr.asFunction<_dart__Smtx_unlock_shared>();

  int _Cnd_init(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return __Cnd_init(
      arg0,
    );
  }

  late final __Cnd_init_ptr =
      _lookup<ffi.NativeFunction<Native__Cnd_init>>('_Cnd_init');
  late final _dart__Cnd_init __Cnd_init =
      __Cnd_init_ptr.asFunction<_dart__Cnd_init>();

  void _Cnd_destroy() {
    return __Cnd_destroy();
  }

  late final __Cnd_destroy_ptr =
      _lookup<ffi.NativeFunction<Native__Cnd_destroy>>('_Cnd_destroy');
  late final _dart__Cnd_destroy __Cnd_destroy =
      __Cnd_destroy_ptr.asFunction<_dart__Cnd_destroy>();

  void _Cnd_init_in_situ() {
    return __Cnd_init_in_situ();
  }

  late final __Cnd_init_in_situ_ptr =
      _lookup<ffi.NativeFunction<Native__Cnd_init_in_situ>>(
          '_Cnd_init_in_situ');
  late final _dart__Cnd_init_in_situ __Cnd_init_in_situ =
      __Cnd_init_in_situ_ptr.asFunction<_dart__Cnd_init_in_situ>();

  void _Cnd_destroy_in_situ() {
    return __Cnd_destroy_in_situ();
  }

  late final __Cnd_destroy_in_situ_ptr =
      _lookup<ffi.NativeFunction<Native__Cnd_destroy_in_situ>>(
          '_Cnd_destroy_in_situ');
  late final _dart__Cnd_destroy_in_situ __Cnd_destroy_in_situ =
      __Cnd_destroy_in_situ_ptr.asFunction<_dart__Cnd_destroy_in_situ>();

  int _Cnd_wait() {
    return __Cnd_wait();
  }

  late final __Cnd_wait_ptr =
      _lookup<ffi.NativeFunction<Native__Cnd_wait>>('_Cnd_wait');
  late final _dart__Cnd_wait __Cnd_wait =
      __Cnd_wait_ptr.asFunction<_dart__Cnd_wait>();

  int _Cnd_timedwait() {
    return __Cnd_timedwait();
  }

  late final __Cnd_timedwait_ptr =
      _lookup<ffi.NativeFunction<Native__Cnd_timedwait>>('_Cnd_timedwait');
  late final _dart__Cnd_timedwait __Cnd_timedwait =
      __Cnd_timedwait_ptr.asFunction<_dart__Cnd_timedwait>();

  int _Cnd_broadcast() {
    return __Cnd_broadcast();
  }

  late final __Cnd_broadcast_ptr =
      _lookup<ffi.NativeFunction<Native__Cnd_broadcast>>('_Cnd_broadcast');
  late final _dart__Cnd_broadcast __Cnd_broadcast =
      __Cnd_broadcast_ptr.asFunction<_dart__Cnd_broadcast>();

  int _Cnd_signal() {
    return __Cnd_signal();
  }

  late final __Cnd_signal_ptr =
      _lookup<ffi.NativeFunction<Native__Cnd_signal>>('_Cnd_signal');
  late final _dart__Cnd_signal __Cnd_signal =
      __Cnd_signal_ptr.asFunction<_dart__Cnd_signal>();

  void _Cnd_register_at_thread_exit() {
    return __Cnd_register_at_thread_exit();
  }

  late final __Cnd_register_at_thread_exit_ptr =
      _lookup<ffi.NativeFunction<Native__Cnd_register_at_thread_exit>>(
          '_Cnd_register_at_thread_exit');
  late final _dart__Cnd_register_at_thread_exit __Cnd_register_at_thread_exit =
      __Cnd_register_at_thread_exit_ptr
          .asFunction<_dart__Cnd_register_at_thread_exit>();

  void _Cnd_unregister_at_thread_exit() {
    return __Cnd_unregister_at_thread_exit();
  }

  late final __Cnd_unregister_at_thread_exit_ptr =
      _lookup<ffi.NativeFunction<Native__Cnd_unregister_at_thread_exit>>(
          '_Cnd_unregister_at_thread_exit');
  late final _dart__Cnd_unregister_at_thread_exit
      __Cnd_unregister_at_thread_exit = __Cnd_unregister_at_thread_exit_ptr
          .asFunction<_dart__Cnd_unregister_at_thread_exit>();

  void _Cnd_do_broadcast_at_thread_exit() {
    return __Cnd_do_broadcast_at_thread_exit();
  }

  late final __Cnd_do_broadcast_at_thread_exit_ptr =
      _lookup<ffi.NativeFunction<Native__Cnd_do_broadcast_at_thread_exit>>(
          '_Cnd_do_broadcast_at_thread_exit');
  late final _dart__Cnd_do_broadcast_at_thread_exit
      __Cnd_do_broadcast_at_thread_exit = __Cnd_do_broadcast_at_thread_exit_ptr
          .asFunction<_dart__Cnd_do_broadcast_at_thread_exit>();

  void _lock_locales() {
    return __lock_locales();
  }

  late final __lock_locales_ptr =
      _lookup<ffi.NativeFunction<Native__lock_locales>>('_lock_locales');
  late final _dart__lock_locales __lock_locales =
      __lock_locales_ptr.asFunction<_dart__lock_locales>();

  void _unlock_locales() {
    return __unlock_locales();
  }

  late final __unlock_locales_ptr =
      _lookup<ffi.NativeFunction<Native__unlock_locales>>('_unlock_locales');
  late final _dart__unlock_locales __unlock_locales =
      __unlock_locales_ptr.asFunction<_dart__unlock_locales>();

  int _configthreadlocale(
    int _Flag,
  ) {
    return __configthreadlocale(
      _Flag,
    );
  }

  late final __configthreadlocale_ptr =
      _lookup<ffi.NativeFunction<Native__configthreadlocale>>(
          '_configthreadlocale');
  late final _dart__configthreadlocale __configthreadlocale =
      __configthreadlocale_ptr.asFunction<_dart__configthreadlocale>();

  ffi.Pointer<ffi.Int8> setlocale(
    int _Category,
    ffi.Pointer<ffi.Int8> _Locale,
  ) {
    return _setlocale(
      _Category,
      _Locale,
    );
  }

  late final _setlocale_ptr =
      _lookup<ffi.NativeFunction<Native_setlocale>>('setlocale');
  late final _dart_setlocale _setlocale =
      _setlocale_ptr.asFunction<_dart_setlocale>();

  ffi.Pointer<lconv> localeconv() {
    return _localeconv();
  }

  late final _localeconv_ptr =
      _lookup<ffi.NativeFunction<Native_localeconv>>('localeconv');
  late final _dart_localeconv _localeconv =
      _localeconv_ptr.asFunction<_dart_localeconv>();

  ffi.Pointer<__crt_locale_pointers> _get_current_locale() {
    return __get_current_locale();
  }

  late final __get_current_locale_ptr =
      _lookup<ffi.NativeFunction<Native__get_current_locale>>(
          '_get_current_locale');
  late final _dart__get_current_locale __get_current_locale =
      __get_current_locale_ptr.asFunction<_dart__get_current_locale>();

  ffi.Pointer<__crt_locale_pointers> _create_locale(
    int _Category,
    ffi.Pointer<ffi.Int8> _Locale,
  ) {
    return __create_locale(
      _Category,
      _Locale,
    );
  }

  late final __create_locale_ptr =
      _lookup<ffi.NativeFunction<Native__create_locale>>('_create_locale');
  late final _dart__create_locale __create_locale =
      __create_locale_ptr.asFunction<_dart__create_locale>();

  void _free_locale(
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __free_locale(
      _Locale,
    );
  }

  late final __free_locale_ptr =
      _lookup<ffi.NativeFunction<Native__free_locale>>('_free_locale');
  late final _dart__free_locale __free_locale =
      __free_locale_ptr.asFunction<_dart__free_locale>();

  ffi.Pointer<ffi.Pointer<ffi.Uint16>> ___lc_locale_name_func() {
    return ____lc_locale_name_func();
  }

  late final ____lc_locale_name_func_ptr =
      _lookup<ffi.NativeFunction<Native____lc_locale_name_func>>(
          '___lc_locale_name_func');
  late final _dart____lc_locale_name_func ____lc_locale_name_func =
      ____lc_locale_name_func_ptr.asFunction<_dart____lc_locale_name_func>();

  int ___lc_codepage_func() {
    return ____lc_codepage_func();
  }

  late final ____lc_codepage_func_ptr =
      _lookup<ffi.NativeFunction<Native____lc_codepage_func>>(
          '___lc_codepage_func');
  late final _dart____lc_codepage_func ____lc_codepage_func =
      ____lc_codepage_func_ptr.asFunction<_dart____lc_codepage_func>();

  int ___lc_collate_cp_func() {
    return ____lc_collate_cp_func();
  }

  late final ____lc_collate_cp_func_ptr =
      _lookup<ffi.NativeFunction<Native____lc_collate_cp_func>>(
          '___lc_collate_cp_func');
  late final _dart____lc_collate_cp_func ____lc_collate_cp_func =
      ____lc_collate_cp_func_ptr.asFunction<_dart____lc_collate_cp_func>();

  ffi.Pointer<ffi.Int8> _Getdays() {
    return __Getdays();
  }

  late final __Getdays_ptr =
      _lookup<ffi.NativeFunction<Native__Getdays>>('_Getdays');
  late final _dart__Getdays __Getdays =
      __Getdays_ptr.asFunction<_dart__Getdays>();

  ffi.Pointer<ffi.Int8> _Getmonths() {
    return __Getmonths();
  }

  late final __Getmonths_ptr =
      _lookup<ffi.NativeFunction<Native__Getmonths>>('_Getmonths');
  late final _dart__Getmonths __Getmonths =
      __Getmonths_ptr.asFunction<_dart__Getmonths>();

  ffi.Pointer<ffi.Void> _Gettnames() {
    return __Gettnames();
  }

  late final __Gettnames_ptr =
      _lookup<ffi.NativeFunction<Native__Gettnames>>('_Gettnames');
  late final _dart__Gettnames __Gettnames =
      __Gettnames_ptr.asFunction<_dart__Gettnames>();

  ffi.Pointer<ffi.Uint16> _W_Getdays() {
    return __W_Getdays();
  }

  late final __W_Getdays_ptr =
      _lookup<ffi.NativeFunction<Native__W_Getdays>>('_W_Getdays');
  late final _dart__W_Getdays __W_Getdays =
      __W_Getdays_ptr.asFunction<_dart__W_Getdays>();

  ffi.Pointer<ffi.Uint16> _W_Getmonths() {
    return __W_Getmonths();
  }

  late final __W_Getmonths_ptr =
      _lookup<ffi.NativeFunction<Native__W_Getmonths>>('_W_Getmonths');
  late final _dart__W_Getmonths __W_Getmonths =
      __W_Getmonths_ptr.asFunction<_dart__W_Getmonths>();

  ffi.Pointer<ffi.Void> _W_Gettnames() {
    return __W_Gettnames();
  }

  late final __W_Gettnames_ptr =
      _lookup<ffi.NativeFunction<Native__W_Gettnames>>('_W_Gettnames');
  late final _dart__W_Gettnames __W_Gettnames =
      __W_Gettnames_ptr.asFunction<_dart__W_Gettnames>();

  int _Strftime(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Max_size,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<tm> _Timeptr,
    ffi.Pointer<ffi.Void> _Lc_time_arg,
  ) {
    return __Strftime(
      _Buffer,
      _Max_size,
      _Format,
      _Timeptr,
      _Lc_time_arg,
    );
  }

  late final __Strftime_ptr =
      _lookup<ffi.NativeFunction<Native__Strftime>>('_Strftime');
  late final _dart__Strftime __Strftime =
      __Strftime_ptr.asFunction<_dart__Strftime>();

  int _Wcsftime(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _Max_size,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<tm> _Timeptr,
    ffi.Pointer<ffi.Void> _Lc_time_arg,
  ) {
    return __Wcsftime(
      _Buffer,
      _Max_size,
      _Format,
      _Timeptr,
      _Lc_time_arg,
    );
  }

  late final __Wcsftime_ptr =
      _lookup<ffi.NativeFunction<Native__Wcsftime>>('_Wcsftime');
  late final _dart__Wcsftime __Wcsftime =
      __Wcsftime_ptr.asFunction<_dart__Wcsftime>();

  int _Getcoll() {
    return __Getcoll();
  }

  late final __Getcoll_ptr =
      _lookup<ffi.NativeFunction<Native__Getcoll>>('_Getcoll');
  late final _dart__Getcoll __Getcoll =
      __Getcoll_ptr.asFunction<_dart__Getcoll>();

  _Ctypevec _Getctype() {
    return __Getctype();
  }

  late final __Getctype_ptr =
      _lookup<ffi.NativeFunction<Native__Getctype>>('_Getctype');
  late final _dart__Getctype __Getctype =
      __Getctype_ptr.asFunction<_dart__Getctype>();

  int _Getdateorder() {
    return __Getdateorder();
  }

  late final __Getdateorder_ptr =
      _lookup<ffi.NativeFunction<Native__Getdateorder>>('_Getdateorder');
  late final _dart__Getdateorder __Getdateorder =
      __Getdateorder_ptr.asFunction<_dart__Getdateorder>();

  int _Mbrtowc(
    ffi.Pointer<ffi.Uint16> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int _Max_multibyte,
    ffi.Pointer<_Mbstatet> arg3,
    ffi.Pointer<_Cvtvec> arg4,
  ) {
    return __Mbrtowc(
      arg0,
      arg1,
      _Max_multibyte,
      arg3,
      arg4,
    );
  }

  late final __Mbrtowc_ptr =
      _lookup<ffi.NativeFunction<Native__Mbrtowc>>('_Mbrtowc');
  late final _dart__Mbrtowc __Mbrtowc =
      __Mbrtowc_ptr.asFunction<_dart__Mbrtowc>();

  double _Stof(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    int arg2,
  ) {
    return __Stof(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __Stof_ptr = _lookup<ffi.NativeFunction<Native__Stof>>('_Stof');
  late final _dart__Stof __Stof = __Stof_ptr.asFunction<_dart__Stof>();

  double _Stod(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    int arg2,
  ) {
    return __Stod(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __Stod_ptr = _lookup<ffi.NativeFunction<Native__Stod>>('_Stod');
  late final _dart__Stod __Stod = __Stod_ptr.asFunction<_dart__Stod>();

  int _Strcoll(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    return __Strcoll(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final __Strcoll_ptr =
      _lookup<ffi.NativeFunction<Native__Strcoll>>('_Strcoll');
  late final _dart__Strcoll __Strcoll =
      __Strcoll_ptr.asFunction<_dart__Strcoll>();

  int _Strxfrm(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _End1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    return __Strxfrm(
      _String1,
      _End1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final __Strxfrm_ptr =
      _lookup<ffi.NativeFunction<Native__Strxfrm>>('_Strxfrm');
  late final _dart__Strxfrm __Strxfrm =
      __Strxfrm_ptr.asFunction<_dart__Strxfrm>();

  int _Tolower(
    int arg0,
    ffi.Pointer<_Ctypevec> arg1,
  ) {
    return __Tolower(
      arg0,
      arg1,
    );
  }

  late final __Tolower_ptr =
      _lookup<ffi.NativeFunction<Native__Tolower>>('_Tolower');
  late final _dart__Tolower __Tolower =
      __Tolower_ptr.asFunction<_dart__Tolower>();

  int _Toupper(
    int arg0,
    ffi.Pointer<_Ctypevec> arg1,
  ) {
    return __Toupper(
      arg0,
      arg1,
    );
  }

  late final __Toupper_ptr =
      _lookup<ffi.NativeFunction<Native__Toupper>>('_Toupper');
  late final _dart__Toupper __Toupper =
      __Toupper_ptr.asFunction<_dart__Toupper>();

  int _Wcrtomb(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<_Mbstatet> arg2,
    ffi.Pointer<_Cvtvec> arg3,
  ) {
    return __Wcrtomb(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __Wcrtomb_ptr =
      _lookup<ffi.NativeFunction<Native__Wcrtomb>>('_Wcrtomb');
  late final _dart__Wcrtomb __Wcrtomb =
      __Wcrtomb_ptr.asFunction<_dart__Wcrtomb>();

  int _Wcscoll(
    ffi.Pointer<ffi.Uint16> arg0,
    ffi.Pointer<ffi.Uint16> arg1,
    ffi.Pointer<ffi.Uint16> arg2,
    ffi.Pointer<ffi.Uint16> arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    return __Wcscoll(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final __Wcscoll_ptr =
      _lookup<ffi.NativeFunction<Native__Wcscoll>>('_Wcscoll');
  late final _dart__Wcscoll __Wcscoll =
      __Wcscoll_ptr.asFunction<_dart__Wcscoll>();

  int _Wcsxfrm(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _End1,
    ffi.Pointer<ffi.Uint16> arg2,
    ffi.Pointer<ffi.Uint16> arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    return __Wcsxfrm(
      _String1,
      _End1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final __Wcsxfrm_ptr =
      _lookup<ffi.NativeFunction<Native__Wcsxfrm>>('_Wcsxfrm');
  late final _dart__Wcsxfrm __Wcsxfrm =
      __Wcsxfrm_ptr.asFunction<_dart__Wcsxfrm>();

  int _Getwctype(
    int arg0,
    ffi.Pointer<_Ctypevec> arg1,
  ) {
    return __Getwctype(
      arg0,
      arg1,
    );
  }

  late final __Getwctype_ptr =
      _lookup<ffi.NativeFunction<Native__Getwctype>>('_Getwctype');
  late final _dart__Getwctype __Getwctype =
      __Getwctype_ptr.asFunction<_dart__Getwctype>();

  ffi.Pointer<ffi.Uint16> _Getwctypes(
    ffi.Pointer<ffi.Uint16> arg0,
    ffi.Pointer<ffi.Uint16> arg1,
    ffi.Pointer<ffi.Int16> arg2,
    ffi.Pointer<_Ctypevec> arg3,
  ) {
    return __Getwctypes(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __Getwctypes_ptr =
      _lookup<ffi.NativeFunction<Native__Getwctypes>>('_Getwctypes');
  late final _dart__Getwctypes __Getwctypes =
      __Getwctypes_ptr.asFunction<_dart__Getwctypes>();

  int _Towlower(
    int arg0,
    ffi.Pointer<_Ctypevec> arg1,
  ) {
    return __Towlower(
      arg0,
      arg1,
    );
  }

  late final __Towlower_ptr =
      _lookup<ffi.NativeFunction<Native__Towlower>>('_Towlower');
  late final _dart__Towlower __Towlower =
      __Towlower_ptr.asFunction<_dart__Towlower>();

  int _Towupper(
    int arg0,
    ffi.Pointer<_Ctypevec> arg1,
  ) {
    return __Towupper(
      arg0,
      arg1,
    );
  }

  late final __Towupper_ptr =
      _lookup<ffi.NativeFunction<Native__Towupper>>('_Towupper');
  late final _dart__Towupper __Towupper =
      __Towupper_ptr.asFunction<_dart__Towupper>();

  ffi.Pointer<__crt_locale_pointers> _GetLocaleForCP(
    int arg0,
  ) {
    return __GetLocaleForCP(
      arg0,
    );
  }

  late final __GetLocaleForCP_ptr =
      _lookup<ffi.NativeFunction<Native__GetLocaleForCP>>('_GetLocaleForCP');
  late final _dart__GetLocaleForCP __GetLocaleForCP =
      __GetLocaleForCP_ptr.asFunction<_dart__GetLocaleForCP>();

  double _Stodx(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return __Stodx(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __Stodx_ptr = _lookup<ffi.NativeFunction<Native__Stodx>>('_Stodx');
  late final _dart__Stodx __Stodx = __Stodx_ptr.asFunction<_dart__Stodx>();

  int _Stolx(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return __Stolx(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __Stolx_ptr = _lookup<ffi.NativeFunction<Native__Stolx>>('_Stolx');
  late final _dart__Stolx __Stolx = __Stolx_ptr.asFunction<_dart__Stolx>();

  int _Stoulx(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return __Stoulx(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __Stoulx_ptr =
      _lookup<ffi.NativeFunction<Native__Stoulx>>('_Stoulx');
  late final _dart__Stoulx __Stoulx = __Stoulx_ptr.asFunction<_dart__Stoulx>();

  int _Stollx(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return __Stollx(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __Stollx_ptr =
      _lookup<ffi.NativeFunction<Native__Stollx>>('_Stollx');
  late final _dart__Stollx __Stollx = __Stollx_ptr.asFunction<_dart__Stollx>();

  int _Stoullx(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return __Stoullx(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __Stoullx_ptr =
      _lookup<ffi.NativeFunction<Native__Stoullx>>('_Stoullx');
  late final _dart__Stoullx __Stoullx =
      __Stoullx_ptr.asFunction<_dart__Stoullx>();

  late final ffi.Pointer<ffi.Int32> ___current_exit_return_mode =
      _lookup<ffi.Int32>('__current_exit_return_mode');

  int get __current_exit_return_mode => ___current_exit_return_mode.value;

  set __current_exit_return_mode(int value) =>
      ___current_exit_return_mode.value = value;

  int __vcrt_initialize() {
    return ___vcrt_initialize();
  }

  late final ___vcrt_initialize_ptr =
      _lookup<ffi.NativeFunction<Native___vcrt_initialize>>(
          '__vcrt_initialize');
  late final _dart___vcrt_initialize ___vcrt_initialize =
      ___vcrt_initialize_ptr.asFunction<_dart___vcrt_initialize>();

  int __vcrt_uninitialize(
    int _Terminating,
  ) {
    return ___vcrt_uninitialize(
      _Terminating,
    );
  }

  late final ___vcrt_uninitialize_ptr =
      _lookup<ffi.NativeFunction<Native___vcrt_uninitialize>>(
          '__vcrt_uninitialize');
  late final _dart___vcrt_uninitialize ___vcrt_uninitialize =
      ___vcrt_uninitialize_ptr.asFunction<_dart___vcrt_uninitialize>();

  int __vcrt_uninitialize_critical() {
    return ___vcrt_uninitialize_critical();
  }

  late final ___vcrt_uninitialize_critical_ptr =
      _lookup<ffi.NativeFunction<Native___vcrt_uninitialize_critical>>(
          '__vcrt_uninitialize_critical');
  late final _dart___vcrt_uninitialize_critical ___vcrt_uninitialize_critical =
      ___vcrt_uninitialize_critical_ptr
          .asFunction<_dart___vcrt_uninitialize_critical>();

  int __vcrt_thread_attach() {
    return ___vcrt_thread_attach();
  }

  late final ___vcrt_thread_attach_ptr =
      _lookup<ffi.NativeFunction<Native___vcrt_thread_attach>>(
          '__vcrt_thread_attach');
  late final _dart___vcrt_thread_attach ___vcrt_thread_attach =
      ___vcrt_thread_attach_ptr.asFunction<_dart___vcrt_thread_attach>();

  int __vcrt_thread_detach() {
    return ___vcrt_thread_detach();
  }

  late final ___vcrt_thread_detach_ptr =
      _lookup<ffi.NativeFunction<Native___vcrt_thread_detach>>(
          '__vcrt_thread_detach');
  late final _dart___vcrt_thread_detach ___vcrt_thread_detach =
      ___vcrt_thread_detach_ptr.asFunction<_dart___vcrt_thread_detach>();

  int __isa_available_init() {
    return ___isa_available_init();
  }

  late final ___isa_available_init_ptr =
      _lookup<ffi.NativeFunction<Native___isa_available_init>>(
          '__isa_available_init');
  late final _dart___isa_available_init ___isa_available_init =
      ___isa_available_init_ptr.asFunction<_dart___isa_available_init>();

  int _get_startup_argv_mode() {
    return __get_startup_argv_mode();
  }

  late final __get_startup_argv_mode_ptr =
      _lookup<ffi.NativeFunction<Native__get_startup_argv_mode>>(
          '_get_startup_argv_mode');
  late final _dart__get_startup_argv_mode __get_startup_argv_mode =
      __get_startup_argv_mode_ptr.asFunction<_dart__get_startup_argv_mode>();

  int _seh_filter_dll(
    int _ExceptionNum,
    ffi.Pointer<_EXCEPTION_POINTERS> _ExceptionPtr,
  ) {
    return __seh_filter_dll(
      _ExceptionNum,
      _ExceptionPtr,
    );
  }

  late final __seh_filter_dll_ptr =
      _lookup<ffi.NativeFunction<Native__seh_filter_dll>>('_seh_filter_dll');
  late final _dart__seh_filter_dll __seh_filter_dll =
      __seh_filter_dll_ptr.asFunction<_dart__seh_filter_dll>();

  int _seh_filter_exe(
    int _ExceptionNum,
    ffi.Pointer<_EXCEPTION_POINTERS> _ExceptionPtr,
  ) {
    return __seh_filter_exe(
      _ExceptionNum,
      _ExceptionPtr,
    );
  }

  late final __seh_filter_exe_ptr =
      _lookup<ffi.NativeFunction<Native__seh_filter_exe>>('_seh_filter_exe');
  late final _dart__seh_filter_exe __seh_filter_exe =
      __seh_filter_exe_ptr.asFunction<_dart__seh_filter_exe>();

  int _query_app_type() {
    return __query_app_type();
  }

  late final __query_app_type_ptr =
      _lookup<ffi.NativeFunction<Native__query_app_type>>('_query_app_type');
  late final _dart__query_app_type __query_app_type =
      __query_app_type_ptr.asFunction<_dart__query_app_type>();

  void _set_app_type(
    int _Type,
  ) {
    return __set_app_type(
      _Type,
    );
  }

  late final __set_app_type_ptr =
      _lookup<ffi.NativeFunction<Native__set_app_type>>('_set_app_type');
  late final _dart__set_app_type __set_app_type =
      __set_app_type_ptr.asFunction<_dart__set_app_type>();

  void __setusermatherr(
    ffi.Pointer<ffi.NativeFunction<_UserMathErrorFunctionPointer>>
        _UserMathErrorFunction,
  ) {
    return ___setusermatherr(
      _UserMathErrorFunction,
    );
  }

  late final ___setusermatherr_ptr =
      _lookup<ffi.NativeFunction<Native___setusermatherr>>('__setusermatherr');
  late final _dart___setusermatherr ___setusermatherr =
      ___setusermatherr_ptr.asFunction<_dart___setusermatherr>();

  int _is_c_termination_complete() {
    return __is_c_termination_complete();
  }

  late final __is_c_termination_complete_ptr =
      _lookup<ffi.NativeFunction<Native__is_c_termination_complete>>(
          '_is_c_termination_complete');
  late final _dart__is_c_termination_complete __is_c_termination_complete =
      __is_c_termination_complete_ptr
          .asFunction<_dart__is_c_termination_complete>();

  int _configure_narrow_argv(
    int mode,
  ) {
    return __configure_narrow_argv(
      mode,
    );
  }

  late final __configure_narrow_argv_ptr =
      _lookup<ffi.NativeFunction<Native__configure_narrow_argv>>(
          '_configure_narrow_argv');
  late final _dart__configure_narrow_argv __configure_narrow_argv =
      __configure_narrow_argv_ptr.asFunction<_dart__configure_narrow_argv>();

  int _configure_wide_argv(
    int mode,
  ) {
    return __configure_wide_argv(
      mode,
    );
  }

  late final __configure_wide_argv_ptr =
      _lookup<ffi.NativeFunction<Native__configure_wide_argv>>(
          '_configure_wide_argv');
  late final _dart__configure_wide_argv __configure_wide_argv =
      __configure_wide_argv_ptr.asFunction<_dart__configure_wide_argv>();

  int _initialize_narrow_environment() {
    return __initialize_narrow_environment();
  }

  late final __initialize_narrow_environment_ptr =
      _lookup<ffi.NativeFunction<Native__initialize_narrow_environment>>(
          '_initialize_narrow_environment');
  late final _dart__initialize_narrow_environment
      __initialize_narrow_environment = __initialize_narrow_environment_ptr
          .asFunction<_dart__initialize_narrow_environment>();

  int _initialize_wide_environment() {
    return __initialize_wide_environment();
  }

  late final __initialize_wide_environment_ptr =
      _lookup<ffi.NativeFunction<Native__initialize_wide_environment>>(
          '_initialize_wide_environment');
  late final _dart__initialize_wide_environment __initialize_wide_environment =
      __initialize_wide_environment_ptr
          .asFunction<_dart__initialize_wide_environment>();

  ffi.Pointer<ffi.Pointer<ffi.Int8>> _get_initial_narrow_environment() {
    return __get_initial_narrow_environment();
  }

  late final __get_initial_narrow_environment_ptr =
      _lookup<ffi.NativeFunction<Native__get_initial_narrow_environment>>(
          '_get_initial_narrow_environment');
  late final _dart__get_initial_narrow_environment
      __get_initial_narrow_environment = __get_initial_narrow_environment_ptr
          .asFunction<_dart__get_initial_narrow_environment>();

  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _get_initial_wide_environment() {
    return __get_initial_wide_environment();
  }

  late final __get_initial_wide_environment_ptr =
      _lookup<ffi.NativeFunction<Native__get_initial_wide_environment>>(
          '_get_initial_wide_environment');
  late final _dart__get_initial_wide_environment
      __get_initial_wide_environment = __get_initial_wide_environment_ptr
          .asFunction<_dart__get_initial_wide_environment>();

  ffi.Pointer<ffi.Int8> _get_narrow_winmain_command_line() {
    return __get_narrow_winmain_command_line();
  }

  late final __get_narrow_winmain_command_line_ptr =
      _lookup<ffi.NativeFunction<Native__get_narrow_winmain_command_line>>(
          '_get_narrow_winmain_command_line');
  late final _dart__get_narrow_winmain_command_line
      __get_narrow_winmain_command_line = __get_narrow_winmain_command_line_ptr
          .asFunction<_dart__get_narrow_winmain_command_line>();

  ffi.Pointer<ffi.Uint16> _get_wide_winmain_command_line() {
    return __get_wide_winmain_command_line();
  }

  late final __get_wide_winmain_command_line_ptr =
      _lookup<ffi.NativeFunction<Native__get_wide_winmain_command_line>>(
          '_get_wide_winmain_command_line');
  late final _dart__get_wide_winmain_command_line
      __get_wide_winmain_command_line = __get_wide_winmain_command_line_ptr
          .asFunction<_dart__get_wide_winmain_command_line>();

  ffi.Pointer<ffi.Pointer<ffi.Int8>> __p__acmdln() {
    return ___p__acmdln();
  }

  late final ___p__acmdln_ptr =
      _lookup<ffi.NativeFunction<Native___p__acmdln>>('__p__acmdln');
  late final _dart___p__acmdln ___p__acmdln =
      ___p__acmdln_ptr.asFunction<_dart___p__acmdln>();

  ffi.Pointer<ffi.Pointer<ffi.Uint16>> __p__wcmdln() {
    return ___p__wcmdln();
  }

  late final ___p__wcmdln_ptr =
      _lookup<ffi.NativeFunction<Native___p__wcmdln>>('__p__wcmdln');
  late final _dart___p__wcmdln ___p__wcmdln =
      ___p__wcmdln_ptr.asFunction<_dart___p__wcmdln>();

  void _initterm(
    ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_PVFV>>> _First,
    ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_PVFV>>> _Last,
  ) {
    return __initterm(
      _First,
      _Last,
    );
  }

  late final __initterm_ptr =
      _lookup<ffi.NativeFunction<Native__initterm>>('_initterm');
  late final _dart__initterm __initterm =
      __initterm_ptr.asFunction<_dart__initterm>();

  int _initterm_e(
    ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_PIFV>>> _First,
    ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_PIFV>>> _Last,
  ) {
    return __initterm_e(
      _First,
      _Last,
    );
  }

  late final __initterm_e_ptr =
      _lookup<ffi.NativeFunction<Native__initterm_e>>('_initterm_e');
  late final _dart__initterm_e __initterm_e =
      __initterm_e_ptr.asFunction<_dart__initterm_e>();

  int _initialize_onexit_table(
    ffi.Pointer<_onexit_table_t> _Table,
  ) {
    return __initialize_onexit_table(
      _Table,
    );
  }

  late final __initialize_onexit_table_ptr =
      _lookup<ffi.NativeFunction<Native__initialize_onexit_table>>(
          '_initialize_onexit_table');
  late final _dart__initialize_onexit_table __initialize_onexit_table =
      __initialize_onexit_table_ptr
          .asFunction<_dart__initialize_onexit_table>();

  int _register_onexit_function(
    ffi.Pointer<_onexit_table_t> _Table,
    ffi.Pointer<ffi.NativeFunction<_onexit_t>> _Function,
  ) {
    return __register_onexit_function(
      _Table,
      _Function,
    );
  }

  late final __register_onexit_function_ptr =
      _lookup<ffi.NativeFunction<Native__register_onexit_function>>(
          '_register_onexit_function');
  late final _dart__register_onexit_function __register_onexit_function =
      __register_onexit_function_ptr
          .asFunction<_dart__register_onexit_function>();

  int _execute_onexit_table(
    ffi.Pointer<_onexit_table_t> _Table,
  ) {
    return __execute_onexit_table(
      _Table,
    );
  }

  late final __execute_onexit_table_ptr =
      _lookup<ffi.NativeFunction<Native__execute_onexit_table>>(
          '_execute_onexit_table');
  late final _dart__execute_onexit_table __execute_onexit_table =
      __execute_onexit_table_ptr.asFunction<_dart__execute_onexit_table>();

  int _crt_atexit(
    ffi.Pointer<ffi.NativeFunction<_PVFV>> _Function,
  ) {
    return __crt_atexit(
      _Function,
    );
  }

  late final __crt_atexit_ptr =
      _lookup<ffi.NativeFunction<Native__crt_atexit>>('_crt_atexit');
  late final _dart__crt_atexit __crt_atexit =
      __crt_atexit_ptr.asFunction<_dart__crt_atexit>();

  int _crt_at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<_PVFV>> _Function,
  ) {
    return __crt_at_quick_exit(
      _Function,
    );
  }

  late final __crt_at_quick_exit_ptr =
      _lookup<ffi.NativeFunction<Native__crt_at_quick_exit>>(
          '_crt_at_quick_exit');
  late final _dart__crt_at_quick_exit __crt_at_quick_exit =
      __crt_at_quick_exit_ptr.asFunction<_dart__crt_at_quick_exit>();

  int __acrt_initialize() {
    return ___acrt_initialize();
  }

  late final ___acrt_initialize_ptr =
      _lookup<ffi.NativeFunction<Native___acrt_initialize>>(
          '__acrt_initialize');
  late final _dart___acrt_initialize ___acrt_initialize =
      ___acrt_initialize_ptr.asFunction<_dart___acrt_initialize>();

  int __acrt_uninitialize(
    int _Terminating,
  ) {
    return ___acrt_uninitialize(
      _Terminating,
    );
  }

  late final ___acrt_uninitialize_ptr =
      _lookup<ffi.NativeFunction<Native___acrt_uninitialize>>(
          '__acrt_uninitialize');
  late final _dart___acrt_uninitialize ___acrt_uninitialize =
      ___acrt_uninitialize_ptr.asFunction<_dart___acrt_uninitialize>();

  int __acrt_uninitialize_critical(
    int _Terminating,
  ) {
    return ___acrt_uninitialize_critical(
      _Terminating,
    );
  }

  late final ___acrt_uninitialize_critical_ptr =
      _lookup<ffi.NativeFunction<Native___acrt_uninitialize_critical>>(
          '__acrt_uninitialize_critical');
  late final _dart___acrt_uninitialize_critical ___acrt_uninitialize_critical =
      ___acrt_uninitialize_critical_ptr
          .asFunction<_dart___acrt_uninitialize_critical>();

  int __acrt_thread_attach() {
    return ___acrt_thread_attach();
  }

  late final ___acrt_thread_attach_ptr =
      _lookup<ffi.NativeFunction<Native___acrt_thread_attach>>(
          '__acrt_thread_attach');
  late final _dart___acrt_thread_attach ___acrt_thread_attach =
      ___acrt_thread_attach_ptr.asFunction<_dart___acrt_thread_attach>();

  int __acrt_thread_detach() {
    return ___acrt_thread_detach();
  }

  late final ___acrt_thread_detach_ptr =
      _lookup<ffi.NativeFunction<Native___acrt_thread_detach>>(
          '__acrt_thread_detach');
  late final _dart___acrt_thread_detach ___acrt_thread_detach =
      ___acrt_thread_detach_ptr.asFunction<_dart___acrt_thread_detach>();

  void _cexit() {
    return __cexit();
  }

  late final __cexit_ptr = _lookup<ffi.NativeFunction<Native__cexit>>('_cexit');
  late final _dart__cexit __cexit = __cexit_ptr.asFunction<_dart__cexit>();

  void _c_exit() {
    return __c_exit();
  }

  late final __c_exit_ptr =
      _lookup<ffi.NativeFunction<Native__c_exit>>('_c_exit');
  late final _dart__c_exit __c_exit = __c_exit_ptr.asFunction<_dart__c_exit>();

  void _register_thread_local_exe_atexit_callback(
    ffi.Pointer<ffi.NativeFunction<_tls_callback_type>> _Callback,
  ) {
    return __register_thread_local_exe_atexit_callback(
      _Callback,
    );
  }

  late final __register_thread_local_exe_atexit_callback_ptr = _lookup<
          ffi.NativeFunction<
              Native__register_thread_local_exe_atexit_callback>>(
      '_register_thread_local_exe_atexit_callback');
  late final _dart__register_thread_local_exe_atexit_callback
      __register_thread_local_exe_atexit_callback =
      __register_thread_local_exe_atexit_callback_ptr
          .asFunction<_dart__register_thread_local_exe_atexit_callback>();

  int _beginthread(
    ffi.Pointer<ffi.NativeFunction<_beginthread_proc_type>> _StartAddress,
    int _StackSize,
    ffi.Pointer<ffi.Void> _ArgList,
  ) {
    return __beginthread(
      _StartAddress,
      _StackSize,
      _ArgList,
    );
  }

  late final __beginthread_ptr =
      _lookup<ffi.NativeFunction<Native__beginthread>>('_beginthread');
  late final _dart__beginthread __beginthread =
      __beginthread_ptr.asFunction<_dart__beginthread>();

  void _endthread() {
    return __endthread();
  }

  late final __endthread_ptr =
      _lookup<ffi.NativeFunction<Native__endthread>>('_endthread');
  late final _dart__endthread __endthread =
      __endthread_ptr.asFunction<_dart__endthread>();

  int _beginthreadex(
    ffi.Pointer<ffi.Void> _Security,
    int _StackSize,
    ffi.Pointer<ffi.NativeFunction<_beginthreadex_proc_type>> _StartAddress,
    ffi.Pointer<ffi.Void> _ArgList,
    int _InitFlag,
    ffi.Pointer<ffi.Uint32> _ThrdAddr,
  ) {
    return __beginthreadex(
      _Security,
      _StackSize,
      _StartAddress,
      _ArgList,
      _InitFlag,
      _ThrdAddr,
    );
  }

  late final __beginthreadex_ptr =
      _lookup<ffi.NativeFunction<Native__beginthreadex>>('_beginthreadex');
  late final _dart__beginthreadex __beginthreadex =
      __beginthreadex_ptr.asFunction<_dart__beginthreadex>();

  void _endthreadex(
    int _ReturnCode,
  ) {
    return __endthreadex(
      _ReturnCode,
    );
  }

  late final __endthreadex_ptr =
      _lookup<ffi.NativeFunction<Native__endthreadex>>('_endthreadex');
  late final _dart__endthreadex __endthreadex =
      __endthreadex_ptr.asFunction<_dart__endthreadex>();

  int _getpid() {
    return __getpid();
  }

  late final __getpid_ptr =
      _lookup<ffi.NativeFunction<Native__getpid>>('_getpid');
  late final _dart__getpid __getpid = __getpid_ptr.asFunction<_dart__getpid>();

  int _cwait(
    ffi.Pointer<ffi.Int32> _TermStat,
    int _ProcHandle,
    int _Action,
  ) {
    return __cwait(
      _TermStat,
      _ProcHandle,
      _Action,
    );
  }

  late final __cwait_ptr = _lookup<ffi.NativeFunction<Native__cwait>>('_cwait');
  late final _dart__cwait __cwait = __cwait_ptr.asFunction<_dart__cwait>();

  int _execl(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return __execl(
      _FileName,
      _Arguments,
    );
  }

  late final __execl_ptr = _lookup<ffi.NativeFunction<Native__execl>>('_execl');
  late final _dart__execl __execl = __execl_ptr.asFunction<_dart__execl>();

  int _execle(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return __execle(
      _FileName,
      _Arguments,
    );
  }

  late final __execle_ptr =
      _lookup<ffi.NativeFunction<Native__execle>>('_execle');
  late final _dart__execle __execle = __execle_ptr.asFunction<_dart__execle>();

  int _execlp(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return __execlp(
      _FileName,
      _Arguments,
    );
  }

  late final __execlp_ptr =
      _lookup<ffi.NativeFunction<Native__execlp>>('_execlp');
  late final _dart__execlp __execlp = __execlp_ptr.asFunction<_dart__execlp>();

  int _execlpe(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return __execlpe(
      _FileName,
      _Arguments,
    );
  }

  late final __execlpe_ptr =
      _lookup<ffi.NativeFunction<Native__execlpe>>('_execlpe');
  late final _dart__execlpe __execlpe =
      __execlpe_ptr.asFunction<_dart__execlpe>();

  int _execv(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ) {
    return __execv(
      _FileName,
      _Arguments,
    );
  }

  late final __execv_ptr = _lookup<ffi.NativeFunction<Native__execv>>('_execv');
  late final _dart__execv __execv = __execv_ptr.asFunction<_dart__execv>();

  int _execve(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
  ) {
    return __execve(
      _FileName,
      _Arguments,
      _Environment,
    );
  }

  late final __execve_ptr =
      _lookup<ffi.NativeFunction<Native__execve>>('_execve');
  late final _dart__execve __execve = __execve_ptr.asFunction<_dart__execve>();

  int _execvp(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ) {
    return __execvp(
      _FileName,
      _Arguments,
    );
  }

  late final __execvp_ptr =
      _lookup<ffi.NativeFunction<Native__execvp>>('_execvp');
  late final _dart__execvp __execvp = __execvp_ptr.asFunction<_dart__execvp>();

  int _execvpe(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
  ) {
    return __execvpe(
      _FileName,
      _Arguments,
      _Environment,
    );
  }

  late final __execvpe_ptr =
      _lookup<ffi.NativeFunction<Native__execvpe>>('_execvpe');
  late final _dart__execvpe __execvpe =
      __execvpe_ptr.asFunction<_dart__execvpe>();

  int _spawnl(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return __spawnl(
      _Mode,
      _FileName,
      _Arguments,
    );
  }

  late final __spawnl_ptr =
      _lookup<ffi.NativeFunction<Native__spawnl>>('_spawnl');
  late final _dart__spawnl __spawnl = __spawnl_ptr.asFunction<_dart__spawnl>();

  int _spawnle(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return __spawnle(
      _Mode,
      _FileName,
      _Arguments,
    );
  }

  late final __spawnle_ptr =
      _lookup<ffi.NativeFunction<Native__spawnle>>('_spawnle');
  late final _dart__spawnle __spawnle =
      __spawnle_ptr.asFunction<_dart__spawnle>();

  int _spawnlp(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return __spawnlp(
      _Mode,
      _FileName,
      _Arguments,
    );
  }

  late final __spawnlp_ptr =
      _lookup<ffi.NativeFunction<Native__spawnlp>>('_spawnlp');
  late final _dart__spawnlp __spawnlp =
      __spawnlp_ptr.asFunction<_dart__spawnlp>();

  int _spawnlpe(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return __spawnlpe(
      _Mode,
      _FileName,
      _Arguments,
    );
  }

  late final __spawnlpe_ptr =
      _lookup<ffi.NativeFunction<Native__spawnlpe>>('_spawnlpe');
  late final _dart__spawnlpe __spawnlpe =
      __spawnlpe_ptr.asFunction<_dart__spawnlpe>();

  int _spawnv(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ) {
    return __spawnv(
      _Mode,
      _FileName,
      _Arguments,
    );
  }

  late final __spawnv_ptr =
      _lookup<ffi.NativeFunction<Native__spawnv>>('_spawnv');
  late final _dart__spawnv __spawnv = __spawnv_ptr.asFunction<_dart__spawnv>();

  int _spawnve(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
  ) {
    return __spawnve(
      _Mode,
      _FileName,
      _Arguments,
      _Environment,
    );
  }

  late final __spawnve_ptr =
      _lookup<ffi.NativeFunction<Native__spawnve>>('_spawnve');
  late final _dart__spawnve __spawnve =
      __spawnve_ptr.asFunction<_dart__spawnve>();

  int _spawnvp(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ) {
    return __spawnvp(
      _Mode,
      _FileName,
      _Arguments,
    );
  }

  late final __spawnvp_ptr =
      _lookup<ffi.NativeFunction<Native__spawnvp>>('_spawnvp');
  late final _dart__spawnvp __spawnvp =
      __spawnvp_ptr.asFunction<_dart__spawnvp>();

  int _spawnvpe(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
  ) {
    return __spawnvpe(
      _Mode,
      _FileName,
      _Arguments,
      _Environment,
    );
  }

  late final __spawnvpe_ptr =
      _lookup<ffi.NativeFunction<Native__spawnvpe>>('_spawnvpe');
  late final _dart__spawnvpe __spawnvpe =
      __spawnvpe_ptr.asFunction<_dart__spawnvpe>();

  int _loaddll(
    ffi.Pointer<ffi.Int8> _FileName,
  ) {
    return __loaddll(
      _FileName,
    );
  }

  late final __loaddll_ptr =
      _lookup<ffi.NativeFunction<Native__loaddll>>('_loaddll');
  late final _dart__loaddll __loaddll =
      __loaddll_ptr.asFunction<_dart__loaddll>();

  int _unloaddll(
    int _Handle,
  ) {
    return __unloaddll(
      _Handle,
    );
  }

  late final __unloaddll_ptr =
      _lookup<ffi.NativeFunction<Native__unloaddll>>('_unloaddll');
  late final _dart__unloaddll __unloaddll =
      __unloaddll_ptr.asFunction<_dart__unloaddll>();

  ffi.Pointer<ffi.NativeFunction<_GetDllProcAddrProcType>> _getdllprocaddr(
    int _Handle,
    ffi.Pointer<ffi.Int8> _ProcedureName,
    int _Ordinal,
  ) {
    return __getdllprocaddr(
      _Handle,
      _ProcedureName,
      _Ordinal,
    );
  }

  late final __getdllprocaddr_ptr =
      _lookup<ffi.NativeFunction<Native__getdllprocaddr>>('_getdllprocaddr');
  late final _dart__getdllprocaddr __getdllprocaddr =
      __getdllprocaddr_ptr.asFunction<_dart__getdllprocaddr>();

  int cwait(
    ffi.Pointer<ffi.Int32> _TermStat,
    int _ProcHandle,
    int _Action,
  ) {
    return _cwait_1(
      _TermStat,
      _ProcHandle,
      _Action,
    );
  }

  late final _cwait_ptr = _lookup<ffi.NativeFunction<Native_cwait>>('cwait');
  late final _dart_cwait _cwait_1 = _cwait_ptr.asFunction<_dart_cwait>();

  int execl(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return _execl_1(
      _FileName,
      _Arguments,
    );
  }

  late final _execl_ptr = _lookup<ffi.NativeFunction<Native_execl>>('execl');
  late final _dart_execl _execl_1 = _execl_ptr.asFunction<_dart_execl>();

  int execle(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return _execle_1(
      _FileName,
      _Arguments,
    );
  }

  late final _execle_ptr = _lookup<ffi.NativeFunction<Native_execle>>('execle');
  late final _dart_execle _execle_1 = _execle_ptr.asFunction<_dart_execle>();

  int execlp(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return _execlp_1(
      _FileName,
      _Arguments,
    );
  }

  late final _execlp_ptr = _lookup<ffi.NativeFunction<Native_execlp>>('execlp');
  late final _dart_execlp _execlp_1 = _execlp_ptr.asFunction<_dart_execlp>();

  int execlpe(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return _execlpe_1(
      _FileName,
      _Arguments,
    );
  }

  late final _execlpe_ptr =
      _lookup<ffi.NativeFunction<Native_execlpe>>('execlpe');
  late final _dart_execlpe _execlpe_1 =
      _execlpe_ptr.asFunction<_dart_execlpe>();

  int execv(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ) {
    return _execv_1(
      _FileName,
      _Arguments,
    );
  }

  late final _execv_ptr = _lookup<ffi.NativeFunction<Native_execv>>('execv');
  late final _dart_execv _execv_1 = _execv_ptr.asFunction<_dart_execv>();

  int execve(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
  ) {
    return _execve_1(
      _FileName,
      _Arguments,
      _Environment,
    );
  }

  late final _execve_ptr = _lookup<ffi.NativeFunction<Native_execve>>('execve');
  late final _dart_execve _execve_1 = _execve_ptr.asFunction<_dart_execve>();

  int execvp(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ) {
    return _execvp_1(
      _FileName,
      _Arguments,
    );
  }

  late final _execvp_ptr = _lookup<ffi.NativeFunction<Native_execvp>>('execvp');
  late final _dart_execvp _execvp_1 = _execvp_ptr.asFunction<_dart_execvp>();

  int execvpe(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
  ) {
    return _execvpe_1(
      _FileName,
      _Arguments,
      _Environment,
    );
  }

  late final _execvpe_ptr =
      _lookup<ffi.NativeFunction<Native_execvpe>>('execvpe');
  late final _dart_execvpe _execvpe_1 =
      _execvpe_ptr.asFunction<_dart_execvpe>();

  int spawnl(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return _spawnl_1(
      _Mode,
      _FileName,
      _Arguments,
    );
  }

  late final _spawnl_ptr = _lookup<ffi.NativeFunction<Native_spawnl>>('spawnl');
  late final _dart_spawnl _spawnl_1 = _spawnl_ptr.asFunction<_dart_spawnl>();

  int spawnle(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return _spawnle_1(
      _Mode,
      _FileName,
      _Arguments,
    );
  }

  late final _spawnle_ptr =
      _lookup<ffi.NativeFunction<Native_spawnle>>('spawnle');
  late final _dart_spawnle _spawnle_1 =
      _spawnle_ptr.asFunction<_dart_spawnle>();

  int spawnlp(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return _spawnlp_1(
      _Mode,
      _FileName,
      _Arguments,
    );
  }

  late final _spawnlp_ptr =
      _lookup<ffi.NativeFunction<Native_spawnlp>>('spawnlp');
  late final _dart_spawnlp _spawnlp_1 =
      _spawnlp_ptr.asFunction<_dart_spawnlp>();

  int spawnlpe(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Arguments,
  ) {
    return _spawnlpe_1(
      _Mode,
      _FileName,
      _Arguments,
    );
  }

  late final _spawnlpe_ptr =
      _lookup<ffi.NativeFunction<Native_spawnlpe>>('spawnlpe');
  late final _dart_spawnlpe _spawnlpe_1 =
      _spawnlpe_ptr.asFunction<_dart_spawnlpe>();

  int spawnv(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ) {
    return _spawnv_1(
      _Mode,
      _FileName,
      _Arguments,
    );
  }

  late final _spawnv_ptr = _lookup<ffi.NativeFunction<Native_spawnv>>('spawnv');
  late final _dart_spawnv _spawnv_1 = _spawnv_ptr.asFunction<_dart_spawnv>();

  int spawnve(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
  ) {
    return _spawnve_1(
      _Mode,
      _FileName,
      _Arguments,
      _Environment,
    );
  }

  late final _spawnve_ptr =
      _lookup<ffi.NativeFunction<Native_spawnve>>('spawnve');
  late final _dart_spawnve _spawnve_1 =
      _spawnve_ptr.asFunction<_dart_spawnve>();

  int spawnvp(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ) {
    return _spawnvp_1(
      _Mode,
      _FileName,
      _Arguments,
    );
  }

  late final _spawnvp_ptr =
      _lookup<ffi.NativeFunction<Native_spawnvp>>('spawnvp');
  late final _dart_spawnvp _spawnvp_1 =
      _spawnvp_ptr.asFunction<_dart_spawnvp>();

  int spawnvpe(
    int _Mode,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
  ) {
    return _spawnvpe_1(
      _Mode,
      _FileName,
      _Arguments,
      _Environment,
    );
  }

  late final _spawnvpe_ptr =
      _lookup<ffi.NativeFunction<Native_spawnvpe>>('spawnvpe');
  late final _dart_spawnvpe _spawnvpe_1 =
      _spawnvpe_ptr.asFunction<_dart_spawnvpe>();

  int getpid() {
    return _getpid_1();
  }

  late final _getpid_ptr = _lookup<ffi.NativeFunction<Native_getpid>>('getpid');
  late final _dart_getpid _getpid_1 = _getpid_ptr.asFunction<_dart_getpid>();

  int _setjmp(
    ffi.Pointer<ffi.Int32> _Buf,
  ) {
    return __setjmp(
      _Buf,
    );
  }

  late final __setjmp_ptr =
      _lookup<ffi.NativeFunction<Native__setjmp>>('_setjmp');
  late final _dart__setjmp __setjmp = __setjmp_ptr.asFunction<_dart__setjmp>();

  void longjmp(
    ffi.Pointer<ffi.Int32> _Buf,
    int _Value,
  ) {
    return _longjmp(
      _Buf,
      _Value,
    );
  }

  late final _longjmp_ptr =
      _lookup<ffi.NativeFunction<Native_longjmp>>('longjmp');
  late final _dart_longjmp _longjmp = _longjmp_ptr.asFunction<_dart_longjmp>();

  void _mm_prefetch(
    ffi.Pointer<ffi.Int8> _A,
    int _Sel,
  ) {
    return __mm_prefetch(
      _A,
      _Sel,
    );
  }

  late final __mm_prefetch_ptr =
      _lookup<ffi.NativeFunction<Native__mm_prefetch>>('_mm_prefetch');
  late final _dart__mm_prefetch __mm_prefetch =
      __mm_prefetch_ptr.asFunction<_dart__mm_prefetch>();

  void _mm_sfence() {
    return __mm_sfence();
  }

  late final __mm_sfence_ptr =
      _lookup<ffi.NativeFunction<Native__mm_sfence>>('_mm_sfence');
  late final _dart__mm_sfence __mm_sfence =
      __mm_sfence_ptr.asFunction<_dart__mm_sfence>();

  int _mm_getcsr() {
    return __mm_getcsr();
  }

  late final __mm_getcsr_ptr =
      _lookup<ffi.NativeFunction<Native__mm_getcsr>>('_mm_getcsr');
  late final _dart__mm_getcsr __mm_getcsr =
      __mm_getcsr_ptr.asFunction<_dart__mm_getcsr>();

  void _mm_setcsr(
    int arg0,
  ) {
    return __mm_setcsr(
      arg0,
    );
  }

  late final __mm_setcsr_ptr =
      _lookup<ffi.NativeFunction<Native__mm_setcsr>>('_mm_setcsr');
  late final _dart__mm_setcsr __mm_setcsr =
      __mm_setcsr_ptr.asFunction<_dart__mm_setcsr>();

  void _mm_clflush(
    ffi.Pointer<ffi.Void> _P,
  ) {
    return __mm_clflush(
      _P,
    );
  }

  late final __mm_clflush_ptr =
      _lookup<ffi.NativeFunction<Native__mm_clflush>>('_mm_clflush');
  late final _dart__mm_clflush __mm_clflush =
      __mm_clflush_ptr.asFunction<_dart__mm_clflush>();

  void _mm_lfence() {
    return __mm_lfence();
  }

  late final __mm_lfence_ptr =
      _lookup<ffi.NativeFunction<Native__mm_lfence>>('_mm_lfence');
  late final _dart__mm_lfence __mm_lfence =
      __mm_lfence_ptr.asFunction<_dart__mm_lfence>();

  void _mm_mfence() {
    return __mm_mfence();
  }

  late final __mm_mfence_ptr =
      _lookup<ffi.NativeFunction<Native__mm_mfence>>('_mm_mfence');
  late final _dart__mm_mfence __mm_mfence =
      __mm_mfence_ptr.asFunction<_dart__mm_mfence>();

  void _mm_stream_si32(
    ffi.Pointer<ffi.Int32> _P,
    int _I,
  ) {
    return __mm_stream_si32(
      _P,
      _I,
    );
  }

  late final __mm_stream_si32_ptr =
      _lookup<ffi.NativeFunction<Native__mm_stream_si32>>('_mm_stream_si32');
  late final _dart__mm_stream_si32 __mm_stream_si32 =
      __mm_stream_si32_ptr.asFunction<_dart__mm_stream_si32>();

  void _mm_pause() {
    return __mm_pause();
  }

  late final __mm_pause_ptr =
      _lookup<ffi.NativeFunction<Native__mm_pause>>('_mm_pause');
  late final _dart__mm_pause __mm_pause =
      __mm_pause_ptr.asFunction<_dart__mm_pause>();

  void _mm_monitor(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
  ) {
    return __mm_monitor(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __mm_monitor_ptr =
      _lookup<ffi.NativeFunction<Native__mm_monitor>>('_mm_monitor');
  late final _dart__mm_monitor __mm_monitor =
      __mm_monitor_ptr.asFunction<_dart__mm_monitor>();

  void _mm_mwait(
    int arg0,
    int arg1,
  ) {
    return __mm_mwait(
      arg0,
      arg1,
    );
  }

  late final __mm_mwait_ptr =
      _lookup<ffi.NativeFunction<Native__mm_mwait>>('_mm_mwait');
  late final _dart__mm_mwait __mm_mwait =
      __mm_mwait_ptr.asFunction<_dart__mm_mwait>();

  int _mm_popcnt_u32(
    int arg0,
  ) {
    return __mm_popcnt_u32(
      arg0,
    );
  }

  late final __mm_popcnt_u32_ptr =
      _lookup<ffi.NativeFunction<Native__mm_popcnt_u32>>('_mm_popcnt_u32');
  late final _dart__mm_popcnt_u32 __mm_popcnt_u32 =
      __mm_popcnt_u32_ptr.asFunction<_dart__mm_popcnt_u32>();

  int _mm_popcnt_u64(
    int arg0,
  ) {
    return __mm_popcnt_u64(
      arg0,
    );
  }

  late final __mm_popcnt_u64_ptr =
      _lookup<ffi.NativeFunction<Native__mm_popcnt_u64>>('_mm_popcnt_u64');
  late final _dart__mm_popcnt_u64 __mm_popcnt_u64 =
      __mm_popcnt_u64_ptr.asFunction<_dart__mm_popcnt_u64>();

  int _mm_crc32_u8(
    int arg0,
    int arg1,
  ) {
    return __mm_crc32_u8(
      arg0,
      arg1,
    );
  }

  late final __mm_crc32_u8_ptr =
      _lookup<ffi.NativeFunction<Native__mm_crc32_u8>>('_mm_crc32_u8');
  late final _dart__mm_crc32_u8 __mm_crc32_u8 =
      __mm_crc32_u8_ptr.asFunction<_dart__mm_crc32_u8>();

  int _mm_crc32_u16(
    int arg0,
    int arg1,
  ) {
    return __mm_crc32_u16(
      arg0,
      arg1,
    );
  }

  late final __mm_crc32_u16_ptr =
      _lookup<ffi.NativeFunction<Native__mm_crc32_u16>>('_mm_crc32_u16');
  late final _dart__mm_crc32_u16 __mm_crc32_u16 =
      __mm_crc32_u16_ptr.asFunction<_dart__mm_crc32_u16>();

  int _mm_crc32_u32(
    int arg0,
    int arg1,
  ) {
    return __mm_crc32_u32(
      arg0,
      arg1,
    );
  }

  late final __mm_crc32_u32_ptr =
      _lookup<ffi.NativeFunction<Native__mm_crc32_u32>>('_mm_crc32_u32');
  late final _dart__mm_crc32_u32 __mm_crc32_u32 =
      __mm_crc32_u32_ptr.asFunction<_dart__mm_crc32_u32>();

  int _mm_crc32_u64(
    int arg0,
    int arg1,
  ) {
    return __mm_crc32_u64(
      arg0,
      arg1,
    );
  }

  late final __mm_crc32_u64_ptr =
      _lookup<ffi.NativeFunction<Native__mm_crc32_u64>>('_mm_crc32_u64');
  late final _dart__mm_crc32_u64 __mm_crc32_u64 =
      __mm_crc32_u64_ptr.asFunction<_dart__mm_crc32_u64>();

  void _mm256_zeroall() {
    return __mm256_zeroall();
  }

  late final __mm256_zeroall_ptr =
      _lookup<ffi.NativeFunction<Native__mm256_zeroall>>('_mm256_zeroall');
  late final _dart__mm256_zeroall __mm256_zeroall =
      __mm256_zeroall_ptr.asFunction<_dart__mm256_zeroall>();

  void _mm256_zeroupper() {
    return __mm256_zeroupper();
  }

  late final __mm256_zeroupper_ptr =
      _lookup<ffi.NativeFunction<Native__mm256_zeroupper>>('_mm256_zeroupper');
  late final _dart__mm256_zeroupper __mm256_zeroupper =
      __mm256_zeroupper_ptr.asFunction<_dart__mm256_zeroupper>();

  int _xgetbv(
    int arg0,
  ) {
    return __xgetbv(
      arg0,
    );
  }

  late final __xgetbv_ptr =
      _lookup<ffi.NativeFunction<Native__xgetbv>>('_xgetbv');
  late final _dart__xgetbv __xgetbv = __xgetbv_ptr.asFunction<_dart__xgetbv>();

  void _xsetbv(
    int arg0,
    int arg1,
  ) {
    return __xsetbv(
      arg0,
      arg1,
    );
  }

  late final __xsetbv_ptr =
      _lookup<ffi.NativeFunction<Native__xsetbv>>('_xsetbv');
  late final _dart__xsetbv __xsetbv = __xsetbv_ptr.asFunction<_dart__xsetbv>();

  void _xsave(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __xsave(
      arg0,
      arg1,
    );
  }

  late final __xsave_ptr = _lookup<ffi.NativeFunction<Native__xsave>>('_xsave');
  late final _dart__xsave __xsave = __xsave_ptr.asFunction<_dart__xsave>();

  void _xsave64(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __xsave64(
      arg0,
      arg1,
    );
  }

  late final __xsave64_ptr =
      _lookup<ffi.NativeFunction<Native__xsave64>>('_xsave64');
  late final _dart__xsave64 __xsave64 =
      __xsave64_ptr.asFunction<_dart__xsave64>();

  void _xsaveopt(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __xsaveopt(
      arg0,
      arg1,
    );
  }

  late final __xsaveopt_ptr =
      _lookup<ffi.NativeFunction<Native__xsaveopt>>('_xsaveopt');
  late final _dart__xsaveopt __xsaveopt =
      __xsaveopt_ptr.asFunction<_dart__xsaveopt>();

  void _xsaveopt64(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __xsaveopt64(
      arg0,
      arg1,
    );
  }

  late final __xsaveopt64_ptr =
      _lookup<ffi.NativeFunction<Native__xsaveopt64>>('_xsaveopt64');
  late final _dart__xsaveopt64 __xsaveopt64 =
      __xsaveopt64_ptr.asFunction<_dart__xsaveopt64>();

  void _xsavec(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __xsavec(
      arg0,
      arg1,
    );
  }

  late final __xsavec_ptr =
      _lookup<ffi.NativeFunction<Native__xsavec>>('_xsavec');
  late final _dart__xsavec __xsavec = __xsavec_ptr.asFunction<_dart__xsavec>();

  void _xsavec64(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __xsavec64(
      arg0,
      arg1,
    );
  }

  late final __xsavec64_ptr =
      _lookup<ffi.NativeFunction<Native__xsavec64>>('_xsavec64');
  late final _dart__xsavec64 __xsavec64 =
      __xsavec64_ptr.asFunction<_dart__xsavec64>();

  void _xrstor(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __xrstor(
      arg0,
      arg1,
    );
  }

  late final __xrstor_ptr =
      _lookup<ffi.NativeFunction<Native__xrstor>>('_xrstor');
  late final _dart__xrstor __xrstor = __xrstor_ptr.asFunction<_dart__xrstor>();

  void _xrstor64(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __xrstor64(
      arg0,
      arg1,
    );
  }

  late final __xrstor64_ptr =
      _lookup<ffi.NativeFunction<Native__xrstor64>>('_xrstor64');
  late final _dart__xrstor64 __xrstor64 =
      __xrstor64_ptr.asFunction<_dart__xrstor64>();

  void _xsaves(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __xsaves(
      arg0,
      arg1,
    );
  }

  late final __xsaves_ptr =
      _lookup<ffi.NativeFunction<Native__xsaves>>('_xsaves');
  late final _dart__xsaves __xsaves = __xsaves_ptr.asFunction<_dart__xsaves>();

  void _xsaves64(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __xsaves64(
      arg0,
      arg1,
    );
  }

  late final __xsaves64_ptr =
      _lookup<ffi.NativeFunction<Native__xsaves64>>('_xsaves64');
  late final _dart__xsaves64 __xsaves64 =
      __xsaves64_ptr.asFunction<_dart__xsaves64>();

  void _xrstors(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __xrstors(
      arg0,
      arg1,
    );
  }

  late final __xrstors_ptr =
      _lookup<ffi.NativeFunction<Native__xrstors>>('_xrstors');
  late final _dart__xrstors __xrstors =
      __xrstors_ptr.asFunction<_dart__xrstors>();

  void _xrstors64(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __xrstors64(
      arg0,
      arg1,
    );
  }

  late final __xrstors64_ptr =
      _lookup<ffi.NativeFunction<Native__xrstors64>>('_xrstors64');
  late final _dart__xrstors64 __xrstors64 =
      __xrstors64_ptr.asFunction<_dart__xrstors64>();

  void _fxsave(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __fxsave(
      arg0,
    );
  }

  late final __fxsave_ptr =
      _lookup<ffi.NativeFunction<Native__fxsave>>('_fxsave');
  late final _dart__fxsave __fxsave = __fxsave_ptr.asFunction<_dart__fxsave>();

  void _fxsave64(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __fxsave64(
      arg0,
    );
  }

  late final __fxsave64_ptr =
      _lookup<ffi.NativeFunction<Native__fxsave64>>('_fxsave64');
  late final _dart__fxsave64 __fxsave64 =
      __fxsave64_ptr.asFunction<_dart__fxsave64>();

  void _fxrstor(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __fxrstor(
      arg0,
    );
  }

  late final __fxrstor_ptr =
      _lookup<ffi.NativeFunction<Native__fxrstor>>('_fxrstor');
  late final _dart__fxrstor __fxrstor =
      __fxrstor_ptr.asFunction<_dart__fxrstor>();

  void _fxrstor64(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __fxrstor64(
      arg0,
    );
  }

  late final __fxrstor64_ptr =
      _lookup<ffi.NativeFunction<Native__fxrstor64>>('_fxrstor64');
  late final _dart__fxrstor64 __fxrstor64 =
      __fxrstor64_ptr.asFunction<_dart__fxrstor64>();

  int _rdrand16_step(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return __rdrand16_step(
      arg0,
    );
  }

  late final __rdrand16_step_ptr =
      _lookup<ffi.NativeFunction<Native__rdrand16_step>>('_rdrand16_step');
  late final _dart__rdrand16_step __rdrand16_step =
      __rdrand16_step_ptr.asFunction<_dart__rdrand16_step>();

  int _rdrand32_step(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    return __rdrand32_step(
      arg0,
    );
  }

  late final __rdrand32_step_ptr =
      _lookup<ffi.NativeFunction<Native__rdrand32_step>>('_rdrand32_step');
  late final _dart__rdrand32_step __rdrand32_step =
      __rdrand32_step_ptr.asFunction<_dart__rdrand32_step>();

  int _rdrand64_step(
    ffi.Pointer<ffi.Uint64> arg0,
  ) {
    return __rdrand64_step(
      arg0,
    );
  }

  late final __rdrand64_step_ptr =
      _lookup<ffi.NativeFunction<Native__rdrand64_step>>('_rdrand64_step');
  late final _dart__rdrand64_step __rdrand64_step =
      __rdrand64_step_ptr.asFunction<_dart__rdrand64_step>();

  int _readfsbase_u32() {
    return __readfsbase_u32();
  }

  late final __readfsbase_u32_ptr =
      _lookup<ffi.NativeFunction<Native__readfsbase_u32>>('_readfsbase_u32');
  late final _dart__readfsbase_u32 __readfsbase_u32 =
      __readfsbase_u32_ptr.asFunction<_dart__readfsbase_u32>();

  int _readgsbase_u32() {
    return __readgsbase_u32();
  }

  late final __readgsbase_u32_ptr =
      _lookup<ffi.NativeFunction<Native__readgsbase_u32>>('_readgsbase_u32');
  late final _dart__readgsbase_u32 __readgsbase_u32 =
      __readgsbase_u32_ptr.asFunction<_dart__readgsbase_u32>();

  int _readfsbase_u64() {
    return __readfsbase_u64();
  }

  late final __readfsbase_u64_ptr =
      _lookup<ffi.NativeFunction<Native__readfsbase_u64>>('_readfsbase_u64');
  late final _dart__readfsbase_u64 __readfsbase_u64 =
      __readfsbase_u64_ptr.asFunction<_dart__readfsbase_u64>();

  int _readgsbase_u64() {
    return __readgsbase_u64();
  }

  late final __readgsbase_u64_ptr =
      _lookup<ffi.NativeFunction<Native__readgsbase_u64>>('_readgsbase_u64');
  late final _dart__readgsbase_u64 __readgsbase_u64 =
      __readgsbase_u64_ptr.asFunction<_dart__readgsbase_u64>();

  void _writefsbase_u32(
    int arg0,
  ) {
    return __writefsbase_u32(
      arg0,
    );
  }

  late final __writefsbase_u32_ptr =
      _lookup<ffi.NativeFunction<Native__writefsbase_u32>>('_writefsbase_u32');
  late final _dart__writefsbase_u32 __writefsbase_u32 =
      __writefsbase_u32_ptr.asFunction<_dart__writefsbase_u32>();

  void _writegsbase_u32(
    int arg0,
  ) {
    return __writegsbase_u32(
      arg0,
    );
  }

  late final __writegsbase_u32_ptr =
      _lookup<ffi.NativeFunction<Native__writegsbase_u32>>('_writegsbase_u32');
  late final _dart__writegsbase_u32 __writegsbase_u32 =
      __writegsbase_u32_ptr.asFunction<_dart__writegsbase_u32>();

  void _writefsbase_u64(
    int arg0,
  ) {
    return __writefsbase_u64(
      arg0,
    );
  }

  late final __writefsbase_u64_ptr =
      _lookup<ffi.NativeFunction<Native__writefsbase_u64>>('_writefsbase_u64');
  late final _dart__writefsbase_u64 __writefsbase_u64 =
      __writefsbase_u64_ptr.asFunction<_dart__writefsbase_u64>();

  void _writegsbase_u64(
    int arg0,
  ) {
    return __writegsbase_u64(
      arg0,
    );
  }

  late final __writegsbase_u64_ptr =
      _lookup<ffi.NativeFunction<Native__writegsbase_u64>>('_writegsbase_u64');
  late final _dart__writegsbase_u64 __writegsbase_u64 =
      __writegsbase_u64_ptr.asFunction<_dart__writegsbase_u64>();

  int _bextr_u32(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return __bextr_u32(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __bextr_u32_ptr =
      _lookup<ffi.NativeFunction<Native__bextr_u32>>('_bextr_u32');
  late final _dart__bextr_u32 __bextr_u32 =
      __bextr_u32_ptr.asFunction<_dart__bextr_u32>();

  int _bextr2_u32(
    int arg0,
    int arg1,
  ) {
    return __bextr2_u32(
      arg0,
      arg1,
    );
  }

  late final __bextr2_u32_ptr =
      _lookup<ffi.NativeFunction<Native__bextr2_u32>>('_bextr2_u32');
  late final _dart__bextr2_u32 __bextr2_u32 =
      __bextr2_u32_ptr.asFunction<_dart__bextr2_u32>();

  int _blsi_u32(
    int arg0,
  ) {
    return __blsi_u32(
      arg0,
    );
  }

  late final __blsi_u32_ptr =
      _lookup<ffi.NativeFunction<Native__blsi_u32>>('_blsi_u32');
  late final _dart__blsi_u32 __blsi_u32 =
      __blsi_u32_ptr.asFunction<_dart__blsi_u32>();

  int _blsmsk_u32(
    int arg0,
  ) {
    return __blsmsk_u32(
      arg0,
    );
  }

  late final __blsmsk_u32_ptr =
      _lookup<ffi.NativeFunction<Native__blsmsk_u32>>('_blsmsk_u32');
  late final _dart__blsmsk_u32 __blsmsk_u32 =
      __blsmsk_u32_ptr.asFunction<_dart__blsmsk_u32>();

  int _blsr_u32(
    int arg0,
  ) {
    return __blsr_u32(
      arg0,
    );
  }

  late final __blsr_u32_ptr =
      _lookup<ffi.NativeFunction<Native__blsr_u32>>('_blsr_u32');
  late final _dart__blsr_u32 __blsr_u32 =
      __blsr_u32_ptr.asFunction<_dart__blsr_u32>();

  int _bzhi_u32(
    int arg0,
    int arg1,
  ) {
    return __bzhi_u32(
      arg0,
      arg1,
    );
  }

  late final __bzhi_u32_ptr =
      _lookup<ffi.NativeFunction<Native__bzhi_u32>>('_bzhi_u32');
  late final _dart__bzhi_u32 __bzhi_u32 =
      __bzhi_u32_ptr.asFunction<_dart__bzhi_u32>();

  int _mulx_u32(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Uint32> arg2,
  ) {
    return __mulx_u32(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __mulx_u32_ptr =
      _lookup<ffi.NativeFunction<Native__mulx_u32>>('_mulx_u32');
  late final _dart__mulx_u32 __mulx_u32 =
      __mulx_u32_ptr.asFunction<_dart__mulx_u32>();

  int _pdep_u32(
    int arg0,
    int arg1,
  ) {
    return __pdep_u32(
      arg0,
      arg1,
    );
  }

  late final __pdep_u32_ptr =
      _lookup<ffi.NativeFunction<Native__pdep_u32>>('_pdep_u32');
  late final _dart__pdep_u32 __pdep_u32 =
      __pdep_u32_ptr.asFunction<_dart__pdep_u32>();

  int _pext_u32(
    int arg0,
    int arg1,
  ) {
    return __pext_u32(
      arg0,
      arg1,
    );
  }

  late final __pext_u32_ptr =
      _lookup<ffi.NativeFunction<Native__pext_u32>>('_pext_u32');
  late final _dart__pext_u32 __pext_u32 =
      __pext_u32_ptr.asFunction<_dart__pext_u32>();

  int _rorx_u32(
    int arg0,
    int arg1,
  ) {
    return __rorx_u32(
      arg0,
      arg1,
    );
  }

  late final __rorx_u32_ptr =
      _lookup<ffi.NativeFunction<Native__rorx_u32>>('_rorx_u32');
  late final _dart__rorx_u32 __rorx_u32 =
      __rorx_u32_ptr.asFunction<_dart__rorx_u32>();

  int _sarx_i32(
    int arg0,
    int arg1,
  ) {
    return __sarx_i32(
      arg0,
      arg1,
    );
  }

  late final __sarx_i32_ptr =
      _lookup<ffi.NativeFunction<Native__sarx_i32>>('_sarx_i32');
  late final _dart__sarx_i32 __sarx_i32 =
      __sarx_i32_ptr.asFunction<_dart__sarx_i32>();

  int _shlx_u32(
    int arg0,
    int arg1,
  ) {
    return __shlx_u32(
      arg0,
      arg1,
    );
  }

  late final __shlx_u32_ptr =
      _lookup<ffi.NativeFunction<Native__shlx_u32>>('_shlx_u32');
  late final _dart__shlx_u32 __shlx_u32 =
      __shlx_u32_ptr.asFunction<_dart__shlx_u32>();

  int _shrx_u32(
    int arg0,
    int arg1,
  ) {
    return __shrx_u32(
      arg0,
      arg1,
    );
  }

  late final __shrx_u32_ptr =
      _lookup<ffi.NativeFunction<Native__shrx_u32>>('_shrx_u32');
  late final _dart__shrx_u32 __shrx_u32 =
      __shrx_u32_ptr.asFunction<_dart__shrx_u32>();

  int _bextr_u64(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return __bextr_u64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __bextr_u64_ptr =
      _lookup<ffi.NativeFunction<Native__bextr_u64>>('_bextr_u64');
  late final _dart__bextr_u64 __bextr_u64 =
      __bextr_u64_ptr.asFunction<_dart__bextr_u64>();

  int _bextr2_u64(
    int arg0,
    int arg1,
  ) {
    return __bextr2_u64(
      arg0,
      arg1,
    );
  }

  late final __bextr2_u64_ptr =
      _lookup<ffi.NativeFunction<Native__bextr2_u64>>('_bextr2_u64');
  late final _dart__bextr2_u64 __bextr2_u64 =
      __bextr2_u64_ptr.asFunction<_dart__bextr2_u64>();

  int _blsi_u64(
    int arg0,
  ) {
    return __blsi_u64(
      arg0,
    );
  }

  late final __blsi_u64_ptr =
      _lookup<ffi.NativeFunction<Native__blsi_u64>>('_blsi_u64');
  late final _dart__blsi_u64 __blsi_u64 =
      __blsi_u64_ptr.asFunction<_dart__blsi_u64>();

  int _blsmsk_u64(
    int arg0,
  ) {
    return __blsmsk_u64(
      arg0,
    );
  }

  late final __blsmsk_u64_ptr =
      _lookup<ffi.NativeFunction<Native__blsmsk_u64>>('_blsmsk_u64');
  late final _dart__blsmsk_u64 __blsmsk_u64 =
      __blsmsk_u64_ptr.asFunction<_dart__blsmsk_u64>();

  int _blsr_u64(
    int arg0,
  ) {
    return __blsr_u64(
      arg0,
    );
  }

  late final __blsr_u64_ptr =
      _lookup<ffi.NativeFunction<Native__blsr_u64>>('_blsr_u64');
  late final _dart__blsr_u64 __blsr_u64 =
      __blsr_u64_ptr.asFunction<_dart__blsr_u64>();

  int _bzhi_u64(
    int arg0,
    int arg1,
  ) {
    return __bzhi_u64(
      arg0,
      arg1,
    );
  }

  late final __bzhi_u64_ptr =
      _lookup<ffi.NativeFunction<Native__bzhi_u64>>('_bzhi_u64');
  late final _dart__bzhi_u64 __bzhi_u64 =
      __bzhi_u64_ptr.asFunction<_dart__bzhi_u64>();

  int _mulx_u64(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    return __mulx_u64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __mulx_u64_ptr =
      _lookup<ffi.NativeFunction<Native__mulx_u64>>('_mulx_u64');
  late final _dart__mulx_u64 __mulx_u64 =
      __mulx_u64_ptr.asFunction<_dart__mulx_u64>();

  int _pdep_u64(
    int arg0,
    int arg1,
  ) {
    return __pdep_u64(
      arg0,
      arg1,
    );
  }

  late final __pdep_u64_ptr =
      _lookup<ffi.NativeFunction<Native__pdep_u64>>('_pdep_u64');
  late final _dart__pdep_u64 __pdep_u64 =
      __pdep_u64_ptr.asFunction<_dart__pdep_u64>();

  int _pext_u64(
    int arg0,
    int arg1,
  ) {
    return __pext_u64(
      arg0,
      arg1,
    );
  }

  late final __pext_u64_ptr =
      _lookup<ffi.NativeFunction<Native__pext_u64>>('_pext_u64');
  late final _dart__pext_u64 __pext_u64 =
      __pext_u64_ptr.asFunction<_dart__pext_u64>();

  int _rorx_u64(
    int arg0,
    int arg1,
  ) {
    return __rorx_u64(
      arg0,
      arg1,
    );
  }

  late final __rorx_u64_ptr =
      _lookup<ffi.NativeFunction<Native__rorx_u64>>('_rorx_u64');
  late final _dart__rorx_u64 __rorx_u64 =
      __rorx_u64_ptr.asFunction<_dart__rorx_u64>();

  int _sarx_i64(
    int arg0,
    int arg1,
  ) {
    return __sarx_i64(
      arg0,
      arg1,
    );
  }

  late final __sarx_i64_ptr =
      _lookup<ffi.NativeFunction<Native__sarx_i64>>('_sarx_i64');
  late final _dart__sarx_i64 __sarx_i64 =
      __sarx_i64_ptr.asFunction<_dart__sarx_i64>();

  int _shlx_u64(
    int arg0,
    int arg1,
  ) {
    return __shlx_u64(
      arg0,
      arg1,
    );
  }

  late final __shlx_u64_ptr =
      _lookup<ffi.NativeFunction<Native__shlx_u64>>('_shlx_u64');
  late final _dart__shlx_u64 __shlx_u64 =
      __shlx_u64_ptr.asFunction<_dart__shlx_u64>();

  int _shrx_u64(
    int arg0,
    int arg1,
  ) {
    return __shrx_u64(
      arg0,
      arg1,
    );
  }

  late final __shrx_u64_ptr =
      _lookup<ffi.NativeFunction<Native__shrx_u64>>('_shrx_u64');
  late final _dart__shrx_u64 __shrx_u64 =
      __shrx_u64_ptr.asFunction<_dart__shrx_u64>();

  int _lzcnt_u32(
    int arg0,
  ) {
    return __lzcnt_u32(
      arg0,
    );
  }

  late final __lzcnt_u32_ptr =
      _lookup<ffi.NativeFunction<Native__lzcnt_u32>>('_lzcnt_u32');
  late final _dart__lzcnt_u32 __lzcnt_u32 =
      __lzcnt_u32_ptr.asFunction<_dart__lzcnt_u32>();

  int _lzcnt_u64(
    int arg0,
  ) {
    return __lzcnt_u64(
      arg0,
    );
  }

  late final __lzcnt_u64_ptr =
      _lookup<ffi.NativeFunction<Native__lzcnt_u64>>('_lzcnt_u64');
  late final _dart__lzcnt_u64 __lzcnt_u64 =
      __lzcnt_u64_ptr.asFunction<_dart__lzcnt_u64>();

  int _tzcnt_u32(
    int arg0,
  ) {
    return __tzcnt_u32(
      arg0,
    );
  }

  late final __tzcnt_u32_ptr =
      _lookup<ffi.NativeFunction<Native__tzcnt_u32>>('_tzcnt_u32');
  late final _dart__tzcnt_u32 __tzcnt_u32 =
      __tzcnt_u32_ptr.asFunction<_dart__tzcnt_u32>();

  int _tzcnt_u64(
    int arg0,
  ) {
    return __tzcnt_u64(
      arg0,
    );
  }

  late final __tzcnt_u64_ptr =
      _lookup<ffi.NativeFunction<Native__tzcnt_u64>>('_tzcnt_u64');
  late final _dart__tzcnt_u64 __tzcnt_u64 =
      __tzcnt_u64_ptr.asFunction<_dart__tzcnt_u64>();

  void _invpcid(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return __invpcid(
      arg0,
      arg1,
    );
  }

  late final __invpcid_ptr =
      _lookup<ffi.NativeFunction<Native__invpcid>>('_invpcid');
  late final _dart__invpcid __invpcid =
      __invpcid_ptr.asFunction<_dart__invpcid>();

  void _Store_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __Store_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __Store_HLERelease_ptr =
      _lookup<ffi.NativeFunction<Native__Store_HLERelease>>(
          '_Store_HLERelease');
  late final _dart__Store_HLERelease __Store_HLERelease =
      __Store_HLERelease_ptr.asFunction<_dart__Store_HLERelease>();

  void _StorePointer_HLERelease(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return __StorePointer_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __StorePointer_HLERelease_ptr =
      _lookup<ffi.NativeFunction<Native__StorePointer_HLERelease>>(
          '_StorePointer_HLERelease');
  late final _dart__StorePointer_HLERelease __StorePointer_HLERelease =
      __StorePointer_HLERelease_ptr
          .asFunction<_dart__StorePointer_HLERelease>();

  int _InterlockedExchange_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedExchange_HLEAcquire(
      arg0,
      arg1,
    );
  }

  late final __InterlockedExchange_HLEAcquire_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchange_HLEAcquire>>(
          '_InterlockedExchange_HLEAcquire');
  late final _dart__InterlockedExchange_HLEAcquire
      __InterlockedExchange_HLEAcquire = __InterlockedExchange_HLEAcquire_ptr
          .asFunction<_dart__InterlockedExchange_HLEAcquire>();

  int _InterlockedExchange_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedExchange_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __InterlockedExchange_HLERelease_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchange_HLERelease>>(
          '_InterlockedExchange_HLERelease');
  late final _dart__InterlockedExchange_HLERelease
      __InterlockedExchange_HLERelease = __InterlockedExchange_HLERelease_ptr
          .asFunction<_dart__InterlockedExchange_HLERelease>();

  ffi.Pointer<ffi.Void> _InterlockedExchangePointer_HLEAcquire(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return __InterlockedExchangePointer_HLEAcquire(
      arg0,
      arg1,
    );
  }

  late final __InterlockedExchangePointer_HLEAcquire_ptr = _lookup<
          ffi.NativeFunction<Native__InterlockedExchangePointer_HLEAcquire>>(
      '_InterlockedExchangePointer_HLEAcquire');
  late final _dart__InterlockedExchangePointer_HLEAcquire
      __InterlockedExchangePointer_HLEAcquire =
      __InterlockedExchangePointer_HLEAcquire_ptr
          .asFunction<_dart__InterlockedExchangePointer_HLEAcquire>();

  ffi.Pointer<ffi.Void> _InterlockedExchangePointer_HLERelease(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return __InterlockedExchangePointer_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __InterlockedExchangePointer_HLERelease_ptr = _lookup<
          ffi.NativeFunction<Native__InterlockedExchangePointer_HLERelease>>(
      '_InterlockedExchangePointer_HLERelease');
  late final _dart__InterlockedExchangePointer_HLERelease
      __InterlockedExchangePointer_HLERelease =
      __InterlockedExchangePointer_HLERelease_ptr
          .asFunction<_dart__InterlockedExchangePointer_HLERelease>();

  int _InterlockedCompareExchange_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
    int arg2,
  ) {
    return __InterlockedCompareExchange_HLEAcquire(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __InterlockedCompareExchange_HLEAcquire_ptr = _lookup<
          ffi.NativeFunction<Native__InterlockedCompareExchange_HLEAcquire>>(
      '_InterlockedCompareExchange_HLEAcquire');
  late final _dart__InterlockedCompareExchange_HLEAcquire
      __InterlockedCompareExchange_HLEAcquire =
      __InterlockedCompareExchange_HLEAcquire_ptr
          .asFunction<_dart__InterlockedCompareExchange_HLEAcquire>();

  int _InterlockedCompareExchange_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
    int arg2,
  ) {
    return __InterlockedCompareExchange_HLERelease(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __InterlockedCompareExchange_HLERelease_ptr = _lookup<
          ffi.NativeFunction<Native__InterlockedCompareExchange_HLERelease>>(
      '_InterlockedCompareExchange_HLERelease');
  late final _dart__InterlockedCompareExchange_HLERelease
      __InterlockedCompareExchange_HLERelease =
      __InterlockedCompareExchange_HLERelease_ptr
          .asFunction<_dart__InterlockedCompareExchange_HLERelease>();

  int _InterlockedCompareExchange64_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
    int arg2,
  ) {
    return __InterlockedCompareExchange64_HLEAcquire(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __InterlockedCompareExchange64_HLEAcquire_ptr = _lookup<
          ffi.NativeFunction<Native__InterlockedCompareExchange64_HLEAcquire>>(
      '_InterlockedCompareExchange64_HLEAcquire');
  late final _dart__InterlockedCompareExchange64_HLEAcquire
      __InterlockedCompareExchange64_HLEAcquire =
      __InterlockedCompareExchange64_HLEAcquire_ptr
          .asFunction<_dart__InterlockedCompareExchange64_HLEAcquire>();

  int _InterlockedCompareExchange64_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
    int arg2,
  ) {
    return __InterlockedCompareExchange64_HLERelease(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __InterlockedCompareExchange64_HLERelease_ptr = _lookup<
          ffi.NativeFunction<Native__InterlockedCompareExchange64_HLERelease>>(
      '_InterlockedCompareExchange64_HLERelease');
  late final _dart__InterlockedCompareExchange64_HLERelease
      __InterlockedCompareExchange64_HLERelease =
      __InterlockedCompareExchange64_HLERelease_ptr
          .asFunction<_dart__InterlockedCompareExchange64_HLERelease>();

  ffi.Pointer<ffi.Void> _InterlockedCompareExchangePointer_HLEAcquire(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return __InterlockedCompareExchangePointer_HLEAcquire(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __InterlockedCompareExchangePointer_HLEAcquire_ptr = _lookup<
          ffi.NativeFunction<
              Native__InterlockedCompareExchangePointer_HLEAcquire>>(
      '_InterlockedCompareExchangePointer_HLEAcquire');
  late final _dart__InterlockedCompareExchangePointer_HLEAcquire
      __InterlockedCompareExchangePointer_HLEAcquire =
      __InterlockedCompareExchangePointer_HLEAcquire_ptr
          .asFunction<_dart__InterlockedCompareExchangePointer_HLEAcquire>();

  ffi.Pointer<ffi.Void> _InterlockedCompareExchangePointer_HLERelease(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return __InterlockedCompareExchangePointer_HLERelease(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __InterlockedCompareExchangePointer_HLERelease_ptr = _lookup<
          ffi.NativeFunction<
              Native__InterlockedCompareExchangePointer_HLERelease>>(
      '_InterlockedCompareExchangePointer_HLERelease');
  late final _dart__InterlockedCompareExchangePointer_HLERelease
      __InterlockedCompareExchangePointer_HLERelease =
      __InterlockedCompareExchangePointer_HLERelease_ptr
          .asFunction<_dart__InterlockedCompareExchangePointer_HLERelease>();

  int _InterlockedExchangeAdd_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedExchangeAdd_HLEAcquire(
      arg0,
      arg1,
    );
  }

  late final __InterlockedExchangeAdd_HLEAcquire_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchangeAdd_HLEAcquire>>(
          '_InterlockedExchangeAdd_HLEAcquire');
  late final _dart__InterlockedExchangeAdd_HLEAcquire
      __InterlockedExchangeAdd_HLEAcquire =
      __InterlockedExchangeAdd_HLEAcquire_ptr
          .asFunction<_dart__InterlockedExchangeAdd_HLEAcquire>();

  int _InterlockedExchangeAdd_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedExchangeAdd_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __InterlockedExchangeAdd_HLERelease_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchangeAdd_HLERelease>>(
          '_InterlockedExchangeAdd_HLERelease');
  late final _dart__InterlockedExchangeAdd_HLERelease
      __InterlockedExchangeAdd_HLERelease =
      __InterlockedExchangeAdd_HLERelease_ptr
          .asFunction<_dart__InterlockedExchangeAdd_HLERelease>();

  int _InterlockedAnd_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedAnd_HLEAcquire(
      arg0,
      arg1,
    );
  }

  late final __InterlockedAnd_HLEAcquire_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedAnd_HLEAcquire>>(
          '_InterlockedAnd_HLEAcquire');
  late final _dart__InterlockedAnd_HLEAcquire __InterlockedAnd_HLEAcquire =
      __InterlockedAnd_HLEAcquire_ptr
          .asFunction<_dart__InterlockedAnd_HLEAcquire>();

  int _InterlockedAnd_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedAnd_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __InterlockedAnd_HLERelease_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedAnd_HLERelease>>(
          '_InterlockedAnd_HLERelease');
  late final _dart__InterlockedAnd_HLERelease __InterlockedAnd_HLERelease =
      __InterlockedAnd_HLERelease_ptr
          .asFunction<_dart__InterlockedAnd_HLERelease>();

  int _InterlockedOr_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedOr_HLEAcquire(
      arg0,
      arg1,
    );
  }

  late final __InterlockedOr_HLEAcquire_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedOr_HLEAcquire>>(
          '_InterlockedOr_HLEAcquire');
  late final _dart__InterlockedOr_HLEAcquire __InterlockedOr_HLEAcquire =
      __InterlockedOr_HLEAcquire_ptr
          .asFunction<_dart__InterlockedOr_HLEAcquire>();

  int _InterlockedOr_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedOr_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __InterlockedOr_HLERelease_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedOr_HLERelease>>(
          '_InterlockedOr_HLERelease');
  late final _dart__InterlockedOr_HLERelease __InterlockedOr_HLERelease =
      __InterlockedOr_HLERelease_ptr
          .asFunction<_dart__InterlockedOr_HLERelease>();

  int _InterlockedXor_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedXor_HLEAcquire(
      arg0,
      arg1,
    );
  }

  late final __InterlockedXor_HLEAcquire_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedXor_HLEAcquire>>(
          '_InterlockedXor_HLEAcquire');
  late final _dart__InterlockedXor_HLEAcquire __InterlockedXor_HLEAcquire =
      __InterlockedXor_HLEAcquire_ptr
          .asFunction<_dart__InterlockedXor_HLEAcquire>();

  int _InterlockedXor_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedXor_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __InterlockedXor_HLERelease_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedXor_HLERelease>>(
          '_InterlockedXor_HLERelease');
  late final _dart__InterlockedXor_HLERelease __InterlockedXor_HLERelease =
      __InterlockedXor_HLERelease_ptr
          .asFunction<_dart__InterlockedXor_HLERelease>();

  int _interlockedbittestandset_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __interlockedbittestandset_HLEAcquire(
      arg0,
      arg1,
    );
  }

  late final __interlockedbittestandset_HLEAcquire_ptr =
      _lookup<ffi.NativeFunction<Native__interlockedbittestandset_HLEAcquire>>(
          '_interlockedbittestandset_HLEAcquire');
  late final _dart__interlockedbittestandset_HLEAcquire
      __interlockedbittestandset_HLEAcquire =
      __interlockedbittestandset_HLEAcquire_ptr
          .asFunction<_dart__interlockedbittestandset_HLEAcquire>();

  int _interlockedbittestandset_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __interlockedbittestandset_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __interlockedbittestandset_HLERelease_ptr =
      _lookup<ffi.NativeFunction<Native__interlockedbittestandset_HLERelease>>(
          '_interlockedbittestandset_HLERelease');
  late final _dart__interlockedbittestandset_HLERelease
      __interlockedbittestandset_HLERelease =
      __interlockedbittestandset_HLERelease_ptr
          .asFunction<_dart__interlockedbittestandset_HLERelease>();

  int _interlockedbittestandreset_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __interlockedbittestandreset_HLEAcquire(
      arg0,
      arg1,
    );
  }

  late final __interlockedbittestandreset_HLEAcquire_ptr = _lookup<
          ffi.NativeFunction<Native__interlockedbittestandreset_HLEAcquire>>(
      '_interlockedbittestandreset_HLEAcquire');
  late final _dart__interlockedbittestandreset_HLEAcquire
      __interlockedbittestandreset_HLEAcquire =
      __interlockedbittestandreset_HLEAcquire_ptr
          .asFunction<_dart__interlockedbittestandreset_HLEAcquire>();

  int _interlockedbittestandreset_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __interlockedbittestandreset_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __interlockedbittestandreset_HLERelease_ptr = _lookup<
          ffi.NativeFunction<Native__interlockedbittestandreset_HLERelease>>(
      '_interlockedbittestandreset_HLERelease');
  late final _dart__interlockedbittestandreset_HLERelease
      __interlockedbittestandreset_HLERelease =
      __interlockedbittestandreset_HLERelease_ptr
          .asFunction<_dart__interlockedbittestandreset_HLERelease>();

  void _Store64_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __Store64_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __Store64_HLERelease_ptr =
      _lookup<ffi.NativeFunction<Native__Store64_HLERelease>>(
          '_Store64_HLERelease');
  late final _dart__Store64_HLERelease __Store64_HLERelease =
      __Store64_HLERelease_ptr.asFunction<_dart__Store64_HLERelease>();

  int _InterlockedExchange64_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedExchange64_HLEAcquire(
      arg0,
      arg1,
    );
  }

  late final __InterlockedExchange64_HLEAcquire_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchange64_HLEAcquire>>(
          '_InterlockedExchange64_HLEAcquire');
  late final _dart__InterlockedExchange64_HLEAcquire
      __InterlockedExchange64_HLEAcquire =
      __InterlockedExchange64_HLEAcquire_ptr
          .asFunction<_dart__InterlockedExchange64_HLEAcquire>();

  int _InterlockedExchange64_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedExchange64_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __InterlockedExchange64_HLERelease_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchange64_HLERelease>>(
          '_InterlockedExchange64_HLERelease');
  late final _dart__InterlockedExchange64_HLERelease
      __InterlockedExchange64_HLERelease =
      __InterlockedExchange64_HLERelease_ptr
          .asFunction<_dart__InterlockedExchange64_HLERelease>();

  int _InterlockedExchangeAdd64_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedExchangeAdd64_HLEAcquire(
      arg0,
      arg1,
    );
  }

  late final __InterlockedExchangeAdd64_HLEAcquire_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchangeAdd64_HLEAcquire>>(
          '_InterlockedExchangeAdd64_HLEAcquire');
  late final _dart__InterlockedExchangeAdd64_HLEAcquire
      __InterlockedExchangeAdd64_HLEAcquire =
      __InterlockedExchangeAdd64_HLEAcquire_ptr
          .asFunction<_dart__InterlockedExchangeAdd64_HLEAcquire>();

  int _InterlockedExchangeAdd64_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedExchangeAdd64_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __InterlockedExchangeAdd64_HLERelease_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchangeAdd64_HLERelease>>(
          '_InterlockedExchangeAdd64_HLERelease');
  late final _dart__InterlockedExchangeAdd64_HLERelease
      __InterlockedExchangeAdd64_HLERelease =
      __InterlockedExchangeAdd64_HLERelease_ptr
          .asFunction<_dart__InterlockedExchangeAdd64_HLERelease>();

  int _InterlockedAnd64_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedAnd64_HLEAcquire(
      arg0,
      arg1,
    );
  }

  late final __InterlockedAnd64_HLEAcquire_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedAnd64_HLEAcquire>>(
          '_InterlockedAnd64_HLEAcquire');
  late final _dart__InterlockedAnd64_HLEAcquire __InterlockedAnd64_HLEAcquire =
      __InterlockedAnd64_HLEAcquire_ptr
          .asFunction<_dart__InterlockedAnd64_HLEAcquire>();

  int _InterlockedAnd64_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedAnd64_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __InterlockedAnd64_HLERelease_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedAnd64_HLERelease>>(
          '_InterlockedAnd64_HLERelease');
  late final _dart__InterlockedAnd64_HLERelease __InterlockedAnd64_HLERelease =
      __InterlockedAnd64_HLERelease_ptr
          .asFunction<_dart__InterlockedAnd64_HLERelease>();

  int _InterlockedOr64_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedOr64_HLEAcquire(
      arg0,
      arg1,
    );
  }

  late final __InterlockedOr64_HLEAcquire_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedOr64_HLEAcquire>>(
          '_InterlockedOr64_HLEAcquire');
  late final _dart__InterlockedOr64_HLEAcquire __InterlockedOr64_HLEAcquire =
      __InterlockedOr64_HLEAcquire_ptr
          .asFunction<_dart__InterlockedOr64_HLEAcquire>();

  int _InterlockedOr64_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedOr64_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __InterlockedOr64_HLERelease_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedOr64_HLERelease>>(
          '_InterlockedOr64_HLERelease');
  late final _dart__InterlockedOr64_HLERelease __InterlockedOr64_HLERelease =
      __InterlockedOr64_HLERelease_ptr
          .asFunction<_dart__InterlockedOr64_HLERelease>();

  int _InterlockedXor64_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedXor64_HLEAcquire(
      arg0,
      arg1,
    );
  }

  late final __InterlockedXor64_HLEAcquire_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedXor64_HLEAcquire>>(
          '_InterlockedXor64_HLEAcquire');
  late final _dart__InterlockedXor64_HLEAcquire __InterlockedXor64_HLEAcquire =
      __InterlockedXor64_HLEAcquire_ptr
          .asFunction<_dart__InterlockedXor64_HLEAcquire>();

  int _InterlockedXor64_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __InterlockedXor64_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __InterlockedXor64_HLERelease_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedXor64_HLERelease>>(
          '_InterlockedXor64_HLERelease');
  late final _dart__InterlockedXor64_HLERelease __InterlockedXor64_HLERelease =
      __InterlockedXor64_HLERelease_ptr
          .asFunction<_dart__InterlockedXor64_HLERelease>();

  int _interlockedbittestandset64_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __interlockedbittestandset64_HLEAcquire(
      arg0,
      arg1,
    );
  }

  late final __interlockedbittestandset64_HLEAcquire_ptr = _lookup<
          ffi.NativeFunction<Native__interlockedbittestandset64_HLEAcquire>>(
      '_interlockedbittestandset64_HLEAcquire');
  late final _dart__interlockedbittestandset64_HLEAcquire
      __interlockedbittestandset64_HLEAcquire =
      __interlockedbittestandset64_HLEAcquire_ptr
          .asFunction<_dart__interlockedbittestandset64_HLEAcquire>();

  int _interlockedbittestandset64_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __interlockedbittestandset64_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __interlockedbittestandset64_HLERelease_ptr = _lookup<
          ffi.NativeFunction<Native__interlockedbittestandset64_HLERelease>>(
      '_interlockedbittestandset64_HLERelease');
  late final _dart__interlockedbittestandset64_HLERelease
      __interlockedbittestandset64_HLERelease =
      __interlockedbittestandset64_HLERelease_ptr
          .asFunction<_dart__interlockedbittestandset64_HLERelease>();

  int _interlockedbittestandreset64_HLEAcquire(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __interlockedbittestandreset64_HLEAcquire(
      arg0,
      arg1,
    );
  }

  late final __interlockedbittestandreset64_HLEAcquire_ptr = _lookup<
          ffi.NativeFunction<Native__interlockedbittestandreset64_HLEAcquire>>(
      '_interlockedbittestandreset64_HLEAcquire');
  late final _dart__interlockedbittestandreset64_HLEAcquire
      __interlockedbittestandreset64_HLEAcquire =
      __interlockedbittestandreset64_HLEAcquire_ptr
          .asFunction<_dart__interlockedbittestandreset64_HLEAcquire>();

  int _interlockedbittestandreset64_HLERelease(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __interlockedbittestandreset64_HLERelease(
      arg0,
      arg1,
    );
  }

  late final __interlockedbittestandreset64_HLERelease_ptr = _lookup<
          ffi.NativeFunction<Native__interlockedbittestandreset64_HLERelease>>(
      '_interlockedbittestandreset64_HLERelease');
  late final _dart__interlockedbittestandreset64_HLERelease
      __interlockedbittestandreset64_HLERelease =
      __interlockedbittestandreset64_HLERelease_ptr
          .asFunction<_dart__interlockedbittestandreset64_HLERelease>();

  int _xbegin() {
    return __xbegin();
  }

  late final __xbegin_ptr =
      _lookup<ffi.NativeFunction<Native__xbegin>>('_xbegin');
  late final _dart__xbegin __xbegin = __xbegin_ptr.asFunction<_dart__xbegin>();

  void _xend() {
    return __xend();
  }

  late final __xend_ptr = _lookup<ffi.NativeFunction<Native__xend>>('_xend');
  late final _dart__xend __xend = __xend_ptr.asFunction<_dart__xend>();

  void _xabort(
    int arg0,
  ) {
    return __xabort(
      arg0,
    );
  }

  late final __xabort_ptr =
      _lookup<ffi.NativeFunction<Native__xabort>>('_xabort');
  late final _dart__xabort __xabort = __xabort_ptr.asFunction<_dart__xabort>();

  int _xtest() {
    return __xtest();
  }

  late final __xtest_ptr = _lookup<ffi.NativeFunction<Native__xtest>>('_xtest');
  late final _dart__xtest __xtest = __xtest_ptr.asFunction<_dart__xtest>();

  int _rdseed16_step(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return __rdseed16_step(
      arg0,
    );
  }

  late final __rdseed16_step_ptr =
      _lookup<ffi.NativeFunction<Native__rdseed16_step>>('_rdseed16_step');
  late final _dart__rdseed16_step __rdseed16_step =
      __rdseed16_step_ptr.asFunction<_dart__rdseed16_step>();

  int _rdseed32_step(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    return __rdseed32_step(
      arg0,
    );
  }

  late final __rdseed32_step_ptr =
      _lookup<ffi.NativeFunction<Native__rdseed32_step>>('_rdseed32_step');
  late final _dart__rdseed32_step __rdseed32_step =
      __rdseed32_step_ptr.asFunction<_dart__rdseed32_step>();

  int _rdseed64_step(
    ffi.Pointer<ffi.Uint64> arg0,
  ) {
    return __rdseed64_step(
      arg0,
    );
  }

  late final __rdseed64_step_ptr =
      _lookup<ffi.NativeFunction<Native__rdseed64_step>>('_rdseed64_step');
  late final _dart__rdseed64_step __rdseed64_step =
      __rdseed64_step_ptr.asFunction<_dart__rdseed64_step>();

  int _addcarryx_u32(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint32> arg3,
  ) {
    return __addcarryx_u32(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __addcarryx_u32_ptr =
      _lookup<ffi.NativeFunction<Native__addcarryx_u32>>('_addcarryx_u32');
  late final _dart__addcarryx_u32 __addcarryx_u32 =
      __addcarryx_u32_ptr.asFunction<_dart__addcarryx_u32>();

  int _addcarryx_u64(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint64> arg3,
  ) {
    return __addcarryx_u64(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __addcarryx_u64_ptr =
      _lookup<ffi.NativeFunction<Native__addcarryx_u64>>('_addcarryx_u64');
  late final _dart__addcarryx_u64 __addcarryx_u64 =
      __addcarryx_u64_ptr.asFunction<_dart__addcarryx_u64>();

  int _load_be_u16(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __load_be_u16(
      arg0,
    );
  }

  late final __load_be_u16_ptr =
      _lookup<ffi.NativeFunction<Native__load_be_u16>>('_load_be_u16');
  late final _dart__load_be_u16 __load_be_u16 =
      __load_be_u16_ptr.asFunction<_dart__load_be_u16>();

  int _load_be_u32(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __load_be_u32(
      arg0,
    );
  }

  late final __load_be_u32_ptr =
      _lookup<ffi.NativeFunction<Native__load_be_u32>>('_load_be_u32');
  late final _dart__load_be_u32 __load_be_u32 =
      __load_be_u32_ptr.asFunction<_dart__load_be_u32>();

  int _load_be_u64(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __load_be_u64(
      arg0,
    );
  }

  late final __load_be_u64_ptr =
      _lookup<ffi.NativeFunction<Native__load_be_u64>>('_load_be_u64');
  late final _dart__load_be_u64 __load_be_u64 =
      __load_be_u64_ptr.asFunction<_dart__load_be_u64>();

  void _store_be_u16(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __store_be_u16(
      arg0,
      arg1,
    );
  }

  late final __store_be_u16_ptr =
      _lookup<ffi.NativeFunction<Native__store_be_u16>>('_store_be_u16');
  late final _dart__store_be_u16 __store_be_u16 =
      __store_be_u16_ptr.asFunction<_dart__store_be_u16>();

  void _store_be_u32(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __store_be_u32(
      arg0,
      arg1,
    );
  }

  late final __store_be_u32_ptr =
      _lookup<ffi.NativeFunction<Native__store_be_u32>>('_store_be_u32');
  late final _dart__store_be_u32 __store_be_u32 =
      __store_be_u32_ptr.asFunction<_dart__store_be_u32>();

  void _store_be_u64(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __store_be_u64(
      arg0,
      arg1,
    );
  }

  late final __store_be_u64_ptr =
      _lookup<ffi.NativeFunction<Native__store_be_u64>>('_store_be_u64');
  late final _dart__store_be_u64 __store_be_u64 =
      __store_be_u64_ptr.asFunction<_dart__store_be_u64>();

  ffi.Pointer<ffi.Void> _bnd_set_ptr_bounds(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __bnd_set_ptr_bounds(
      arg0,
      arg1,
    );
  }

  late final __bnd_set_ptr_bounds_ptr =
      _lookup<ffi.NativeFunction<Native__bnd_set_ptr_bounds>>(
          '_bnd_set_ptr_bounds');
  late final _dart__bnd_set_ptr_bounds __bnd_set_ptr_bounds =
      __bnd_set_ptr_bounds_ptr.asFunction<_dart__bnd_set_ptr_bounds>();

  ffi.Pointer<ffi.Void> _bnd_narrow_ptr_bounds(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return __bnd_narrow_ptr_bounds(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __bnd_narrow_ptr_bounds_ptr =
      _lookup<ffi.NativeFunction<Native__bnd_narrow_ptr_bounds>>(
          '_bnd_narrow_ptr_bounds');
  late final _dart__bnd_narrow_ptr_bounds __bnd_narrow_ptr_bounds =
      __bnd_narrow_ptr_bounds_ptr.asFunction<_dart__bnd_narrow_ptr_bounds>();

  ffi.Pointer<ffi.Void> _bnd_copy_ptr_bounds(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return __bnd_copy_ptr_bounds(
      arg0,
      arg1,
    );
  }

  late final __bnd_copy_ptr_bounds_ptr =
      _lookup<ffi.NativeFunction<Native__bnd_copy_ptr_bounds>>(
          '_bnd_copy_ptr_bounds');
  late final _dart__bnd_copy_ptr_bounds __bnd_copy_ptr_bounds =
      __bnd_copy_ptr_bounds_ptr.asFunction<_dart__bnd_copy_ptr_bounds>();

  ffi.Pointer<ffi.Void> _bnd_init_ptr_bounds(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __bnd_init_ptr_bounds(
      arg0,
    );
  }

  late final __bnd_init_ptr_bounds_ptr =
      _lookup<ffi.NativeFunction<Native__bnd_init_ptr_bounds>>(
          '_bnd_init_ptr_bounds');
  late final _dart__bnd_init_ptr_bounds __bnd_init_ptr_bounds =
      __bnd_init_ptr_bounds_ptr.asFunction<_dart__bnd_init_ptr_bounds>();

  void _bnd_store_ptr_bounds(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return __bnd_store_ptr_bounds(
      arg0,
      arg1,
    );
  }

  late final __bnd_store_ptr_bounds_ptr =
      _lookup<ffi.NativeFunction<Native__bnd_store_ptr_bounds>>(
          '_bnd_store_ptr_bounds');
  late final _dart__bnd_store_ptr_bounds __bnd_store_ptr_bounds =
      __bnd_store_ptr_bounds_ptr.asFunction<_dart__bnd_store_ptr_bounds>();

  void _bnd_chk_ptr_lbounds(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __bnd_chk_ptr_lbounds(
      arg0,
    );
  }

  late final __bnd_chk_ptr_lbounds_ptr =
      _lookup<ffi.NativeFunction<Native__bnd_chk_ptr_lbounds>>(
          '_bnd_chk_ptr_lbounds');
  late final _dart__bnd_chk_ptr_lbounds __bnd_chk_ptr_lbounds =
      __bnd_chk_ptr_lbounds_ptr.asFunction<_dart__bnd_chk_ptr_lbounds>();

  void _bnd_chk_ptr_ubounds(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __bnd_chk_ptr_ubounds(
      arg0,
    );
  }

  late final __bnd_chk_ptr_ubounds_ptr =
      _lookup<ffi.NativeFunction<Native__bnd_chk_ptr_ubounds>>(
          '_bnd_chk_ptr_ubounds');
  late final _dart__bnd_chk_ptr_ubounds __bnd_chk_ptr_ubounds =
      __bnd_chk_ptr_ubounds_ptr.asFunction<_dart__bnd_chk_ptr_ubounds>();

  void _bnd_chk_ptr_bounds(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __bnd_chk_ptr_bounds(
      arg0,
      arg1,
    );
  }

  late final __bnd_chk_ptr_bounds_ptr =
      _lookup<ffi.NativeFunction<Native__bnd_chk_ptr_bounds>>(
          '_bnd_chk_ptr_bounds');
  late final _dart__bnd_chk_ptr_bounds __bnd_chk_ptr_bounds =
      __bnd_chk_ptr_bounds_ptr.asFunction<_dart__bnd_chk_ptr_bounds>();

  ffi.Pointer<ffi.Void> _bnd_load_ptr_bounds(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return __bnd_load_ptr_bounds(
      arg0,
      arg1,
    );
  }

  late final __bnd_load_ptr_bounds_ptr =
      _lookup<ffi.NativeFunction<Native__bnd_load_ptr_bounds>>(
          '_bnd_load_ptr_bounds');
  late final _dart__bnd_load_ptr_bounds __bnd_load_ptr_bounds =
      __bnd_load_ptr_bounds_ptr.asFunction<_dart__bnd_load_ptr_bounds>();

  ffi.Pointer<ffi.Void> _bnd_get_ptr_lbound(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __bnd_get_ptr_lbound(
      arg0,
    );
  }

  late final __bnd_get_ptr_lbound_ptr =
      _lookup<ffi.NativeFunction<Native__bnd_get_ptr_lbound>>(
          '_bnd_get_ptr_lbound');
  late final _dart__bnd_get_ptr_lbound __bnd_get_ptr_lbound =
      __bnd_get_ptr_lbound_ptr.asFunction<_dart__bnd_get_ptr_lbound>();

  ffi.Pointer<ffi.Void> _bnd_get_ptr_ubound(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __bnd_get_ptr_ubound(
      arg0,
    );
  }

  late final __bnd_get_ptr_ubound_ptr =
      _lookup<ffi.NativeFunction<Native__bnd_get_ptr_ubound>>(
          '_bnd_get_ptr_ubound');
  late final _dart__bnd_get_ptr_ubound __bnd_get_ptr_ubound =
      __bnd_get_ptr_ubound_ptr.asFunction<_dart__bnd_get_ptr_ubound>();

  int _rdpid_u32() {
    return __rdpid_u32();
  }

  late final __rdpid_u32_ptr =
      _lookup<ffi.NativeFunction<Native__rdpid_u32>>('_rdpid_u32');
  late final _dart__rdpid_u32 __rdpid_u32 =
      __rdpid_u32_ptr.asFunction<_dart__rdpid_u32>();

  void _ptwrite32(
    int arg0,
  ) {
    return __ptwrite32(
      arg0,
    );
  }

  late final __ptwrite32_ptr =
      _lookup<ffi.NativeFunction<Native__ptwrite32>>('_ptwrite32');
  late final _dart__ptwrite32 __ptwrite32 =
      __ptwrite32_ptr.asFunction<_dart__ptwrite32>();

  void _ptwrite64(
    int arg0,
  ) {
    return __ptwrite64(
      arg0,
    );
  }

  late final __ptwrite64_ptr =
      _lookup<ffi.NativeFunction<Native__ptwrite64>>('_ptwrite64');
  late final _dart__ptwrite64 __ptwrite64 =
      __ptwrite64_ptr.asFunction<_dart__ptwrite64>();

  int _pconfig_u32(
    int arg0,
    ffi.Pointer<ffi.Uint64> __data,
  ) {
    return __pconfig_u32(
      arg0,
      __data,
    );
  }

  late final __pconfig_u32_ptr =
      _lookup<ffi.NativeFunction<Native__pconfig_u32>>('_pconfig_u32');
  late final _dart__pconfig_u32 __pconfig_u32 =
      __pconfig_u32_ptr.asFunction<_dart__pconfig_u32>();

  void _wbnoinvd() {
    return __wbnoinvd();
  }

  late final __wbnoinvd_ptr =
      _lookup<ffi.NativeFunction<Native__wbnoinvd>>('_wbnoinvd');
  late final _dart__wbnoinvd __wbnoinvd =
      __wbnoinvd_ptr.asFunction<_dart__wbnoinvd>();

  int _encls_u32(
    int arg0,
    ffi.Pointer<ffi.Uint64> __data,
  ) {
    return __encls_u32(
      arg0,
      __data,
    );
  }

  late final __encls_u32_ptr =
      _lookup<ffi.NativeFunction<Native__encls_u32>>('_encls_u32');
  late final _dart__encls_u32 __encls_u32 =
      __encls_u32_ptr.asFunction<_dart__encls_u32>();

  int _enclu_u32(
    int arg0,
    ffi.Pointer<ffi.Uint64> __data,
  ) {
    return __enclu_u32(
      arg0,
      __data,
    );
  }

  late final __enclu_u32_ptr =
      _lookup<ffi.NativeFunction<Native__enclu_u32>>('_enclu_u32');
  late final _dart__enclu_u32 __enclu_u32 =
      __enclu_u32_ptr.asFunction<_dart__enclu_u32>();

  int _enclv_u32(
    int arg0,
    ffi.Pointer<ffi.Uint64> __data,
  ) {
    return __enclv_u32(
      arg0,
      __data,
    );
  }

  late final __enclv_u32_ptr =
      _lookup<ffi.NativeFunction<Native__enclv_u32>>('_enclv_u32');
  late final _dart__enclv_u32 __enclv_u32 =
      __enclv_u32_ptr.asFunction<_dart__enclv_u32>();

  int _udiv128(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint64> arg3,
  ) {
    return __udiv128(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __udiv128_ptr =
      _lookup<ffi.NativeFunction<Native__udiv128>>('_udiv128');
  late final _dart__udiv128 __udiv128 =
      __udiv128_ptr.asFunction<_dart__udiv128>();

  int _div128(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int64> arg3,
  ) {
    return __div128(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __div128_ptr =
      _lookup<ffi.NativeFunction<Native__div128>>('_div128');
  late final _dart__div128 __div128 = __div128_ptr.asFunction<_dart__div128>();

  int _udiv64(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Uint32> arg2,
  ) {
    return __udiv64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __udiv64_ptr =
      _lookup<ffi.NativeFunction<Native__udiv64>>('_udiv64');
  late final _dart__udiv64 __udiv64 = __udiv64_ptr.asFunction<_dart__udiv64>();

  int _div64(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    return __div64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __div64_ptr = _lookup<ffi.NativeFunction<Native__div64>>('_div64');
  late final _dart__div64 __div64 = __div64_ptr.asFunction<_dart__div64>();

  int _rdpkru_u32() {
    return __rdpkru_u32();
  }

  late final __rdpkru_u32_ptr =
      _lookup<ffi.NativeFunction<Native__rdpkru_u32>>('_rdpkru_u32');
  late final _dart__rdpkru_u32 __rdpkru_u32 =
      __rdpkru_u32_ptr.asFunction<_dart__rdpkru_u32>();

  void _wrpkru(
    int arg0,
  ) {
    return __wrpkru(
      arg0,
    );
  }

  late final __wrpkru_ptr =
      _lookup<ffi.NativeFunction<Native__wrpkru>>('_wrpkru');
  late final _dart__wrpkru __wrpkru = __wrpkru_ptr.asFunction<_dart__wrpkru>();

  int _enqcmd(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return __enqcmd(
      arg0,
      arg1,
    );
  }

  late final __enqcmd_ptr =
      _lookup<ffi.NativeFunction<Native__enqcmd>>('_enqcmd');
  late final _dart__enqcmd __enqcmd = __enqcmd_ptr.asFunction<_dart__enqcmd>();

  int _enqcmds(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return __enqcmds(
      arg0,
      arg1,
    );
  }

  late final __enqcmds_ptr =
      _lookup<ffi.NativeFunction<Native__enqcmds>>('_enqcmds');
  late final _dart__enqcmds __enqcmds =
      __enqcmds_ptr.asFunction<_dart__enqcmds>();

  void _incsspd(
    int arg0,
  ) {
    return __incsspd(
      arg0,
    );
  }

  late final __incsspd_ptr =
      _lookup<ffi.NativeFunction<Native__incsspd>>('_incsspd');
  late final _dart__incsspd __incsspd =
      __incsspd_ptr.asFunction<_dart__incsspd>();

  int _rdsspd() {
    return __rdsspd();
  }

  late final __rdsspd_ptr =
      _lookup<ffi.NativeFunction<Native__rdsspd>>('_rdsspd');
  late final _dart__rdsspd __rdsspd = __rdsspd_ptr.asFunction<_dart__rdsspd>();

  void _saveprevssp() {
    return __saveprevssp();
  }

  late final __saveprevssp_ptr =
      _lookup<ffi.NativeFunction<Native__saveprevssp>>('_saveprevssp');
  late final _dart__saveprevssp __saveprevssp =
      __saveprevssp_ptr.asFunction<_dart__saveprevssp>();

  void _rstorssp(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __rstorssp(
      arg0,
    );
  }

  late final __rstorssp_ptr =
      _lookup<ffi.NativeFunction<Native__rstorssp>>('_rstorssp');
  late final _dart__rstorssp __rstorssp =
      __rstorssp_ptr.asFunction<_dart__rstorssp>();

  void _wrssd(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return __wrssd(
      arg0,
      arg1,
    );
  }

  late final __wrssd_ptr = _lookup<ffi.NativeFunction<Native__wrssd>>('_wrssd');
  late final _dart__wrssd __wrssd = __wrssd_ptr.asFunction<_dart__wrssd>();

  void _wrussd(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return __wrussd(
      arg0,
      arg1,
    );
  }

  late final __wrussd_ptr =
      _lookup<ffi.NativeFunction<Native__wrussd>>('_wrussd');
  late final _dart__wrussd __wrussd = __wrussd_ptr.asFunction<_dart__wrussd>();

  void _setssbsy() {
    return __setssbsy();
  }

  late final __setssbsy_ptr =
      _lookup<ffi.NativeFunction<Native__setssbsy>>('_setssbsy');
  late final _dart__setssbsy __setssbsy =
      __setssbsy_ptr.asFunction<_dart__setssbsy>();

  void _clrssbsy(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __clrssbsy(
      arg0,
    );
  }

  late final __clrssbsy_ptr =
      _lookup<ffi.NativeFunction<Native__clrssbsy>>('_clrssbsy');
  late final _dart__clrssbsy __clrssbsy =
      __clrssbsy_ptr.asFunction<_dart__clrssbsy>();

  ffi.Pointer<ffi.Void> _switchssp(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __switchssp(
      arg0,
    );
  }

  late final __switchssp_ptr =
      _lookup<ffi.NativeFunction<Native__switchssp>>('_switchssp');
  late final _dart__switchssp __switchssp =
      __switchssp_ptr.asFunction<_dart__switchssp>();

  void _incsspq(
    int arg0,
  ) {
    return __incsspq(
      arg0,
    );
  }

  late final __incsspq_ptr =
      _lookup<ffi.NativeFunction<Native__incsspq>>('_incsspq');
  late final _dart__incsspq __incsspq =
      __incsspq_ptr.asFunction<_dart__incsspq>();

  int _rdsspq() {
    return __rdsspq();
  }

  late final __rdsspq_ptr =
      _lookup<ffi.NativeFunction<Native__rdsspq>>('_rdsspq');
  late final _dart__rdsspq __rdsspq = __rdsspq_ptr.asFunction<_dart__rdsspq>();

  void _wrssq(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return __wrssq(
      arg0,
      arg1,
    );
  }

  late final __wrssq_ptr = _lookup<ffi.NativeFunction<Native__wrssq>>('_wrssq');
  late final _dart__wrssq __wrssq = __wrssq_ptr.asFunction<_dart__wrssq>();

  void _wrussq(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return __wrussq(
      arg0,
      arg1,
    );
  }

  late final __wrussq_ptr =
      _lookup<ffi.NativeFunction<Native__wrussq>>('_wrussq');
  late final _dart__wrussq __wrussq = __wrussq_ptr.asFunction<_dart__wrussq>();

  void _mm_cldemote(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __mm_cldemote(
      arg0,
    );
  }

  late final __mm_cldemote_ptr =
      _lookup<ffi.NativeFunction<Native__mm_cldemote>>('_mm_cldemote');
  late final _dart__mm_cldemote __mm_cldemote =
      __mm_cldemote_ptr.asFunction<_dart__mm_cldemote>();

  void _directstoreu_u32(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __directstoreu_u32(
      arg0,
      arg1,
    );
  }

  late final __directstoreu_u32_ptr =
      _lookup<ffi.NativeFunction<Native__directstoreu_u32>>(
          '_directstoreu_u32');
  late final _dart__directstoreu_u32 __directstoreu_u32 =
      __directstoreu_u32_ptr.asFunction<_dart__directstoreu_u32>();

  void _directstoreu_u64(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __directstoreu_u64(
      arg0,
      arg1,
    );
  }

  late final __directstoreu_u64_ptr =
      _lookup<ffi.NativeFunction<Native__directstoreu_u64>>(
          '_directstoreu_u64');
  late final _dart__directstoreu_u64 __directstoreu_u64 =
      __directstoreu_u64_ptr.asFunction<_dart__directstoreu_u64>();

  void _movdir64b(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return __movdir64b(
      arg0,
      arg1,
    );
  }

  late final __movdir64b_ptr =
      _lookup<ffi.NativeFunction<Native__movdir64b>>('_movdir64b');
  late final _dart__movdir64b __movdir64b =
      __movdir64b_ptr.asFunction<_dart__movdir64b>();

  void _serialize() {
    return __serialize();
  }

  late final __serialize_ptr =
      _lookup<ffi.NativeFunction<Native__serialize>>('_serialize');
  late final _dart__serialize __serialize =
      __serialize_ptr.asFunction<_dart__serialize>();

  void _xsusldtrk() {
    return __xsusldtrk();
  }

  late final __xsusldtrk_ptr =
      _lookup<ffi.NativeFunction<Native__xsusldtrk>>('_xsusldtrk');
  late final _dart__xsusldtrk __xsusldtrk =
      __xsusldtrk_ptr.asFunction<_dart__xsusldtrk>();

  void _xresldtrk() {
    return __xresldtrk();
  }

  late final __xresldtrk_ptr =
      _lookup<ffi.NativeFunction<Native__xresldtrk>>('_xresldtrk');
  late final _dart__xresldtrk __xresldtrk =
      __xresldtrk_ptr.asFunction<_dart__xresldtrk>();

  void _umonitor(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __umonitor(
      arg0,
    );
  }

  late final __umonitor_ptr =
      _lookup<ffi.NativeFunction<Native__umonitor>>('_umonitor');
  late final _dart__umonitor __umonitor =
      __umonitor_ptr.asFunction<_dart__umonitor>();

  int _umwait(
    int arg0,
    int arg1,
  ) {
    return __umwait(
      arg0,
      arg1,
    );
  }

  late final __umwait_ptr =
      _lookup<ffi.NativeFunction<Native__umwait>>('_umwait');
  late final _dart__umwait __umwait = __umwait_ptr.asFunction<_dart__umwait>();

  int _tpause(
    int arg0,
    int arg1,
  ) {
    return __tpause(
      arg0,
      arg1,
    );
  }

  late final __tpause_ptr =
      _lookup<ffi.NativeFunction<Native__tpause>>('_tpause');
  late final _dart__tpause __tpause = __tpause_ptr.asFunction<_dart__tpause>();

  void _clui() {
    return __clui();
  }

  late final __clui_ptr = _lookup<ffi.NativeFunction<Native__clui>>('_clui');
  late final _dart__clui __clui = __clui_ptr.asFunction<_dart__clui>();

  void _stui() {
    return __stui();
  }

  late final __stui_ptr = _lookup<ffi.NativeFunction<Native__stui>>('_stui');
  late final _dart__stui __stui = __stui_ptr.asFunction<_dart__stui>();

  int _testui() {
    return __testui();
  }

  late final __testui_ptr =
      _lookup<ffi.NativeFunction<Native__testui>>('_testui');
  late final _dart__testui __testui = __testui_ptr.asFunction<_dart__testui>();

  void _senduipi(
    int arg0,
  ) {
    return __senduipi(
      arg0,
    );
  }

  late final __senduipi_ptr =
      _lookup<ffi.NativeFunction<Native__senduipi>>('_senduipi');
  late final _dart__senduipi __senduipi =
      __senduipi_ptr.asFunction<_dart__senduipi>();

  void _hreset(
    int arg0,
  ) {
    return __hreset(
      arg0,
    );
  }

  late final __hreset_ptr =
      _lookup<ffi.NativeFunction<Native__hreset>>('_hreset');
  late final _dart__hreset __hreset = __hreset_ptr.asFunction<_dart__hreset>();

  int _mm512_kunpackb(
    int arg0,
    int arg1,
  ) {
    return __mm512_kunpackb(
      arg0,
      arg1,
    );
  }

  late final __mm512_kunpackb_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_kunpackb>>('_mm512_kunpackb');
  late final _dart__mm512_kunpackb __mm512_kunpackb =
      __mm512_kunpackb_ptr.asFunction<_dart__mm512_kunpackb>();

  int _mm512_kunpackw(
    int arg0,
    int arg1,
  ) {
    return __mm512_kunpackw(
      arg0,
      arg1,
    );
  }

  late final __mm512_kunpackw_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_kunpackw>>('_mm512_kunpackw');
  late final _dart__mm512_kunpackw __mm512_kunpackw =
      __mm512_kunpackw_ptr.asFunction<_dart__mm512_kunpackw>();

  int _mm512_kunpackd(
    int arg0,
    int arg1,
  ) {
    return __mm512_kunpackd(
      arg0,
      arg1,
    );
  }

  late final __mm512_kunpackd_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_kunpackd>>('_mm512_kunpackd');
  late final _dart__mm512_kunpackd __mm512_kunpackd =
      __mm512_kunpackd_ptr.asFunction<_dart__mm512_kunpackd>();

  int _mm512_testz_and_mask8(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_and_mask8(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_and_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_and_mask8>>(
          '_mm512_testz_and_mask8');
  late final _dart__mm512_testz_and_mask8 __mm512_testz_and_mask8 =
      __mm512_testz_and_mask8_ptr.asFunction<_dart__mm512_testz_and_mask8>();

  int _mm512_testz_and_mask16(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_and_mask16(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_and_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_and_mask16>>(
          '_mm512_testz_and_mask16');
  late final _dart__mm512_testz_and_mask16 __mm512_testz_and_mask16 =
      __mm512_testz_and_mask16_ptr.asFunction<_dart__mm512_testz_and_mask16>();

  int _mm512_testz_and_mask32(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_and_mask32(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_and_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_and_mask32>>(
          '_mm512_testz_and_mask32');
  late final _dart__mm512_testz_and_mask32 __mm512_testz_and_mask32 =
      __mm512_testz_and_mask32_ptr.asFunction<_dart__mm512_testz_and_mask32>();

  int _mm512_testz_and_mask64(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_and_mask64(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_and_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_and_mask64>>(
          '_mm512_testz_and_mask64');
  late final _dart__mm512_testz_and_mask64 __mm512_testz_and_mask64 =
      __mm512_testz_and_mask64_ptr.asFunction<_dart__mm512_testz_and_mask64>();

  int _mm512_testz_andn_mask8(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_andn_mask8(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_andn_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_andn_mask8>>(
          '_mm512_testz_andn_mask8');
  late final _dart__mm512_testz_andn_mask8 __mm512_testz_andn_mask8 =
      __mm512_testz_andn_mask8_ptr.asFunction<_dart__mm512_testz_andn_mask8>();

  int _mm512_testz_andn_mask16(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_andn_mask16(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_andn_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_andn_mask16>>(
          '_mm512_testz_andn_mask16');
  late final _dart__mm512_testz_andn_mask16 __mm512_testz_andn_mask16 =
      __mm512_testz_andn_mask16_ptr
          .asFunction<_dart__mm512_testz_andn_mask16>();

  int _mm512_testz_andn_mask32(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_andn_mask32(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_andn_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_andn_mask32>>(
          '_mm512_testz_andn_mask32');
  late final _dart__mm512_testz_andn_mask32 __mm512_testz_andn_mask32 =
      __mm512_testz_andn_mask32_ptr
          .asFunction<_dart__mm512_testz_andn_mask32>();

  int _mm512_testz_andn_mask64(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_andn_mask64(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_andn_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_andn_mask64>>(
          '_mm512_testz_andn_mask64');
  late final _dart__mm512_testz_andn_mask64 __mm512_testz_andn_mask64 =
      __mm512_testz_andn_mask64_ptr
          .asFunction<_dart__mm512_testz_andn_mask64>();

  int _mm512_testz_or_mask8(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_or_mask8(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_or_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_or_mask8>>(
          '_mm512_testz_or_mask8');
  late final _dart__mm512_testz_or_mask8 __mm512_testz_or_mask8 =
      __mm512_testz_or_mask8_ptr.asFunction<_dart__mm512_testz_or_mask8>();

  int _mm512_testz_or_mask16(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_or_mask16(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_or_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_or_mask16>>(
          '_mm512_testz_or_mask16');
  late final _dart__mm512_testz_or_mask16 __mm512_testz_or_mask16 =
      __mm512_testz_or_mask16_ptr.asFunction<_dart__mm512_testz_or_mask16>();

  int _mm512_testz_or_mask32(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_or_mask32(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_or_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_or_mask32>>(
          '_mm512_testz_or_mask32');
  late final _dart__mm512_testz_or_mask32 __mm512_testz_or_mask32 =
      __mm512_testz_or_mask32_ptr.asFunction<_dart__mm512_testz_or_mask32>();

  int _mm512_testz_or_mask64(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_or_mask64(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_or_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_or_mask64>>(
          '_mm512_testz_or_mask64');
  late final _dart__mm512_testz_or_mask64 __mm512_testz_or_mask64 =
      __mm512_testz_or_mask64_ptr.asFunction<_dart__mm512_testz_or_mask64>();

  int _mm512_testz_nor_mask8(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_nor_mask8(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_nor_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_nor_mask8>>(
          '_mm512_testz_nor_mask8');
  late final _dart__mm512_testz_nor_mask8 __mm512_testz_nor_mask8 =
      __mm512_testz_nor_mask8_ptr.asFunction<_dart__mm512_testz_nor_mask8>();

  int _mm512_testz_nor_mask16(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_nor_mask16(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_nor_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_nor_mask16>>(
          '_mm512_testz_nor_mask16');
  late final _dart__mm512_testz_nor_mask16 __mm512_testz_nor_mask16 =
      __mm512_testz_nor_mask16_ptr.asFunction<_dart__mm512_testz_nor_mask16>();

  int _mm512_testz_nor_mask32(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_nor_mask32(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_nor_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_nor_mask32>>(
          '_mm512_testz_nor_mask32');
  late final _dart__mm512_testz_nor_mask32 __mm512_testz_nor_mask32 =
      __mm512_testz_nor_mask32_ptr.asFunction<_dart__mm512_testz_nor_mask32>();

  int _mm512_testz_nor_mask64(
    int arg0,
    int arg1,
  ) {
    return __mm512_testz_nor_mask64(
      arg0,
      arg1,
    );
  }

  late final __mm512_testz_nor_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_testz_nor_mask64>>(
          '_mm512_testz_nor_mask64');
  late final _dart__mm512_testz_nor_mask64 __mm512_testz_nor_mask64 =
      __mm512_testz_nor_mask64_ptr.asFunction<_dart__mm512_testz_nor_mask64>();

  int _kadd_mask8(
    int arg0,
    int arg1,
  ) {
    return __kadd_mask8(
      arg0,
      arg1,
    );
  }

  late final __kadd_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__kadd_mask8>>('_kadd_mask8');
  late final _dart__kadd_mask8 __kadd_mask8 =
      __kadd_mask8_ptr.asFunction<_dart__kadd_mask8>();

  int _kadd_mask16(
    int arg0,
    int arg1,
  ) {
    return __kadd_mask16(
      arg0,
      arg1,
    );
  }

  late final __kadd_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__kadd_mask16>>('_kadd_mask16');
  late final _dart__kadd_mask16 __kadd_mask16 =
      __kadd_mask16_ptr.asFunction<_dart__kadd_mask16>();

  int _kadd_mask32(
    int arg0,
    int arg1,
  ) {
    return __kadd_mask32(
      arg0,
      arg1,
    );
  }

  late final __kadd_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__kadd_mask32>>('_kadd_mask32');
  late final _dart__kadd_mask32 __kadd_mask32 =
      __kadd_mask32_ptr.asFunction<_dart__kadd_mask32>();

  int _kadd_mask64(
    int arg0,
    int arg1,
  ) {
    return __kadd_mask64(
      arg0,
      arg1,
    );
  }

  late final __kadd_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__kadd_mask64>>('_kadd_mask64');
  late final _dart__kadd_mask64 __kadd_mask64 =
      __kadd_mask64_ptr.asFunction<_dart__kadd_mask64>();

  int _kand_mask8(
    int arg0,
    int arg1,
  ) {
    return __kand_mask8(
      arg0,
      arg1,
    );
  }

  late final __kand_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__kand_mask8>>('_kand_mask8');
  late final _dart__kand_mask8 __kand_mask8 =
      __kand_mask8_ptr.asFunction<_dart__kand_mask8>();

  int _kand_mask16(
    int arg0,
    int arg1,
  ) {
    return __kand_mask16(
      arg0,
      arg1,
    );
  }

  late final __kand_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__kand_mask16>>('_kand_mask16');
  late final _dart__kand_mask16 __kand_mask16 =
      __kand_mask16_ptr.asFunction<_dart__kand_mask16>();

  int _kand_mask32(
    int arg0,
    int arg1,
  ) {
    return __kand_mask32(
      arg0,
      arg1,
    );
  }

  late final __kand_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__kand_mask32>>('_kand_mask32');
  late final _dart__kand_mask32 __kand_mask32 =
      __kand_mask32_ptr.asFunction<_dart__kand_mask32>();

  int _kand_mask64(
    int arg0,
    int arg1,
  ) {
    return __kand_mask64(
      arg0,
      arg1,
    );
  }

  late final __kand_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__kand_mask64>>('_kand_mask64');
  late final _dart__kand_mask64 __kand_mask64 =
      __kand_mask64_ptr.asFunction<_dart__kand_mask64>();

  int _kandn_mask8(
    int arg0,
    int arg1,
  ) {
    return __kandn_mask8(
      arg0,
      arg1,
    );
  }

  late final __kandn_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__kandn_mask8>>('_kandn_mask8');
  late final _dart__kandn_mask8 __kandn_mask8 =
      __kandn_mask8_ptr.asFunction<_dart__kandn_mask8>();

  int _kandn_mask16(
    int arg0,
    int arg1,
  ) {
    return __kandn_mask16(
      arg0,
      arg1,
    );
  }

  late final __kandn_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__kandn_mask16>>('_kandn_mask16');
  late final _dart__kandn_mask16 __kandn_mask16 =
      __kandn_mask16_ptr.asFunction<_dart__kandn_mask16>();

  int _kandn_mask32(
    int arg0,
    int arg1,
  ) {
    return __kandn_mask32(
      arg0,
      arg1,
    );
  }

  late final __kandn_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__kandn_mask32>>('_kandn_mask32');
  late final _dart__kandn_mask32 __kandn_mask32 =
      __kandn_mask32_ptr.asFunction<_dart__kandn_mask32>();

  int _kandn_mask64(
    int arg0,
    int arg1,
  ) {
    return __kandn_mask64(
      arg0,
      arg1,
    );
  }

  late final __kandn_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__kandn_mask64>>('_kandn_mask64');
  late final _dart__kandn_mask64 __kandn_mask64 =
      __kandn_mask64_ptr.asFunction<_dart__kandn_mask64>();

  int _knot_mask8(
    int arg0,
  ) {
    return __knot_mask8(
      arg0,
    );
  }

  late final __knot_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__knot_mask8>>('_knot_mask8');
  late final _dart__knot_mask8 __knot_mask8 =
      __knot_mask8_ptr.asFunction<_dart__knot_mask8>();

  int _knot_mask16(
    int arg0,
  ) {
    return __knot_mask16(
      arg0,
    );
  }

  late final __knot_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__knot_mask16>>('_knot_mask16');
  late final _dart__knot_mask16 __knot_mask16 =
      __knot_mask16_ptr.asFunction<_dart__knot_mask16>();

  int _knot_mask32(
    int arg0,
  ) {
    return __knot_mask32(
      arg0,
    );
  }

  late final __knot_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__knot_mask32>>('_knot_mask32');
  late final _dart__knot_mask32 __knot_mask32 =
      __knot_mask32_ptr.asFunction<_dart__knot_mask32>();

  int _knot_mask64(
    int arg0,
  ) {
    return __knot_mask64(
      arg0,
    );
  }

  late final __knot_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__knot_mask64>>('_knot_mask64');
  late final _dart__knot_mask64 __knot_mask64 =
      __knot_mask64_ptr.asFunction<_dart__knot_mask64>();

  int _kor_mask8(
    int arg0,
    int arg1,
  ) {
    return __kor_mask8(
      arg0,
      arg1,
    );
  }

  late final __kor_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__kor_mask8>>('_kor_mask8');
  late final _dart__kor_mask8 __kor_mask8 =
      __kor_mask8_ptr.asFunction<_dart__kor_mask8>();

  int _kor_mask16(
    int arg0,
    int arg1,
  ) {
    return __kor_mask16(
      arg0,
      arg1,
    );
  }

  late final __kor_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__kor_mask16>>('_kor_mask16');
  late final _dart__kor_mask16 __kor_mask16 =
      __kor_mask16_ptr.asFunction<_dart__kor_mask16>();

  int _kor_mask32(
    int arg0,
    int arg1,
  ) {
    return __kor_mask32(
      arg0,
      arg1,
    );
  }

  late final __kor_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__kor_mask32>>('_kor_mask32');
  late final _dart__kor_mask32 __kor_mask32 =
      __kor_mask32_ptr.asFunction<_dart__kor_mask32>();

  int _kor_mask64(
    int arg0,
    int arg1,
  ) {
    return __kor_mask64(
      arg0,
      arg1,
    );
  }

  late final __kor_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__kor_mask64>>('_kor_mask64');
  late final _dart__kor_mask64 __kor_mask64 =
      __kor_mask64_ptr.asFunction<_dart__kor_mask64>();

  int _kxnor_mask8(
    int arg0,
    int arg1,
  ) {
    return __kxnor_mask8(
      arg0,
      arg1,
    );
  }

  late final __kxnor_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__kxnor_mask8>>('_kxnor_mask8');
  late final _dart__kxnor_mask8 __kxnor_mask8 =
      __kxnor_mask8_ptr.asFunction<_dart__kxnor_mask8>();

  int _kxnor_mask16(
    int arg0,
    int arg1,
  ) {
    return __kxnor_mask16(
      arg0,
      arg1,
    );
  }

  late final __kxnor_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__kxnor_mask16>>('_kxnor_mask16');
  late final _dart__kxnor_mask16 __kxnor_mask16 =
      __kxnor_mask16_ptr.asFunction<_dart__kxnor_mask16>();

  int _kxnor_mask32(
    int arg0,
    int arg1,
  ) {
    return __kxnor_mask32(
      arg0,
      arg1,
    );
  }

  late final __kxnor_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__kxnor_mask32>>('_kxnor_mask32');
  late final _dart__kxnor_mask32 __kxnor_mask32 =
      __kxnor_mask32_ptr.asFunction<_dart__kxnor_mask32>();

  int _kxnor_mask64(
    int arg0,
    int arg1,
  ) {
    return __kxnor_mask64(
      arg0,
      arg1,
    );
  }

  late final __kxnor_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__kxnor_mask64>>('_kxnor_mask64');
  late final _dart__kxnor_mask64 __kxnor_mask64 =
      __kxnor_mask64_ptr.asFunction<_dart__kxnor_mask64>();

  int _kxor_mask8(
    int arg0,
    int arg1,
  ) {
    return __kxor_mask8(
      arg0,
      arg1,
    );
  }

  late final __kxor_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__kxor_mask8>>('_kxor_mask8');
  late final _dart__kxor_mask8 __kxor_mask8 =
      __kxor_mask8_ptr.asFunction<_dart__kxor_mask8>();

  int _kxor_mask16(
    int arg0,
    int arg1,
  ) {
    return __kxor_mask16(
      arg0,
      arg1,
    );
  }

  late final __kxor_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__kxor_mask16>>('_kxor_mask16');
  late final _dart__kxor_mask16 __kxor_mask16 =
      __kxor_mask16_ptr.asFunction<_dart__kxor_mask16>();

  int _kxor_mask32(
    int arg0,
    int arg1,
  ) {
    return __kxor_mask32(
      arg0,
      arg1,
    );
  }

  late final __kxor_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__kxor_mask32>>('_kxor_mask32');
  late final _dart__kxor_mask32 __kxor_mask32 =
      __kxor_mask32_ptr.asFunction<_dart__kxor_mask32>();

  int _kxor_mask64(
    int arg0,
    int arg1,
  ) {
    return __kxor_mask64(
      arg0,
      arg1,
    );
  }

  late final __kxor_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__kxor_mask64>>('_kxor_mask64');
  late final _dart__kxor_mask64 __kxor_mask64 =
      __kxor_mask64_ptr.asFunction<_dart__kxor_mask64>();

  int _kshiftli_mask8(
    int arg0,
    int arg1,
  ) {
    return __kshiftli_mask8(
      arg0,
      arg1,
    );
  }

  late final __kshiftli_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__kshiftli_mask8>>('_kshiftli_mask8');
  late final _dart__kshiftli_mask8 __kshiftli_mask8 =
      __kshiftli_mask8_ptr.asFunction<_dart__kshiftli_mask8>();

  int _kshiftli_mask16(
    int arg0,
    int arg1,
  ) {
    return __kshiftli_mask16(
      arg0,
      arg1,
    );
  }

  late final __kshiftli_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__kshiftli_mask16>>('_kshiftli_mask16');
  late final _dart__kshiftli_mask16 __kshiftli_mask16 =
      __kshiftli_mask16_ptr.asFunction<_dart__kshiftli_mask16>();

  int _kshiftli_mask32(
    int arg0,
    int arg1,
  ) {
    return __kshiftli_mask32(
      arg0,
      arg1,
    );
  }

  late final __kshiftli_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__kshiftli_mask32>>('_kshiftli_mask32');
  late final _dart__kshiftli_mask32 __kshiftli_mask32 =
      __kshiftli_mask32_ptr.asFunction<_dart__kshiftli_mask32>();

  int _kshiftli_mask64(
    int arg0,
    int arg1,
  ) {
    return __kshiftli_mask64(
      arg0,
      arg1,
    );
  }

  late final __kshiftli_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__kshiftli_mask64>>('_kshiftli_mask64');
  late final _dart__kshiftli_mask64 __kshiftli_mask64 =
      __kshiftli_mask64_ptr.asFunction<_dart__kshiftli_mask64>();

  int _kshiftri_mask8(
    int arg0,
    int arg1,
  ) {
    return __kshiftri_mask8(
      arg0,
      arg1,
    );
  }

  late final __kshiftri_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__kshiftri_mask8>>('_kshiftri_mask8');
  late final _dart__kshiftri_mask8 __kshiftri_mask8 =
      __kshiftri_mask8_ptr.asFunction<_dart__kshiftri_mask8>();

  int _kshiftri_mask16(
    int arg0,
    int arg1,
  ) {
    return __kshiftri_mask16(
      arg0,
      arg1,
    );
  }

  late final __kshiftri_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__kshiftri_mask16>>('_kshiftri_mask16');
  late final _dart__kshiftri_mask16 __kshiftri_mask16 =
      __kshiftri_mask16_ptr.asFunction<_dart__kshiftri_mask16>();

  int _kshiftri_mask32(
    int arg0,
    int arg1,
  ) {
    return __kshiftri_mask32(
      arg0,
      arg1,
    );
  }

  late final __kshiftri_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__kshiftri_mask32>>('_kshiftri_mask32');
  late final _dart__kshiftri_mask32 __kshiftri_mask32 =
      __kshiftri_mask32_ptr.asFunction<_dart__kshiftri_mask32>();

  int _kshiftri_mask64(
    int arg0,
    int arg1,
  ) {
    return __kshiftri_mask64(
      arg0,
      arg1,
    );
  }

  late final __kshiftri_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__kshiftri_mask64>>('_kshiftri_mask64');
  late final _dart__kshiftri_mask64 __kshiftri_mask64 =
      __kshiftri_mask64_ptr.asFunction<_dart__kshiftri_mask64>();

  int _load_mask8(
    ffi.Pointer<ffi.Uint8> arg0,
  ) {
    return __load_mask8(
      arg0,
    );
  }

  late final __load_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__load_mask8>>('_load_mask8');
  late final _dart__load_mask8 __load_mask8 =
      __load_mask8_ptr.asFunction<_dart__load_mask8>();

  int _load_mask16(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return __load_mask16(
      arg0,
    );
  }

  late final __load_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__load_mask16>>('_load_mask16');
  late final _dart__load_mask16 __load_mask16 =
      __load_mask16_ptr.asFunction<_dart__load_mask16>();

  int _load_mask32(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    return __load_mask32(
      arg0,
    );
  }

  late final __load_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__load_mask32>>('_load_mask32');
  late final _dart__load_mask32 __load_mask32 =
      __load_mask32_ptr.asFunction<_dart__load_mask32>();

  int _load_mask64(
    ffi.Pointer<ffi.Uint64> arg0,
  ) {
    return __load_mask64(
      arg0,
    );
  }

  late final __load_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__load_mask64>>('_load_mask64');
  late final _dart__load_mask64 __load_mask64 =
      __load_mask64_ptr.asFunction<_dart__load_mask64>();

  void _store_mask8(
    ffi.Pointer<ffi.Uint8> arg0,
    int arg1,
  ) {
    return __store_mask8(
      arg0,
      arg1,
    );
  }

  late final __store_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__store_mask8>>('_store_mask8');
  late final _dart__store_mask8 __store_mask8 =
      __store_mask8_ptr.asFunction<_dart__store_mask8>();

  void _store_mask16(
    ffi.Pointer<ffi.Uint16> arg0,
    int arg1,
  ) {
    return __store_mask16(
      arg0,
      arg1,
    );
  }

  late final __store_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__store_mask16>>('_store_mask16');
  late final _dart__store_mask16 __store_mask16 =
      __store_mask16_ptr.asFunction<_dart__store_mask16>();

  void _store_mask32(
    ffi.Pointer<ffi.Uint32> arg0,
    int arg1,
  ) {
    return __store_mask32(
      arg0,
      arg1,
    );
  }

  late final __store_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__store_mask32>>('_store_mask32');
  late final _dart__store_mask32 __store_mask32 =
      __store_mask32_ptr.asFunction<_dart__store_mask32>();

  void _store_mask64(
    ffi.Pointer<ffi.Uint64> arg0,
    int arg1,
  ) {
    return __store_mask64(
      arg0,
      arg1,
    );
  }

  late final __store_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__store_mask64>>('_store_mask64');
  late final _dart__store_mask64 __store_mask64 =
      __store_mask64_ptr.asFunction<_dart__store_mask64>();

  int _cvtmask8_u32(
    int arg0,
  ) {
    return __cvtmask8_u32(
      arg0,
    );
  }

  late final __cvtmask8_u32_ptr =
      _lookup<ffi.NativeFunction<Native__cvtmask8_u32>>('_cvtmask8_u32');
  late final _dart__cvtmask8_u32 __cvtmask8_u32 =
      __cvtmask8_u32_ptr.asFunction<_dart__cvtmask8_u32>();

  int _cvtmask16_u32(
    int arg0,
  ) {
    return __cvtmask16_u32(
      arg0,
    );
  }

  late final __cvtmask16_u32_ptr =
      _lookup<ffi.NativeFunction<Native__cvtmask16_u32>>('_cvtmask16_u32');
  late final _dart__cvtmask16_u32 __cvtmask16_u32 =
      __cvtmask16_u32_ptr.asFunction<_dart__cvtmask16_u32>();

  int _cvtmask32_u32(
    int arg0,
  ) {
    return __cvtmask32_u32(
      arg0,
    );
  }

  late final __cvtmask32_u32_ptr =
      _lookup<ffi.NativeFunction<Native__cvtmask32_u32>>('_cvtmask32_u32');
  late final _dart__cvtmask32_u32 __cvtmask32_u32 =
      __cvtmask32_u32_ptr.asFunction<_dart__cvtmask32_u32>();

  int _cvtmask64_u64(
    int arg0,
  ) {
    return __cvtmask64_u64(
      arg0,
    );
  }

  late final __cvtmask64_u64_ptr =
      _lookup<ffi.NativeFunction<Native__cvtmask64_u64>>('_cvtmask64_u64');
  late final _dart__cvtmask64_u64 __cvtmask64_u64 =
      __cvtmask64_u64_ptr.asFunction<_dart__cvtmask64_u64>();

  int _cvtu32_mask8(
    int arg0,
  ) {
    return __cvtu32_mask8(
      arg0,
    );
  }

  late final __cvtu32_mask8_ptr =
      _lookup<ffi.NativeFunction<Native__cvtu32_mask8>>('_cvtu32_mask8');
  late final _dart__cvtu32_mask8 __cvtu32_mask8 =
      __cvtu32_mask8_ptr.asFunction<_dart__cvtu32_mask8>();

  int _cvtu32_mask16(
    int arg0,
  ) {
    return __cvtu32_mask16(
      arg0,
    );
  }

  late final __cvtu32_mask16_ptr =
      _lookup<ffi.NativeFunction<Native__cvtu32_mask16>>('_cvtu32_mask16');
  late final _dart__cvtu32_mask16 __cvtu32_mask16 =
      __cvtu32_mask16_ptr.asFunction<_dart__cvtu32_mask16>();

  int _cvtu32_mask32(
    int arg0,
  ) {
    return __cvtu32_mask32(
      arg0,
    );
  }

  late final __cvtu32_mask32_ptr =
      _lookup<ffi.NativeFunction<Native__cvtu32_mask32>>('_cvtu32_mask32');
  late final _dart__cvtu32_mask32 __cvtu32_mask32 =
      __cvtu32_mask32_ptr.asFunction<_dart__cvtu32_mask32>();

  int _cvtu64_mask64(
    int arg0,
  ) {
    return __cvtu64_mask64(
      arg0,
    );
  }

  late final __cvtu64_mask64_ptr =
      _lookup<ffi.NativeFunction<Native__cvtu64_mask64>>('_cvtu64_mask64');
  late final _dart__cvtu64_mask64 __cvtu64_mask64 =
      __cvtu64_mask64_ptr.asFunction<_dart__cvtu64_mask64>();

  int _mm512_kmov(
    int arg0,
  ) {
    return __mm512_kmov(
      arg0,
    );
  }

  late final __mm512_kmov_ptr =
      _lookup<ffi.NativeFunction<Native__mm512_kmov>>('_mm512_kmov');
  late final _dart__mm512_kmov __mm512_kmov =
      __mm512_kmov_ptr.asFunction<_dart__mm512_kmov>();

  int _kortest_mask8_u8(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return __kortest_mask8_u8(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __kortest_mask8_u8_ptr =
      _lookup<ffi.NativeFunction<Native__kortest_mask8_u8>>(
          '_kortest_mask8_u8');
  late final _dart__kortest_mask8_u8 __kortest_mask8_u8 =
      __kortest_mask8_u8_ptr.asFunction<_dart__kortest_mask8_u8>();

  int _kortest_mask16_u8(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return __kortest_mask16_u8(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __kortest_mask16_u8_ptr =
      _lookup<ffi.NativeFunction<Native__kortest_mask16_u8>>(
          '_kortest_mask16_u8');
  late final _dart__kortest_mask16_u8 __kortest_mask16_u8 =
      __kortest_mask16_u8_ptr.asFunction<_dart__kortest_mask16_u8>();

  int _kortest_mask32_u8(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return __kortest_mask32_u8(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __kortest_mask32_u8_ptr =
      _lookup<ffi.NativeFunction<Native__kortest_mask32_u8>>(
          '_kortest_mask32_u8');
  late final _dart__kortest_mask32_u8 __kortest_mask32_u8 =
      __kortest_mask32_u8_ptr.asFunction<_dart__kortest_mask32_u8>();

  int _kortest_mask64_u8(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return __kortest_mask64_u8(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __kortest_mask64_u8_ptr =
      _lookup<ffi.NativeFunction<Native__kortest_mask64_u8>>(
          '_kortest_mask64_u8');
  late final _dart__kortest_mask64_u8 __kortest_mask64_u8 =
      __kortest_mask64_u8_ptr.asFunction<_dart__kortest_mask64_u8>();

  int _ktest_mask8_u8(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return __ktest_mask8_u8(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __ktest_mask8_u8_ptr =
      _lookup<ffi.NativeFunction<Native__ktest_mask8_u8>>('_ktest_mask8_u8');
  late final _dart__ktest_mask8_u8 __ktest_mask8_u8 =
      __ktest_mask8_u8_ptr.asFunction<_dart__ktest_mask8_u8>();

  int _ktest_mask16_u8(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return __ktest_mask16_u8(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __ktest_mask16_u8_ptr =
      _lookup<ffi.NativeFunction<Native__ktest_mask16_u8>>('_ktest_mask16_u8');
  late final _dart__ktest_mask16_u8 __ktest_mask16_u8 =
      __ktest_mask16_u8_ptr.asFunction<_dart__ktest_mask16_u8>();

  int _ktest_mask32_u8(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return __ktest_mask32_u8(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __ktest_mask32_u8_ptr =
      _lookup<ffi.NativeFunction<Native__ktest_mask32_u8>>('_ktest_mask32_u8');
  late final _dart__ktest_mask32_u8 __ktest_mask32_u8 =
      __ktest_mask32_u8_ptr.asFunction<_dart__ktest_mask32_u8>();

  int _ktest_mask64_u8(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return __ktest_mask64_u8(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __ktest_mask64_u8_ptr =
      _lookup<ffi.NativeFunction<Native__ktest_mask64_u8>>('_ktest_mask64_u8');
  late final _dart__ktest_mask64_u8 __ktest_mask64_u8 =
      __ktest_mask64_u8_ptr.asFunction<_dart__ktest_mask64_u8>();

  void _tile_loadconfig(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __tile_loadconfig(
      arg0,
    );
  }

  late final __tile_loadconfig_ptr =
      _lookup<ffi.NativeFunction<Native__tile_loadconfig>>('_tile_loadconfig');
  late final _dart__tile_loadconfig __tile_loadconfig =
      __tile_loadconfig_ptr.asFunction<_dart__tile_loadconfig>();

  void _tile_storeconfig(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __tile_storeconfig(
      arg0,
    );
  }

  late final __tile_storeconfig_ptr =
      _lookup<ffi.NativeFunction<Native__tile_storeconfig>>(
          '_tile_storeconfig');
  late final _dart__tile_storeconfig __tile_storeconfig =
      __tile_storeconfig_ptr.asFunction<_dart__tile_storeconfig>();

  void _tile_release() {
    return __tile_release();
  }

  late final __tile_release_ptr =
      _lookup<ffi.NativeFunction<Native__tile_release>>('_tile_release');
  late final _dart__tile_release __tile_release =
      __tile_release_ptr.asFunction<_dart__tile_release>();

  void _tile_loadd(
    int dst,
    ffi.Pointer<ffi.Void> base,
    int stride,
  ) {
    return __tile_loadd(
      dst,
      base,
      stride,
    );
  }

  late final __tile_loadd_ptr =
      _lookup<ffi.NativeFunction<Native__tile_loadd>>('_tile_loadd');
  late final _dart__tile_loadd __tile_loadd =
      __tile_loadd_ptr.asFunction<_dart__tile_loadd>();

  void _tile_stream_loadd(
    int dst,
    ffi.Pointer<ffi.Void> base,
    int stride,
  ) {
    return __tile_stream_loadd(
      dst,
      base,
      stride,
    );
  }

  late final __tile_stream_loadd_ptr =
      _lookup<ffi.NativeFunction<Native__tile_stream_loadd>>(
          '_tile_stream_loadd');
  late final _dart__tile_stream_loadd __tile_stream_loadd =
      __tile_stream_loadd_ptr.asFunction<_dart__tile_stream_loadd>();

  void _tile_stored(
    int src,
    ffi.Pointer<ffi.Void> base,
    int stride,
  ) {
    return __tile_stored(
      src,
      base,
      stride,
    );
  }

  late final __tile_stored_ptr =
      _lookup<ffi.NativeFunction<Native__tile_stored>>('_tile_stored');
  late final _dart__tile_stored __tile_stored =
      __tile_stored_ptr.asFunction<_dart__tile_stored>();

  void _tile_zero(
    int dst,
  ) {
    return __tile_zero(
      dst,
    );
  }

  late final __tile_zero_ptr =
      _lookup<ffi.NativeFunction<Native__tile_zero>>('_tile_zero');
  late final _dart__tile_zero __tile_zero =
      __tile_zero_ptr.asFunction<_dart__tile_zero>();

  void _tile_dpbf16ps(
    int dst,
    int src1,
    int src2,
  ) {
    return __tile_dpbf16ps(
      dst,
      src1,
      src2,
    );
  }

  late final __tile_dpbf16ps_ptr =
      _lookup<ffi.NativeFunction<Native__tile_dpbf16ps>>('_tile_dpbf16ps');
  late final _dart__tile_dpbf16ps __tile_dpbf16ps =
      __tile_dpbf16ps_ptr.asFunction<_dart__tile_dpbf16ps>();

  void _tile_dpbssd(
    int dst,
    int src1,
    int src2,
  ) {
    return __tile_dpbssd(
      dst,
      src1,
      src2,
    );
  }

  late final __tile_dpbssd_ptr =
      _lookup<ffi.NativeFunction<Native__tile_dpbssd>>('_tile_dpbssd');
  late final _dart__tile_dpbssd __tile_dpbssd =
      __tile_dpbssd_ptr.asFunction<_dart__tile_dpbssd>();

  void _tile_dpbsud(
    int dst,
    int src1,
    int src2,
  ) {
    return __tile_dpbsud(
      dst,
      src1,
      src2,
    );
  }

  late final __tile_dpbsud_ptr =
      _lookup<ffi.NativeFunction<Native__tile_dpbsud>>('_tile_dpbsud');
  late final _dart__tile_dpbsud __tile_dpbsud =
      __tile_dpbsud_ptr.asFunction<_dart__tile_dpbsud>();

  void _tile_dpbusd(
    int dst,
    int src1,
    int src2,
  ) {
    return __tile_dpbusd(
      dst,
      src1,
      src2,
    );
  }

  late final __tile_dpbusd_ptr =
      _lookup<ffi.NativeFunction<Native__tile_dpbusd>>('_tile_dpbusd');
  late final _dart__tile_dpbusd __tile_dpbusd =
      __tile_dpbusd_ptr.asFunction<_dart__tile_dpbusd>();

  void _tile_dpbuud(
    int dst,
    int src1,
    int src2,
  ) {
    return __tile_dpbuud(
      dst,
      src1,
      src2,
    );
  }

  late final __tile_dpbuud_ptr =
      _lookup<ffi.NativeFunction<Native__tile_dpbuud>>('_tile_dpbuud');
  late final _dart__tile_dpbuud __tile_dpbuud =
      __tile_dpbuud_ptr.asFunction<_dart__tile_dpbuud>();

  void __llwpcb(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return ___llwpcb(
      arg0,
    );
  }

  late final ___llwpcb_ptr =
      _lookup<ffi.NativeFunction<Native___llwpcb>>('__llwpcb');
  late final _dart___llwpcb ___llwpcb =
      ___llwpcb_ptr.asFunction<_dart___llwpcb>();

  ffi.Pointer<ffi.Void> __slwpcb() {
    return ___slwpcb();
  }

  late final ___slwpcb_ptr =
      _lookup<ffi.NativeFunction<Native___slwpcb>>('__slwpcb');
  late final _dart___slwpcb ___slwpcb =
      ___slwpcb_ptr.asFunction<_dart___slwpcb>();

  void __lwpval32(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return ___lwpval32(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___lwpval32_ptr =
      _lookup<ffi.NativeFunction<Native___lwpval32>>('__lwpval32');
  late final _dart___lwpval32 ___lwpval32 =
      ___lwpval32_ptr.asFunction<_dart___lwpval32>();

  int __lwpins32(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return ___lwpins32(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___lwpins32_ptr =
      _lookup<ffi.NativeFunction<Native___lwpins32>>('__lwpins32');
  late final _dart___lwpins32 ___lwpins32 =
      ___lwpins32_ptr.asFunction<_dart___lwpins32>();

  void __lwpval64(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return ___lwpval64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___lwpval64_ptr =
      _lookup<ffi.NativeFunction<Native___lwpval64>>('__lwpval64');
  late final _dart___lwpval64 ___lwpval64 =
      ___lwpval64_ptr.asFunction<_dart___lwpval64>();

  int __lwpins64(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return ___lwpins64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___lwpins64_ptr =
      _lookup<ffi.NativeFunction<Native___lwpins64>>('__lwpins64');
  late final _dart___lwpins64 ___lwpins64 =
      ___lwpins64_ptr.asFunction<_dart___lwpins64>();

  int _andn_u32(
    int arg0,
    int arg1,
  ) {
    return __andn_u32(
      arg0,
      arg1,
    );
  }

  late final __andn_u32_ptr =
      _lookup<ffi.NativeFunction<Native__andn_u32>>('_andn_u32');
  late final _dart__andn_u32 __andn_u32 =
      __andn_u32_ptr.asFunction<_dart__andn_u32>();

  int _andn_u64(
    int arg0,
    int arg1,
  ) {
    return __andn_u64(
      arg0,
      arg1,
    );
  }

  late final __andn_u64_ptr =
      _lookup<ffi.NativeFunction<Native__andn_u64>>('_andn_u64');
  late final _dart__andn_u64 __andn_u64 =
      __andn_u64_ptr.asFunction<_dart__andn_u64>();

  int _bextri_u32(
    int arg0,
    int arg1,
  ) {
    return __bextri_u32(
      arg0,
      arg1,
    );
  }

  late final __bextri_u32_ptr =
      _lookup<ffi.NativeFunction<Native__bextri_u32>>('_bextri_u32');
  late final _dart__bextri_u32 __bextri_u32 =
      __bextri_u32_ptr.asFunction<_dart__bextri_u32>();

  int _blcfill_u32(
    int arg0,
  ) {
    return __blcfill_u32(
      arg0,
    );
  }

  late final __blcfill_u32_ptr =
      _lookup<ffi.NativeFunction<Native__blcfill_u32>>('_blcfill_u32');
  late final _dart__blcfill_u32 __blcfill_u32 =
      __blcfill_u32_ptr.asFunction<_dart__blcfill_u32>();

  int _blsfill_u32(
    int arg0,
  ) {
    return __blsfill_u32(
      arg0,
    );
  }

  late final __blsfill_u32_ptr =
      _lookup<ffi.NativeFunction<Native__blsfill_u32>>('_blsfill_u32');
  late final _dart__blsfill_u32 __blsfill_u32 =
      __blsfill_u32_ptr.asFunction<_dart__blsfill_u32>();

  int _blcs_u32(
    int arg0,
  ) {
    return __blcs_u32(
      arg0,
    );
  }

  late final __blcs_u32_ptr =
      _lookup<ffi.NativeFunction<Native__blcs_u32>>('_blcs_u32');
  late final _dart__blcs_u32 __blcs_u32 =
      __blcs_u32_ptr.asFunction<_dart__blcs_u32>();

  int _tzmsk_u32(
    int arg0,
  ) {
    return __tzmsk_u32(
      arg0,
    );
  }

  late final __tzmsk_u32_ptr =
      _lookup<ffi.NativeFunction<Native__tzmsk_u32>>('_tzmsk_u32');
  late final _dart__tzmsk_u32 __tzmsk_u32 =
      __tzmsk_u32_ptr.asFunction<_dart__tzmsk_u32>();

  int _blcic_u32(
    int arg0,
  ) {
    return __blcic_u32(
      arg0,
    );
  }

  late final __blcic_u32_ptr =
      _lookup<ffi.NativeFunction<Native__blcic_u32>>('_blcic_u32');
  late final _dart__blcic_u32 __blcic_u32 =
      __blcic_u32_ptr.asFunction<_dart__blcic_u32>();

  int _blsic_u32(
    int arg0,
  ) {
    return __blsic_u32(
      arg0,
    );
  }

  late final __blsic_u32_ptr =
      _lookup<ffi.NativeFunction<Native__blsic_u32>>('_blsic_u32');
  late final _dart__blsic_u32 __blsic_u32 =
      __blsic_u32_ptr.asFunction<_dart__blsic_u32>();

  int _t1mskc_u32(
    int arg0,
  ) {
    return __t1mskc_u32(
      arg0,
    );
  }

  late final __t1mskc_u32_ptr =
      _lookup<ffi.NativeFunction<Native__t1mskc_u32>>('_t1mskc_u32');
  late final _dart__t1mskc_u32 __t1mskc_u32 =
      __t1mskc_u32_ptr.asFunction<_dart__t1mskc_u32>();

  int _blcmsk_u32(
    int arg0,
  ) {
    return __blcmsk_u32(
      arg0,
    );
  }

  late final __blcmsk_u32_ptr =
      _lookup<ffi.NativeFunction<Native__blcmsk_u32>>('_blcmsk_u32');
  late final _dart__blcmsk_u32 __blcmsk_u32 =
      __blcmsk_u32_ptr.asFunction<_dart__blcmsk_u32>();

  int _blci_u32(
    int arg0,
  ) {
    return __blci_u32(
      arg0,
    );
  }

  late final __blci_u32_ptr =
      _lookup<ffi.NativeFunction<Native__blci_u32>>('_blci_u32');
  late final _dart__blci_u32 __blci_u32 =
      __blci_u32_ptr.asFunction<_dart__blci_u32>();

  int _bextri_u64(
    int arg0,
    int arg1,
  ) {
    return __bextri_u64(
      arg0,
      arg1,
    );
  }

  late final __bextri_u64_ptr =
      _lookup<ffi.NativeFunction<Native__bextri_u64>>('_bextri_u64');
  late final _dart__bextri_u64 __bextri_u64 =
      __bextri_u64_ptr.asFunction<_dart__bextri_u64>();

  int _blcfill_u64(
    int arg0,
  ) {
    return __blcfill_u64(
      arg0,
    );
  }

  late final __blcfill_u64_ptr =
      _lookup<ffi.NativeFunction<Native__blcfill_u64>>('_blcfill_u64');
  late final _dart__blcfill_u64 __blcfill_u64 =
      __blcfill_u64_ptr.asFunction<_dart__blcfill_u64>();

  int _blsfill_u64(
    int arg0,
  ) {
    return __blsfill_u64(
      arg0,
    );
  }

  late final __blsfill_u64_ptr =
      _lookup<ffi.NativeFunction<Native__blsfill_u64>>('_blsfill_u64');
  late final _dart__blsfill_u64 __blsfill_u64 =
      __blsfill_u64_ptr.asFunction<_dart__blsfill_u64>();

  int _blcs_u64(
    int arg0,
  ) {
    return __blcs_u64(
      arg0,
    );
  }

  late final __blcs_u64_ptr =
      _lookup<ffi.NativeFunction<Native__blcs_u64>>('_blcs_u64');
  late final _dart__blcs_u64 __blcs_u64 =
      __blcs_u64_ptr.asFunction<_dart__blcs_u64>();

  int _tzmsk_u64(
    int arg0,
  ) {
    return __tzmsk_u64(
      arg0,
    );
  }

  late final __tzmsk_u64_ptr =
      _lookup<ffi.NativeFunction<Native__tzmsk_u64>>('_tzmsk_u64');
  late final _dart__tzmsk_u64 __tzmsk_u64 =
      __tzmsk_u64_ptr.asFunction<_dart__tzmsk_u64>();

  int _blcic_u64(
    int arg0,
  ) {
    return __blcic_u64(
      arg0,
    );
  }

  late final __blcic_u64_ptr =
      _lookup<ffi.NativeFunction<Native__blcic_u64>>('_blcic_u64');
  late final _dart__blcic_u64 __blcic_u64 =
      __blcic_u64_ptr.asFunction<_dart__blcic_u64>();

  int _blsic_u64(
    int arg0,
  ) {
    return __blsic_u64(
      arg0,
    );
  }

  late final __blsic_u64_ptr =
      _lookup<ffi.NativeFunction<Native__blsic_u64>>('_blsic_u64');
  late final _dart__blsic_u64 __blsic_u64 =
      __blsic_u64_ptr.asFunction<_dart__blsic_u64>();

  int _t1mskc_u64(
    int arg0,
  ) {
    return __t1mskc_u64(
      arg0,
    );
  }

  late final __t1mskc_u64_ptr =
      _lookup<ffi.NativeFunction<Native__t1mskc_u64>>('_t1mskc_u64');
  late final _dart__t1mskc_u64 __t1mskc_u64 =
      __t1mskc_u64_ptr.asFunction<_dart__t1mskc_u64>();

  int _blcmsk_u64(
    int arg0,
  ) {
    return __blcmsk_u64(
      arg0,
    );
  }

  late final __blcmsk_u64_ptr =
      _lookup<ffi.NativeFunction<Native__blcmsk_u64>>('_blcmsk_u64');
  late final _dart__blcmsk_u64 __blcmsk_u64 =
      __blcmsk_u64_ptr.asFunction<_dart__blcmsk_u64>();

  int _blci_u64(
    int arg0,
  ) {
    return __blci_u64(
      arg0,
    );
  }

  late final __blci_u64_ptr =
      _lookup<ffi.NativeFunction<Native__blci_u64>>('_blci_u64');
  late final _dart__blci_u64 __blci_u64 =
      __blci_u64_ptr.asFunction<_dart__blci_u64>();

  void _mm_monitorx(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
  ) {
    return __mm_monitorx(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __mm_monitorx_ptr =
      _lookup<ffi.NativeFunction<Native__mm_monitorx>>('_mm_monitorx');
  late final _dart__mm_monitorx __mm_monitorx =
      __mm_monitorx_ptr.asFunction<_dart__mm_monitorx>();

  void _mm_mwaitx(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return __mm_mwaitx(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __mm_mwaitx_ptr =
      _lookup<ffi.NativeFunction<Native__mm_mwaitx>>('_mm_mwaitx');
  late final _dart__mm_mwaitx __mm_mwaitx =
      __mm_mwaitx_ptr.asFunction<_dart__mm_mwaitx>();

  void _mm_clzero(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __mm_clzero(
      arg0,
    );
  }

  late final __mm_clzero_ptr =
      _lookup<ffi.NativeFunction<Native__mm_clzero>>('_mm_clzero');
  late final _dart__mm_clzero __mm_clzero =
      __mm_clzero_ptr.asFunction<_dart__mm_clzero>();

  int __rmpupdate(
    int arg0,
    ffi.Pointer<rmp_seg> arg1,
    int arg2,
  ) {
    return ___rmpupdate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___rmpupdate_ptr =
      _lookup<ffi.NativeFunction<Native___rmpupdate>>('__rmpupdate');
  late final _dart___rmpupdate ___rmpupdate =
      ___rmpupdate_ptr.asFunction<_dart___rmpupdate>();

  int __pvalidate(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return ___pvalidate(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___pvalidate_ptr =
      _lookup<ffi.NativeFunction<Native___pvalidate>>('__pvalidate');
  late final _dart___pvalidate ___pvalidate =
      ___pvalidate_ptr.asFunction<_dart___pvalidate>();

  int __psmash(
    int arg0,
  ) {
    return ___psmash(
      arg0,
    );
  }

  late final ___psmash_ptr =
      _lookup<ffi.NativeFunction<Native___psmash>>('__psmash');
  late final _dart___psmash ___psmash =
      ___psmash_ptr.asFunction<_dart___psmash>();

  int __rmpadjust(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return ___rmpadjust(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___rmpadjust_ptr =
      _lookup<ffi.NativeFunction<Native___rmpadjust>>('__rmpadjust');
  late final _dart___rmpadjust ___rmpadjust =
      ___rmpadjust_ptr.asFunction<_dart___rmpadjust>();

  void __svm_invlpgb(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return ___svm_invlpgb(
      arg0,
      arg1,
    );
  }

  late final ___svm_invlpgb_ptr =
      _lookup<ffi.NativeFunction<Native___svm_invlpgb>>('__svm_invlpgb');
  late final _dart___svm_invlpgb ___svm_invlpgb =
      ___svm_invlpgb_ptr.asFunction<_dart___svm_invlpgb>();

  void __svm_tlbsync() {
    return ___svm_tlbsync();
  }

  late final ___svm_tlbsync_ptr =
      _lookup<ffi.NativeFunction<Native___svm_tlbsync>>('__svm_tlbsync');
  late final _dart___svm_tlbsync ___svm_tlbsync =
      ___svm_tlbsync_ptr.asFunction<_dart___svm_tlbsync>();

  ffi.Pointer<ffi.Void> _AddressOfReturnAddress() {
    return __AddressOfReturnAddress();
  }

  late final __AddressOfReturnAddress_ptr =
      _lookup<ffi.NativeFunction<Native__AddressOfReturnAddress>>(
          '_AddressOfReturnAddress');
  late final _dart__AddressOfReturnAddress __AddressOfReturnAddress =
      __AddressOfReturnAddress_ptr.asFunction<_dart__AddressOfReturnAddress>();

  int _InterlockedAnd16_np(
    ffi.Pointer<ffi.Int16> _Value,
    int _Mask,
  ) {
    return __InterlockedAnd16_np(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedAnd16_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedAnd16_np>>(
          '_InterlockedAnd16_np');
  late final _dart__InterlockedAnd16_np __InterlockedAnd16_np =
      __InterlockedAnd16_np_ptr.asFunction<_dart__InterlockedAnd16_np>();

  int _InterlockedAnd64_np(
    ffi.Pointer<ffi.Int64> _Value,
    int _Mask,
  ) {
    return __InterlockedAnd64_np(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedAnd64_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedAnd64_np>>(
          '_InterlockedAnd64_np');
  late final _dart__InterlockedAnd64_np __InterlockedAnd64_np =
      __InterlockedAnd64_np_ptr.asFunction<_dart__InterlockedAnd64_np>();

  int _InterlockedAnd8_np(
    ffi.Pointer<ffi.Int8> _Value,
    int _Mask,
  ) {
    return __InterlockedAnd8_np(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedAnd8_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedAnd8_np>>(
          '_InterlockedAnd8_np');
  late final _dart__InterlockedAnd8_np __InterlockedAnd8_np =
      __InterlockedAnd8_np_ptr.asFunction<_dart__InterlockedAnd8_np>();

  int _InterlockedAnd_np(
    ffi.Pointer<ffi.Int64> _Value,
    int _Mask,
  ) {
    return __InterlockedAnd_np(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedAnd_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedAnd_np>>(
          '_InterlockedAnd_np');
  late final _dart__InterlockedAnd_np __InterlockedAnd_np =
      __InterlockedAnd_np_ptr.asFunction<_dart__InterlockedAnd_np>();

  int _InterlockedCompareExchange128_np(
    ffi.Pointer<ffi.Int64> _Destination,
    int _ExchangeHigh,
    int _ExchangeLow,
    ffi.Pointer<ffi.Int64> _ComparandResult,
  ) {
    return __InterlockedCompareExchange128_np(
      _Destination,
      _ExchangeHigh,
      _ExchangeLow,
      _ComparandResult,
    );
  }

  late final __InterlockedCompareExchange128_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedCompareExchange128_np>>(
          '_InterlockedCompareExchange128_np');
  late final _dart__InterlockedCompareExchange128_np
      __InterlockedCompareExchange128_np =
      __InterlockedCompareExchange128_np_ptr
          .asFunction<_dart__InterlockedCompareExchange128_np>();

  int _InterlockedCompareExchange16_np(
    ffi.Pointer<ffi.Int16> _Destination,
    int _Exchange,
    int _Comparand,
  ) {
    return __InterlockedCompareExchange16_np(
      _Destination,
      _Exchange,
      _Comparand,
    );
  }

  late final __InterlockedCompareExchange16_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedCompareExchange16_np>>(
          '_InterlockedCompareExchange16_np');
  late final _dart__InterlockedCompareExchange16_np
      __InterlockedCompareExchange16_np = __InterlockedCompareExchange16_np_ptr
          .asFunction<_dart__InterlockedCompareExchange16_np>();

  int _InterlockedCompareExchange64_np(
    ffi.Pointer<ffi.Int64> _Destination,
    int _Exchange,
    int _Comparand,
  ) {
    return __InterlockedCompareExchange64_np(
      _Destination,
      _Exchange,
      _Comparand,
    );
  }

  late final __InterlockedCompareExchange64_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedCompareExchange64_np>>(
          '_InterlockedCompareExchange64_np');
  late final _dart__InterlockedCompareExchange64_np
      __InterlockedCompareExchange64_np = __InterlockedCompareExchange64_np_ptr
          .asFunction<_dart__InterlockedCompareExchange64_np>();

  ffi.Pointer<ffi.Void> _InterlockedCompareExchangePointer(
    ffi.Pointer<ffi.Pointer<ffi.Void>> _Destination,
    ffi.Pointer<ffi.Void> _Exchange,
    ffi.Pointer<ffi.Void> _Comparand,
  ) {
    return __InterlockedCompareExchangePointer(
      _Destination,
      _Exchange,
      _Comparand,
    );
  }

  late final __InterlockedCompareExchangePointer_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedCompareExchangePointer>>(
          '_InterlockedCompareExchangePointer');
  late final _dart__InterlockedCompareExchangePointer
      __InterlockedCompareExchangePointer =
      __InterlockedCompareExchangePointer_ptr
          .asFunction<_dart__InterlockedCompareExchangePointer>();

  ffi.Pointer<ffi.Void> _InterlockedCompareExchangePointer_np(
    ffi.Pointer<ffi.Pointer<ffi.Void>> _Destination,
    ffi.Pointer<ffi.Void> _Exchange,
    ffi.Pointer<ffi.Void> _Comparand,
  ) {
    return __InterlockedCompareExchangePointer_np(
      _Destination,
      _Exchange,
      _Comparand,
    );
  }

  late final __InterlockedCompareExchangePointer_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedCompareExchangePointer_np>>(
          '_InterlockedCompareExchangePointer_np');
  late final _dart__InterlockedCompareExchangePointer_np
      __InterlockedCompareExchangePointer_np =
      __InterlockedCompareExchangePointer_np_ptr
          .asFunction<_dart__InterlockedCompareExchangePointer_np>();

  int _InterlockedCompareExchange_np(
    ffi.Pointer<ffi.Int64> _Destination,
    int _Exchange,
    int _Comparand,
  ) {
    return __InterlockedCompareExchange_np(
      _Destination,
      _Exchange,
      _Comparand,
    );
  }

  late final __InterlockedCompareExchange_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedCompareExchange_np>>(
          '_InterlockedCompareExchange_np');
  late final _dart__InterlockedCompareExchange_np
      __InterlockedCompareExchange_np = __InterlockedCompareExchange_np_ptr
          .asFunction<_dart__InterlockedCompareExchange_np>();

  ffi.Pointer<ffi.Void> _InterlockedExchangePointer(
    ffi.Pointer<ffi.Pointer<ffi.Void>> _Target,
    ffi.Pointer<ffi.Void> _Value,
  ) {
    return __InterlockedExchangePointer(
      _Target,
      _Value,
    );
  }

  late final __InterlockedExchangePointer_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedExchangePointer>>(
          '_InterlockedExchangePointer');
  late final _dart__InterlockedExchangePointer __InterlockedExchangePointer =
      __InterlockedExchangePointer_ptr
          .asFunction<_dart__InterlockedExchangePointer>();

  int _InterlockedOr16_np(
    ffi.Pointer<ffi.Int16> _Value,
    int _Mask,
  ) {
    return __InterlockedOr16_np(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedOr16_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedOr16_np>>(
          '_InterlockedOr16_np');
  late final _dart__InterlockedOr16_np __InterlockedOr16_np =
      __InterlockedOr16_np_ptr.asFunction<_dart__InterlockedOr16_np>();

  int _InterlockedOr64_np(
    ffi.Pointer<ffi.Int64> _Value,
    int _Mask,
  ) {
    return __InterlockedOr64_np(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedOr64_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedOr64_np>>(
          '_InterlockedOr64_np');
  late final _dart__InterlockedOr64_np __InterlockedOr64_np =
      __InterlockedOr64_np_ptr.asFunction<_dart__InterlockedOr64_np>();

  int _InterlockedOr8_np(
    ffi.Pointer<ffi.Int8> _Value,
    int _Mask,
  ) {
    return __InterlockedOr8_np(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedOr8_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedOr8_np>>(
          '_InterlockedOr8_np');
  late final _dart__InterlockedOr8_np __InterlockedOr8_np =
      __InterlockedOr8_np_ptr.asFunction<_dart__InterlockedOr8_np>();

  int _InterlockedOr_np(
    ffi.Pointer<ffi.Int64> _Value,
    int _Mask,
  ) {
    return __InterlockedOr_np(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedOr_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedOr_np>>(
          '_InterlockedOr_np');
  late final _dart__InterlockedOr_np __InterlockedOr_np =
      __InterlockedOr_np_ptr.asFunction<_dart__InterlockedOr_np>();

  int _InterlockedXor16_np(
    ffi.Pointer<ffi.Int16> _Value,
    int _Mask,
  ) {
    return __InterlockedXor16_np(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedXor16_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedXor16_np>>(
          '_InterlockedXor16_np');
  late final _dart__InterlockedXor16_np __InterlockedXor16_np =
      __InterlockedXor16_np_ptr.asFunction<_dart__InterlockedXor16_np>();

  int _InterlockedXor64_np(
    ffi.Pointer<ffi.Int64> _Value,
    int _Mask,
  ) {
    return __InterlockedXor64_np(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedXor64_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedXor64_np>>(
          '_InterlockedXor64_np');
  late final _dart__InterlockedXor64_np __InterlockedXor64_np =
      __InterlockedXor64_np_ptr.asFunction<_dart__InterlockedXor64_np>();

  int _InterlockedXor8_np(
    ffi.Pointer<ffi.Int8> _Value,
    int _Mask,
  ) {
    return __InterlockedXor8_np(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedXor8_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedXor8_np>>(
          '_InterlockedXor8_np');
  late final _dart__InterlockedXor8_np __InterlockedXor8_np =
      __InterlockedXor8_np_ptr.asFunction<_dart__InterlockedXor8_np>();

  int _InterlockedXor_np(
    ffi.Pointer<ffi.Int64> _Value,
    int _Mask,
  ) {
    return __InterlockedXor_np(
      _Value,
      _Mask,
    );
  }

  late final __InterlockedXor_np_ptr =
      _lookup<ffi.NativeFunction<Native__InterlockedXor_np>>(
          '_InterlockedXor_np');
  late final _dart__InterlockedXor_np __InterlockedXor_np =
      __InterlockedXor_np_ptr.asFunction<_dart__InterlockedXor_np>();

  void _ReadBarrier() {
    return __ReadBarrier();
  }

  late final __ReadBarrier_ptr =
      _lookup<ffi.NativeFunction<Native__ReadBarrier>>('_ReadBarrier');
  late final _dart__ReadBarrier __ReadBarrier =
      __ReadBarrier_ptr.asFunction<_dart__ReadBarrier>();

  ffi.Pointer<ffi.Void> _ReturnAddress() {
    return __ReturnAddress();
  }

  late final __ReturnAddress_ptr =
      _lookup<ffi.NativeFunction<Native__ReturnAddress>>('_ReturnAddress');
  late final _dart__ReturnAddress __ReturnAddress =
      __ReturnAddress_ptr.asFunction<_dart__ReturnAddress>();

  void _WriteBarrier() {
    return __WriteBarrier();
  }

  late final __WriteBarrier_ptr =
      _lookup<ffi.NativeFunction<Native__WriteBarrier>>('_WriteBarrier');
  late final _dart__WriteBarrier __WriteBarrier =
      __WriteBarrier_ptr.asFunction<_dart__WriteBarrier>();

  void __addgsbyte(
    int arg0,
    int arg1,
  ) {
    return ___addgsbyte(
      arg0,
      arg1,
    );
  }

  late final ___addgsbyte_ptr =
      _lookup<ffi.NativeFunction<Native___addgsbyte>>('__addgsbyte');
  late final _dart___addgsbyte ___addgsbyte =
      ___addgsbyte_ptr.asFunction<_dart___addgsbyte>();

  void __addgsdword(
    int arg0,
    int arg1,
  ) {
    return ___addgsdword(
      arg0,
      arg1,
    );
  }

  late final ___addgsdword_ptr =
      _lookup<ffi.NativeFunction<Native___addgsdword>>('__addgsdword');
  late final _dart___addgsdword ___addgsdword =
      ___addgsdword_ptr.asFunction<_dart___addgsdword>();

  void __addgsqword(
    int arg0,
    int arg1,
  ) {
    return ___addgsqword(
      arg0,
      arg1,
    );
  }

  late final ___addgsqword_ptr =
      _lookup<ffi.NativeFunction<Native___addgsqword>>('__addgsqword');
  late final _dart___addgsqword ___addgsqword =
      ___addgsqword_ptr.asFunction<_dart___addgsqword>();

  void __addgsword(
    int arg0,
    int arg1,
  ) {
    return ___addgsword(
      arg0,
      arg1,
    );
  }

  late final ___addgsword_ptr =
      _lookup<ffi.NativeFunction<Native___addgsword>>('__addgsword');
  late final _dart___addgsword ___addgsword =
      ___addgsword_ptr.asFunction<_dart___addgsword>();

  void __clts() {
    return ___clts();
  }

  late final ___clts_ptr = _lookup<ffi.NativeFunction<Native___clts>>('__clts');
  late final _dart___clts ___clts = ___clts_ptr.asFunction<_dart___clts>();

  void __code_seg(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return ___code_seg(
      arg0,
    );
  }

  late final ___code_seg_ptr =
      _lookup<ffi.NativeFunction<Native___code_seg>>('__code_seg');
  late final _dart___code_seg ___code_seg =
      ___code_seg_ptr.asFunction<_dart___code_seg>();

  void __cpuid(
    ffi.Pointer<ffi.Int32> arg0,
    int arg1,
  ) {
    return ___cpuid(
      arg0,
      arg1,
    );
  }

  late final ___cpuid_ptr =
      _lookup<ffi.NativeFunction<Native___cpuid>>('__cpuid');
  late final _dart___cpuid ___cpuid = ___cpuid_ptr.asFunction<_dart___cpuid>();

  void __cpuidex(
    ffi.Pointer<ffi.Int32> arg0,
    int arg1,
    int arg2,
  ) {
    return ___cpuidex(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___cpuidex_ptr =
      _lookup<ffi.NativeFunction<Native___cpuidex>>('__cpuidex');
  late final _dart___cpuidex ___cpuidex =
      ___cpuidex_ptr.asFunction<_dart___cpuidex>();

  void __debugbreak() {
    return ___debugbreak();
  }

  late final ___debugbreak_ptr =
      _lookup<ffi.NativeFunction<Native___debugbreak>>('__debugbreak');
  late final _dart___debugbreak ___debugbreak =
      ___debugbreak_ptr.asFunction<_dart___debugbreak>();

  int __emul(
    int arg0,
    int arg1,
  ) {
    return ___emul(
      arg0,
      arg1,
    );
  }

  late final ___emul_ptr = _lookup<ffi.NativeFunction<Native___emul>>('__emul');
  late final _dart___emul ___emul = ___emul_ptr.asFunction<_dart___emul>();

  int __emulu(
    int arg0,
    int arg1,
  ) {
    return ___emulu(
      arg0,
      arg1,
    );
  }

  late final ___emulu_ptr =
      _lookup<ffi.NativeFunction<Native___emulu>>('__emulu');
  late final _dart___emulu ___emulu = ___emulu_ptr.asFunction<_dart___emulu>();

  void __fastfail(
    int arg0,
  ) {
    return ___fastfail(
      arg0,
    );
  }

  late final ___fastfail_ptr =
      _lookup<ffi.NativeFunction<Native___fastfail>>('__fastfail');
  late final _dart___fastfail ___fastfail =
      ___fastfail_ptr.asFunction<_dart___fastfail>();

  void __faststorefence() {
    return ___faststorefence();
  }

  late final ___faststorefence_ptr =
      _lookup<ffi.NativeFunction<Native___faststorefence>>('__faststorefence');
  late final _dart___faststorefence ___faststorefence =
      ___faststorefence_ptr.asFunction<_dart___faststorefence>();

  int __getcallerseflags() {
    return ___getcallerseflags();
  }

  late final ___getcallerseflags_ptr =
      _lookup<ffi.NativeFunction<Native___getcallerseflags>>(
          '__getcallerseflags');
  late final _dart___getcallerseflags ___getcallerseflags =
      ___getcallerseflags_ptr.asFunction<_dart___getcallerseflags>();

  void __halt() {
    return ___halt();
  }

  late final ___halt_ptr = _lookup<ffi.NativeFunction<Native___halt>>('__halt');
  late final _dart___halt ___halt = ___halt_ptr.asFunction<_dart___halt>();

  int __inbyte(
    int arg0,
  ) {
    return ___inbyte(
      arg0,
    );
  }

  late final ___inbyte_ptr =
      _lookup<ffi.NativeFunction<Native___inbyte>>('__inbyte');
  late final _dart___inbyte ___inbyte =
      ___inbyte_ptr.asFunction<_dart___inbyte>();

  void __inbytestring(
    int arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int arg2,
  ) {
    return ___inbytestring(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___inbytestring_ptr =
      _lookup<ffi.NativeFunction<Native___inbytestring>>('__inbytestring');
  late final _dart___inbytestring ___inbytestring =
      ___inbytestring_ptr.asFunction<_dart___inbytestring>();

  void __incgsbyte(
    int arg0,
  ) {
    return ___incgsbyte(
      arg0,
    );
  }

  late final ___incgsbyte_ptr =
      _lookup<ffi.NativeFunction<Native___incgsbyte>>('__incgsbyte');
  late final _dart___incgsbyte ___incgsbyte =
      ___incgsbyte_ptr.asFunction<_dart___incgsbyte>();

  void __incgsdword(
    int arg0,
  ) {
    return ___incgsdword(
      arg0,
    );
  }

  late final ___incgsdword_ptr =
      _lookup<ffi.NativeFunction<Native___incgsdword>>('__incgsdword');
  late final _dart___incgsdword ___incgsdword =
      ___incgsdword_ptr.asFunction<_dart___incgsdword>();

  void __incgsqword(
    int arg0,
  ) {
    return ___incgsqword(
      arg0,
    );
  }

  late final ___incgsqword_ptr =
      _lookup<ffi.NativeFunction<Native___incgsqword>>('__incgsqword');
  late final _dart___incgsqword ___incgsqword =
      ___incgsqword_ptr.asFunction<_dart___incgsqword>();

  void __incgsword(
    int arg0,
  ) {
    return ___incgsword(
      arg0,
    );
  }

  late final ___incgsword_ptr =
      _lookup<ffi.NativeFunction<Native___incgsword>>('__incgsword');
  late final _dart___incgsword ___incgsword =
      ___incgsword_ptr.asFunction<_dart___incgsword>();

  int __indword(
    int arg0,
  ) {
    return ___indword(
      arg0,
    );
  }

  late final ___indword_ptr =
      _lookup<ffi.NativeFunction<Native___indword>>('__indword');
  late final _dart___indword ___indword =
      ___indword_ptr.asFunction<_dart___indword>();

  void __indwordstring(
    int arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    int arg2,
  ) {
    return ___indwordstring(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___indwordstring_ptr =
      _lookup<ffi.NativeFunction<Native___indwordstring>>('__indwordstring');
  late final _dart___indwordstring ___indwordstring =
      ___indwordstring_ptr.asFunction<_dart___indwordstring>();

  void __int2c() {
    return ___int2c();
  }

  late final ___int2c_ptr =
      _lookup<ffi.NativeFunction<Native___int2c>>('__int2c');
  late final _dart___int2c ___int2c = ___int2c_ptr.asFunction<_dart___int2c>();

  void __invlpg(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return ___invlpg(
      arg0,
    );
  }

  late final ___invlpg_ptr =
      _lookup<ffi.NativeFunction<Native___invlpg>>('__invlpg');
  late final _dart___invlpg ___invlpg =
      ___invlpg_ptr.asFunction<_dart___invlpg>();

  int __inword(
    int arg0,
  ) {
    return ___inword(
      arg0,
    );
  }

  late final ___inword_ptr =
      _lookup<ffi.NativeFunction<Native___inword>>('__inword');
  late final _dart___inword ___inword =
      ___inword_ptr.asFunction<_dart___inword>();

  void __inwordstring(
    int arg0,
    ffi.Pointer<ffi.Uint16> arg1,
    int arg2,
  ) {
    return ___inwordstring(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___inwordstring_ptr =
      _lookup<ffi.NativeFunction<Native___inwordstring>>('__inwordstring');
  late final _dart___inwordstring ___inwordstring =
      ___inwordstring_ptr.asFunction<_dart___inwordstring>();

  void __lidt(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return ___lidt(
      arg0,
    );
  }

  late final ___lidt_ptr = _lookup<ffi.NativeFunction<Native___lidt>>('__lidt');
  late final _dart___lidt ___lidt = ___lidt_ptr.asFunction<_dart___lidt>();

  int __ll_lshift(
    int arg0,
    int arg1,
  ) {
    return ___ll_lshift(
      arg0,
      arg1,
    );
  }

  late final ___ll_lshift_ptr =
      _lookup<ffi.NativeFunction<Native___ll_lshift>>('__ll_lshift');
  late final _dart___ll_lshift ___ll_lshift =
      ___ll_lshift_ptr.asFunction<_dart___ll_lshift>();

  int __ll_rshift(
    int arg0,
    int arg1,
  ) {
    return ___ll_rshift(
      arg0,
      arg1,
    );
  }

  late final ___ll_rshift_ptr =
      _lookup<ffi.NativeFunction<Native___ll_rshift>>('__ll_rshift');
  late final _dart___ll_rshift ___ll_rshift =
      ___ll_rshift_ptr.asFunction<_dart___ll_rshift>();

  void __movsb(
    ffi.Pointer<ffi.Uint8> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int arg2,
  ) {
    return ___movsb(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___movsb_ptr =
      _lookup<ffi.NativeFunction<Native___movsb>>('__movsb');
  late final _dart___movsb ___movsb = ___movsb_ptr.asFunction<_dart___movsb>();

  void __movsd(
    ffi.Pointer<ffi.Uint64> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    int arg2,
  ) {
    return ___movsd(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___movsd_ptr =
      _lookup<ffi.NativeFunction<Native___movsd>>('__movsd');
  late final _dart___movsd ___movsd = ___movsd_ptr.asFunction<_dart___movsd>();

  void __movsq(
    ffi.Pointer<ffi.Uint64> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    int arg2,
  ) {
    return ___movsq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___movsq_ptr =
      _lookup<ffi.NativeFunction<Native___movsq>>('__movsq');
  late final _dart___movsq ___movsq = ___movsq_ptr.asFunction<_dart___movsq>();

  void __movsw(
    ffi.Pointer<ffi.Uint16> arg0,
    ffi.Pointer<ffi.Uint16> arg1,
    int arg2,
  ) {
    return ___movsw(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___movsw_ptr =
      _lookup<ffi.NativeFunction<Native___movsw>>('__movsw');
  late final _dart___movsw ___movsw = ___movsw_ptr.asFunction<_dart___movsw>();

  int __mulh(
    int arg0,
    int arg1,
  ) {
    return ___mulh(
      arg0,
      arg1,
    );
  }

  late final ___mulh_ptr = _lookup<ffi.NativeFunction<Native___mulh>>('__mulh');
  late final _dart___mulh ___mulh = ___mulh_ptr.asFunction<_dart___mulh>();

  void __nop() {
    return ___nop();
  }

  late final ___nop_ptr = _lookup<ffi.NativeFunction<Native___nop>>('__nop');
  late final _dart___nop ___nop = ___nop_ptr.asFunction<_dart___nop>();

  void __nvreg_restore_fence() {
    return ___nvreg_restore_fence();
  }

  late final ___nvreg_restore_fence_ptr =
      _lookup<ffi.NativeFunction<Native___nvreg_restore_fence>>(
          '__nvreg_restore_fence');
  late final _dart___nvreg_restore_fence ___nvreg_restore_fence =
      ___nvreg_restore_fence_ptr.asFunction<_dart___nvreg_restore_fence>();

  void __nvreg_save_fence() {
    return ___nvreg_save_fence();
  }

  late final ___nvreg_save_fence_ptr =
      _lookup<ffi.NativeFunction<Native___nvreg_save_fence>>(
          '__nvreg_save_fence');
  late final _dart___nvreg_save_fence ___nvreg_save_fence =
      ___nvreg_save_fence_ptr.asFunction<_dart___nvreg_save_fence>();

  void __outbyte(
    int arg0,
    int arg1,
  ) {
    return ___outbyte(
      arg0,
      arg1,
    );
  }

  late final ___outbyte_ptr =
      _lookup<ffi.NativeFunction<Native___outbyte>>('__outbyte');
  late final _dart___outbyte ___outbyte =
      ___outbyte_ptr.asFunction<_dart___outbyte>();

  void __outbytestring(
    int arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int arg2,
  ) {
    return ___outbytestring(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___outbytestring_ptr =
      _lookup<ffi.NativeFunction<Native___outbytestring>>('__outbytestring');
  late final _dart___outbytestring ___outbytestring =
      ___outbytestring_ptr.asFunction<_dart___outbytestring>();

  void __outdword(
    int arg0,
    int arg1,
  ) {
    return ___outdword(
      arg0,
      arg1,
    );
  }

  late final ___outdword_ptr =
      _lookup<ffi.NativeFunction<Native___outdword>>('__outdword');
  late final _dart___outdword ___outdword =
      ___outdword_ptr.asFunction<_dart___outdword>();

  void __outdwordstring(
    int arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    int arg2,
  ) {
    return ___outdwordstring(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___outdwordstring_ptr =
      _lookup<ffi.NativeFunction<Native___outdwordstring>>('__outdwordstring');
  late final _dart___outdwordstring ___outdwordstring =
      ___outdwordstring_ptr.asFunction<_dart___outdwordstring>();

  void __outword(
    int arg0,
    int arg1,
  ) {
    return ___outword(
      arg0,
      arg1,
    );
  }

  late final ___outword_ptr =
      _lookup<ffi.NativeFunction<Native___outword>>('__outword');
  late final _dart___outword ___outword =
      ___outword_ptr.asFunction<_dart___outword>();

  void __outwordstring(
    int arg0,
    ffi.Pointer<ffi.Uint16> arg1,
    int arg2,
  ) {
    return ___outwordstring(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___outwordstring_ptr =
      _lookup<ffi.NativeFunction<Native___outwordstring>>('__outwordstring');
  late final _dart___outwordstring ___outwordstring =
      ___outwordstring_ptr.asFunction<_dart___outwordstring>();

  int __rdtsc() {
    return ___rdtsc();
  }

  late final ___rdtsc_ptr =
      _lookup<ffi.NativeFunction<Native___rdtsc>>('__rdtsc');
  late final _dart___rdtsc ___rdtsc = ___rdtsc_ptr.asFunction<_dart___rdtsc>();

  int __rdtscp(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    return ___rdtscp(
      arg0,
    );
  }

  late final ___rdtscp_ptr =
      _lookup<ffi.NativeFunction<Native___rdtscp>>('__rdtscp');
  late final _dart___rdtscp ___rdtscp =
      ___rdtscp_ptr.asFunction<_dart___rdtscp>();

  int __readcr0() {
    return ___readcr0();
  }

  late final ___readcr0_ptr =
      _lookup<ffi.NativeFunction<Native___readcr0>>('__readcr0');
  late final _dart___readcr0 ___readcr0 =
      ___readcr0_ptr.asFunction<_dart___readcr0>();

  int __readcr2() {
    return ___readcr2();
  }

  late final ___readcr2_ptr =
      _lookup<ffi.NativeFunction<Native___readcr2>>('__readcr2');
  late final _dart___readcr2 ___readcr2 =
      ___readcr2_ptr.asFunction<_dart___readcr2>();

  int __readcr3() {
    return ___readcr3();
  }

  late final ___readcr3_ptr =
      _lookup<ffi.NativeFunction<Native___readcr3>>('__readcr3');
  late final _dart___readcr3 ___readcr3 =
      ___readcr3_ptr.asFunction<_dart___readcr3>();

  int __readcr4() {
    return ___readcr4();
  }

  late final ___readcr4_ptr =
      _lookup<ffi.NativeFunction<Native___readcr4>>('__readcr4');
  late final _dart___readcr4 ___readcr4 =
      ___readcr4_ptr.asFunction<_dart___readcr4>();

  int __readcr8() {
    return ___readcr8();
  }

  late final ___readcr8_ptr =
      _lookup<ffi.NativeFunction<Native___readcr8>>('__readcr8');
  late final _dart___readcr8 ___readcr8 =
      ___readcr8_ptr.asFunction<_dart___readcr8>();

  int __readdr(
    int arg0,
  ) {
    return ___readdr(
      arg0,
    );
  }

  late final ___readdr_ptr =
      _lookup<ffi.NativeFunction<Native___readdr>>('__readdr');
  late final _dart___readdr ___readdr =
      ___readdr_ptr.asFunction<_dart___readdr>();

  int __readeflags() {
    return ___readeflags();
  }

  late final ___readeflags_ptr =
      _lookup<ffi.NativeFunction<Native___readeflags>>('__readeflags');
  late final _dart___readeflags ___readeflags =
      ___readeflags_ptr.asFunction<_dart___readeflags>();

  int __readgsbyte(
    int arg0,
  ) {
    return ___readgsbyte(
      arg0,
    );
  }

  late final ___readgsbyte_ptr =
      _lookup<ffi.NativeFunction<Native___readgsbyte>>('__readgsbyte');
  late final _dart___readgsbyte ___readgsbyte =
      ___readgsbyte_ptr.asFunction<_dart___readgsbyte>();

  int __readgsdword(
    int arg0,
  ) {
    return ___readgsdword(
      arg0,
    );
  }

  late final ___readgsdword_ptr =
      _lookup<ffi.NativeFunction<Native___readgsdword>>('__readgsdword');
  late final _dart___readgsdword ___readgsdword =
      ___readgsdword_ptr.asFunction<_dart___readgsdword>();

  int __readgsqword(
    int arg0,
  ) {
    return ___readgsqword(
      arg0,
    );
  }

  late final ___readgsqword_ptr =
      _lookup<ffi.NativeFunction<Native___readgsqword>>('__readgsqword');
  late final _dart___readgsqword ___readgsqword =
      ___readgsqword_ptr.asFunction<_dart___readgsqword>();

  int __readgsword(
    int arg0,
  ) {
    return ___readgsword(
      arg0,
    );
  }

  late final ___readgsword_ptr =
      _lookup<ffi.NativeFunction<Native___readgsword>>('__readgsword');
  late final _dart___readgsword ___readgsword =
      ___readgsword_ptr.asFunction<_dart___readgsword>();

  int __readmsr(
    int arg0,
  ) {
    return ___readmsr(
      arg0,
    );
  }

  late final ___readmsr_ptr =
      _lookup<ffi.NativeFunction<Native___readmsr>>('__readmsr');
  late final _dart___readmsr ___readmsr =
      ___readmsr_ptr.asFunction<_dart___readmsr>();

  int __readpmc(
    int arg0,
  ) {
    return ___readpmc(
      arg0,
    );
  }

  late final ___readpmc_ptr =
      _lookup<ffi.NativeFunction<Native___readpmc>>('__readpmc');
  late final _dart___readpmc ___readpmc =
      ___readpmc_ptr.asFunction<_dart___readpmc>();

  int __segmentlimit(
    int arg0,
  ) {
    return ___segmentlimit(
      arg0,
    );
  }

  late final ___segmentlimit_ptr =
      _lookup<ffi.NativeFunction<Native___segmentlimit>>('__segmentlimit');
  late final _dart___segmentlimit ___segmentlimit =
      ___segmentlimit_ptr.asFunction<_dart___segmentlimit>();

  int __shiftleft128(
    int _LowPart,
    int _HighPart,
    int _Shift,
  ) {
    return ___shiftleft128(
      _LowPart,
      _HighPart,
      _Shift,
    );
  }

  late final ___shiftleft128_ptr =
      _lookup<ffi.NativeFunction<Native___shiftleft128>>('__shiftleft128');
  late final _dart___shiftleft128 ___shiftleft128 =
      ___shiftleft128_ptr.asFunction<_dart___shiftleft128>();

  void __sidt(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return ___sidt(
      arg0,
    );
  }

  late final ___sidt_ptr = _lookup<ffi.NativeFunction<Native___sidt>>('__sidt');
  late final _dart___sidt ___sidt = ___sidt_ptr.asFunction<_dart___sidt>();

  void __stosb(
    ffi.Pointer<ffi.Uint8> arg0,
    int arg1,
    int arg2,
  ) {
    return ___stosb(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___stosb_ptr =
      _lookup<ffi.NativeFunction<Native___stosb>>('__stosb');
  late final _dart___stosb ___stosb = ___stosb_ptr.asFunction<_dart___stosb>();

  void __stosd(
    ffi.Pointer<ffi.Uint64> arg0,
    int arg1,
    int arg2,
  ) {
    return ___stosd(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___stosd_ptr =
      _lookup<ffi.NativeFunction<Native___stosd>>('__stosd');
  late final _dart___stosd ___stosd = ___stosd_ptr.asFunction<_dart___stosd>();

  void __stosq(
    ffi.Pointer<ffi.Uint64> arg0,
    int arg1,
    int arg2,
  ) {
    return ___stosq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___stosq_ptr =
      _lookup<ffi.NativeFunction<Native___stosq>>('__stosq');
  late final _dart___stosq ___stosq = ___stosq_ptr.asFunction<_dart___stosq>();

  void __stosw(
    ffi.Pointer<ffi.Uint16> arg0,
    int arg1,
    int arg2,
  ) {
    return ___stosw(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___stosw_ptr =
      _lookup<ffi.NativeFunction<Native___stosw>>('__stosw');
  late final _dart___stosw ___stosw = ___stosw_ptr.asFunction<_dart___stosw>();

  void __svm_clgi() {
    return ___svm_clgi();
  }

  late final ___svm_clgi_ptr =
      _lookup<ffi.NativeFunction<Native___svm_clgi>>('__svm_clgi');
  late final _dart___svm_clgi ___svm_clgi =
      ___svm_clgi_ptr.asFunction<_dart___svm_clgi>();

  void __svm_invlpga(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return ___svm_invlpga(
      arg0,
      arg1,
    );
  }

  late final ___svm_invlpga_ptr =
      _lookup<ffi.NativeFunction<Native___svm_invlpga>>('__svm_invlpga');
  late final _dart___svm_invlpga ___svm_invlpga =
      ___svm_invlpga_ptr.asFunction<_dart___svm_invlpga>();

  void __svm_skinit(
    int arg0,
  ) {
    return ___svm_skinit(
      arg0,
    );
  }

  late final ___svm_skinit_ptr =
      _lookup<ffi.NativeFunction<Native___svm_skinit>>('__svm_skinit');
  late final _dart___svm_skinit ___svm_skinit =
      ___svm_skinit_ptr.asFunction<_dart___svm_skinit>();

  void __svm_stgi() {
    return ___svm_stgi();
  }

  late final ___svm_stgi_ptr =
      _lookup<ffi.NativeFunction<Native___svm_stgi>>('__svm_stgi');
  late final _dart___svm_stgi ___svm_stgi =
      ___svm_stgi_ptr.asFunction<_dart___svm_stgi>();

  void __svm_vmload(
    int arg0,
  ) {
    return ___svm_vmload(
      arg0,
    );
  }

  late final ___svm_vmload_ptr =
      _lookup<ffi.NativeFunction<Native___svm_vmload>>('__svm_vmload');
  late final _dart___svm_vmload ___svm_vmload =
      ___svm_vmload_ptr.asFunction<_dart___svm_vmload>();

  void __svm_vmrun(
    int arg0,
  ) {
    return ___svm_vmrun(
      arg0,
    );
  }

  late final ___svm_vmrun_ptr =
      _lookup<ffi.NativeFunction<Native___svm_vmrun>>('__svm_vmrun');
  late final _dart___svm_vmrun ___svm_vmrun =
      ___svm_vmrun_ptr.asFunction<_dart___svm_vmrun>();

  void __svm_vmsave(
    int arg0,
  ) {
    return ___svm_vmsave(
      arg0,
    );
  }

  late final ___svm_vmsave_ptr =
      _lookup<ffi.NativeFunction<Native___svm_vmsave>>('__svm_vmsave');
  late final _dart___svm_vmsave ___svm_vmsave =
      ___svm_vmsave_ptr.asFunction<_dart___svm_vmsave>();

  void __ud2() {
    return ___ud2();
  }

  late final ___ud2_ptr = _lookup<ffi.NativeFunction<Native___ud2>>('__ud2');
  late final _dart___ud2 ___ud2 = ___ud2_ptr.asFunction<_dart___ud2>();

  int __ull_rshift(
    int arg0,
    int arg1,
  ) {
    return ___ull_rshift(
      arg0,
      arg1,
    );
  }

  late final ___ull_rshift_ptr =
      _lookup<ffi.NativeFunction<Native___ull_rshift>>('__ull_rshift');
  late final _dart___ull_rshift ___ull_rshift =
      ___ull_rshift_ptr.asFunction<_dart___ull_rshift>();

  int __umulh(
    int arg0,
    int arg1,
  ) {
    return ___umulh(
      arg0,
      arg1,
    );
  }

  late final ___umulh_ptr =
      _lookup<ffi.NativeFunction<Native___umulh>>('__umulh');
  late final _dart___umulh ___umulh = ___umulh_ptr.asFunction<_dart___umulh>();

  void __vmx_off() {
    return ___vmx_off();
  }

  late final ___vmx_off_ptr =
      _lookup<ffi.NativeFunction<Native___vmx_off>>('__vmx_off');
  late final _dart___vmx_off ___vmx_off =
      ___vmx_off_ptr.asFunction<_dart___vmx_off>();

  int __vmx_on(
    ffi.Pointer<ffi.Uint64> arg0,
  ) {
    return ___vmx_on(
      arg0,
    );
  }

  late final ___vmx_on_ptr =
      _lookup<ffi.NativeFunction<Native___vmx_on>>('__vmx_on');
  late final _dart___vmx_on ___vmx_on =
      ___vmx_on_ptr.asFunction<_dart___vmx_on>();

  int __vmx_vmclear(
    ffi.Pointer<ffi.Uint64> arg0,
  ) {
    return ___vmx_vmclear(
      arg0,
    );
  }

  late final ___vmx_vmclear_ptr =
      _lookup<ffi.NativeFunction<Native___vmx_vmclear>>('__vmx_vmclear');
  late final _dart___vmx_vmclear ___vmx_vmclear =
      ___vmx_vmclear_ptr.asFunction<_dart___vmx_vmclear>();

  int __vmx_vmlaunch() {
    return ___vmx_vmlaunch();
  }

  late final ___vmx_vmlaunch_ptr =
      _lookup<ffi.NativeFunction<Native___vmx_vmlaunch>>('__vmx_vmlaunch');
  late final _dart___vmx_vmlaunch ___vmx_vmlaunch =
      ___vmx_vmlaunch_ptr.asFunction<_dart___vmx_vmlaunch>();

  int __vmx_vmptrld(
    ffi.Pointer<ffi.Uint64> arg0,
  ) {
    return ___vmx_vmptrld(
      arg0,
    );
  }

  late final ___vmx_vmptrld_ptr =
      _lookup<ffi.NativeFunction<Native___vmx_vmptrld>>('__vmx_vmptrld');
  late final _dart___vmx_vmptrld ___vmx_vmptrld =
      ___vmx_vmptrld_ptr.asFunction<_dart___vmx_vmptrld>();

  void __vmx_vmptrst(
    ffi.Pointer<ffi.Uint64> arg0,
  ) {
    return ___vmx_vmptrst(
      arg0,
    );
  }

  late final ___vmx_vmptrst_ptr =
      _lookup<ffi.NativeFunction<Native___vmx_vmptrst>>('__vmx_vmptrst');
  late final _dart___vmx_vmptrst ___vmx_vmptrst =
      ___vmx_vmptrst_ptr.asFunction<_dart___vmx_vmptrst>();

  int __vmx_vmread(
    int arg0,
    ffi.Pointer<ffi.Uint64> arg1,
  ) {
    return ___vmx_vmread(
      arg0,
      arg1,
    );
  }

  late final ___vmx_vmread_ptr =
      _lookup<ffi.NativeFunction<Native___vmx_vmread>>('__vmx_vmread');
  late final _dart___vmx_vmread ___vmx_vmread =
      ___vmx_vmread_ptr.asFunction<_dart___vmx_vmread>();

  int __vmx_vmresume() {
    return ___vmx_vmresume();
  }

  late final ___vmx_vmresume_ptr =
      _lookup<ffi.NativeFunction<Native___vmx_vmresume>>('__vmx_vmresume');
  late final _dart___vmx_vmresume ___vmx_vmresume =
      ___vmx_vmresume_ptr.asFunction<_dart___vmx_vmresume>();

  int __vmx_vmwrite(
    int arg0,
    int arg1,
  ) {
    return ___vmx_vmwrite(
      arg0,
      arg1,
    );
  }

  late final ___vmx_vmwrite_ptr =
      _lookup<ffi.NativeFunction<Native___vmx_vmwrite>>('__vmx_vmwrite');
  late final _dart___vmx_vmwrite ___vmx_vmwrite =
      ___vmx_vmwrite_ptr.asFunction<_dart___vmx_vmwrite>();

  void __wbinvd() {
    return ___wbinvd();
  }

  late final ___wbinvd_ptr =
      _lookup<ffi.NativeFunction<Native___wbinvd>>('__wbinvd');
  late final _dart___wbinvd ___wbinvd =
      ___wbinvd_ptr.asFunction<_dart___wbinvd>();

  void __writecr0(
    int arg0,
  ) {
    return ___writecr0(
      arg0,
    );
  }

  late final ___writecr0_ptr =
      _lookup<ffi.NativeFunction<Native___writecr0>>('__writecr0');
  late final _dart___writecr0 ___writecr0 =
      ___writecr0_ptr.asFunction<_dart___writecr0>();

  void __writecr2(
    int arg0,
  ) {
    return ___writecr2(
      arg0,
    );
  }

  late final ___writecr2_ptr =
      _lookup<ffi.NativeFunction<Native___writecr2>>('__writecr2');
  late final _dart___writecr2 ___writecr2 =
      ___writecr2_ptr.asFunction<_dart___writecr2>();

  void __writecr3(
    int arg0,
  ) {
    return ___writecr3(
      arg0,
    );
  }

  late final ___writecr3_ptr =
      _lookup<ffi.NativeFunction<Native___writecr3>>('__writecr3');
  late final _dart___writecr3 ___writecr3 =
      ___writecr3_ptr.asFunction<_dart___writecr3>();

  void __writecr4(
    int arg0,
  ) {
    return ___writecr4(
      arg0,
    );
  }

  late final ___writecr4_ptr =
      _lookup<ffi.NativeFunction<Native___writecr4>>('__writecr4');
  late final _dart___writecr4 ___writecr4 =
      ___writecr4_ptr.asFunction<_dart___writecr4>();

  void __writecr8(
    int arg0,
  ) {
    return ___writecr8(
      arg0,
    );
  }

  late final ___writecr8_ptr =
      _lookup<ffi.NativeFunction<Native___writecr8>>('__writecr8');
  late final _dart___writecr8 ___writecr8 =
      ___writecr8_ptr.asFunction<_dart___writecr8>();

  void __writedr(
    int arg0,
    int arg1,
  ) {
    return ___writedr(
      arg0,
      arg1,
    );
  }

  late final ___writedr_ptr =
      _lookup<ffi.NativeFunction<Native___writedr>>('__writedr');
  late final _dart___writedr ___writedr =
      ___writedr_ptr.asFunction<_dart___writedr>();

  void __writeeflags(
    int arg0,
  ) {
    return ___writeeflags(
      arg0,
    );
  }

  late final ___writeeflags_ptr =
      _lookup<ffi.NativeFunction<Native___writeeflags>>('__writeeflags');
  late final _dart___writeeflags ___writeeflags =
      ___writeeflags_ptr.asFunction<_dart___writeeflags>();

  void __writegsbyte(
    int arg0,
    int arg1,
  ) {
    return ___writegsbyte(
      arg0,
      arg1,
    );
  }

  late final ___writegsbyte_ptr =
      _lookup<ffi.NativeFunction<Native___writegsbyte>>('__writegsbyte');
  late final _dart___writegsbyte ___writegsbyte =
      ___writegsbyte_ptr.asFunction<_dart___writegsbyte>();

  void __writegsdword(
    int arg0,
    int arg1,
  ) {
    return ___writegsdword(
      arg0,
      arg1,
    );
  }

  late final ___writegsdword_ptr =
      _lookup<ffi.NativeFunction<Native___writegsdword>>('__writegsdword');
  late final _dart___writegsdword ___writegsdword =
      ___writegsdword_ptr.asFunction<_dart___writegsdword>();

  void __writegsqword(
    int arg0,
    int arg1,
  ) {
    return ___writegsqword(
      arg0,
      arg1,
    );
  }

  late final ___writegsqword_ptr =
      _lookup<ffi.NativeFunction<Native___writegsqword>>('__writegsqword');
  late final _dart___writegsqword ___writegsqword =
      ___writegsqword_ptr.asFunction<_dart___writegsqword>();

  void __writegsword(
    int arg0,
    int arg1,
  ) {
    return ___writegsword(
      arg0,
      arg1,
    );
  }

  late final ___writegsword_ptr =
      _lookup<ffi.NativeFunction<Native___writegsword>>('__writegsword');
  late final _dart___writegsword ___writegsword =
      ___writegsword_ptr.asFunction<_dart___writegsword>();

  void __writemsr(
    int arg0,
    int arg1,
  ) {
    return ___writemsr(
      arg0,
      arg1,
    );
  }

  late final ___writemsr_ptr =
      _lookup<ffi.NativeFunction<Native___writemsr>>('__writemsr');
  late final _dart___writemsr ___writemsr =
      ___writemsr_ptr.asFunction<_dart___writemsr>();

  int _bittest64(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __bittest64(
      arg0,
      arg1,
    );
  }

  late final __bittest64_ptr =
      _lookup<ffi.NativeFunction<Native__bittest64>>('_bittest64');
  late final _dart__bittest64 __bittest64 =
      __bittest64_ptr.asFunction<_dart__bittest64>();

  int _bittestandcomplement(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __bittestandcomplement(
      arg0,
      arg1,
    );
  }

  late final __bittestandcomplement_ptr =
      _lookup<ffi.NativeFunction<Native__bittestandcomplement>>(
          '_bittestandcomplement');
  late final _dart__bittestandcomplement __bittestandcomplement =
      __bittestandcomplement_ptr.asFunction<_dart__bittestandcomplement>();

  int _bittestandcomplement64(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __bittestandcomplement64(
      arg0,
      arg1,
    );
  }

  late final __bittestandcomplement64_ptr =
      _lookup<ffi.NativeFunction<Native__bittestandcomplement64>>(
          '_bittestandcomplement64');
  late final _dart__bittestandcomplement64 __bittestandcomplement64 =
      __bittestandcomplement64_ptr.asFunction<_dart__bittestandcomplement64>();

  int _bittestandreset(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __bittestandreset(
      arg0,
      arg1,
    );
  }

  late final __bittestandreset_ptr =
      _lookup<ffi.NativeFunction<Native__bittestandreset>>('_bittestandreset');
  late final _dart__bittestandreset __bittestandreset =
      __bittestandreset_ptr.asFunction<_dart__bittestandreset>();

  int _bittestandreset64(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __bittestandreset64(
      arg0,
      arg1,
    );
  }

  late final __bittestandreset64_ptr =
      _lookup<ffi.NativeFunction<Native__bittestandreset64>>(
          '_bittestandreset64');
  late final _dart__bittestandreset64 __bittestandreset64 =
      __bittestandreset64_ptr.asFunction<_dart__bittestandreset64>();

  int _bittestandset(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __bittestandset(
      arg0,
      arg1,
    );
  }

  late final __bittestandset_ptr =
      _lookup<ffi.NativeFunction<Native__bittestandset>>('_bittestandset');
  late final _dart__bittestandset __bittestandset =
      __bittestandset_ptr.asFunction<_dart__bittestandset>();

  int _bittestandset64(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __bittestandset64(
      arg0,
      arg1,
    );
  }

  late final __bittestandset64_ptr =
      _lookup<ffi.NativeFunction<Native__bittestandset64>>('_bittestandset64');
  late final _dart__bittestandset64 __bittestandset64 =
      __bittestandset64_ptr.asFunction<_dart__bittestandset64>();

  void _disable() {
    return __disable();
  }

  late final __disable_ptr =
      _lookup<ffi.NativeFunction<Native__disable>>('_disable');
  late final _dart__disable __disable =
      __disable_ptr.asFunction<_dart__disable>();

  void _enable() {
    return __enable();
  }

  late final __enable_ptr =
      _lookup<ffi.NativeFunction<Native__enable>>('_enable');
  late final _dart__enable __enable = __enable_ptr.asFunction<_dart__enable>();

  int _interlockedbittestandreset(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __interlockedbittestandreset(
      arg0,
      arg1,
    );
  }

  late final __interlockedbittestandreset_ptr =
      _lookup<ffi.NativeFunction<Native__interlockedbittestandreset>>(
          '_interlockedbittestandreset');
  late final _dart__interlockedbittestandreset __interlockedbittestandreset =
      __interlockedbittestandreset_ptr
          .asFunction<_dart__interlockedbittestandreset>();

  int _interlockedbittestandreset64(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __interlockedbittestandreset64(
      arg0,
      arg1,
    );
  }

  late final __interlockedbittestandreset64_ptr =
      _lookup<ffi.NativeFunction<Native__interlockedbittestandreset64>>(
          '_interlockedbittestandreset64');
  late final _dart__interlockedbittestandreset64
      __interlockedbittestandreset64 = __interlockedbittestandreset64_ptr
          .asFunction<_dart__interlockedbittestandreset64>();

  int _interlockedbittestandset64(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __interlockedbittestandset64(
      arg0,
      arg1,
    );
  }

  late final __interlockedbittestandset64_ptr =
      _lookup<ffi.NativeFunction<Native__interlockedbittestandset64>>(
          '_interlockedbittestandset64');
  late final _dart__interlockedbittestandset64 __interlockedbittestandset64 =
      __interlockedbittestandset64_ptr
          .asFunction<_dart__interlockedbittestandset64>();

  void _m_prefetch(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __m_prefetch(
      arg0,
    );
  }

  late final __m_prefetch_ptr =
      _lookup<ffi.NativeFunction<Native__m_prefetch>>('_m_prefetch');
  late final _dart__m_prefetch __m_prefetch =
      __m_prefetch_ptr.asFunction<_dart__m_prefetch>();

  void _m_prefetchw(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __m_prefetchw(
      arg0,
    );
  }

  late final __m_prefetchw_ptr =
      _lookup<ffi.NativeFunction<Native__m_prefetchw>>('_m_prefetchw');
  late final _dart__m_prefetchw __m_prefetchw =
      __m_prefetchw_ptr.asFunction<_dart__m_prefetchw>();

  void _mm_clflushopt(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __mm_clflushopt(
      arg0,
    );
  }

  late final __mm_clflushopt_ptr =
      _lookup<ffi.NativeFunction<Native__mm_clflushopt>>('_mm_clflushopt');
  late final _dart__mm_clflushopt __mm_clflushopt =
      __mm_clflushopt_ptr.asFunction<_dart__mm_clflushopt>();

  void _mm_clwb(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __mm_clwb(
      arg0,
    );
  }

  late final __mm_clwb_ptr =
      _lookup<ffi.NativeFunction<Native__mm_clwb>>('_mm_clwb');
  late final _dart__mm_clwb __mm_clwb =
      __mm_clwb_ptr.asFunction<_dart__mm_clwb>();

  void _mm_stream_si64x(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    return __mm_stream_si64x(
      arg0,
      arg1,
    );
  }

  late final __mm_stream_si64x_ptr =
      _lookup<ffi.NativeFunction<Native__mm_stream_si64x>>('_mm_stream_si64x');
  late final _dart__mm_stream_si64x __mm_stream_si64x =
      __mm_stream_si64x_ptr.asFunction<_dart__mm_stream_si64x>();

  int _mul128(
    int _Multiplier,
    int _Multiplicand,
    ffi.Pointer<ffi.Int64> _HighProduct,
  ) {
    return __mul128(
      _Multiplier,
      _Multiplicand,
      _HighProduct,
    );
  }

  late final __mul128_ptr =
      _lookup<ffi.NativeFunction<Native__mul128>>('_mul128');
  late final _dart__mul128 __mul128 = __mul128_ptr.asFunction<_dart__mul128>();

  int _rotl16(
    int _Value,
    int _Shift,
  ) {
    return __rotl16(
      _Value,
      _Shift,
    );
  }

  late final __rotl16_ptr =
      _lookup<ffi.NativeFunction<Native__rotl16>>('_rotl16');
  late final _dart__rotl16 __rotl16 = __rotl16_ptr.asFunction<_dart__rotl16>();

  int _rotl8(
    int _Value,
    int _Shift,
  ) {
    return __rotl8(
      _Value,
      _Shift,
    );
  }

  late final __rotl8_ptr = _lookup<ffi.NativeFunction<Native__rotl8>>('_rotl8');
  late final _dart__rotl8 __rotl8 = __rotl8_ptr.asFunction<_dart__rotl8>();

  int _rotr16(
    int _Value,
    int _Shift,
  ) {
    return __rotr16(
      _Value,
      _Shift,
    );
  }

  late final __rotr16_ptr =
      _lookup<ffi.NativeFunction<Native__rotr16>>('_rotr16');
  late final _dart__rotr16 __rotr16 = __rotr16_ptr.asFunction<_dart__rotr16>();

  int _rotr8(
    int _Value,
    int _Shift,
  ) {
    return __rotr8(
      _Value,
      _Shift,
    );
  }

  late final __rotr8_ptr = _lookup<ffi.NativeFunction<Native__rotr8>>('_rotr8');
  late final _dart__rotr8 __rotr8 = __rotr8_ptr.asFunction<_dart__rotr8>();

  int _setjmpex(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return __setjmpex(
      arg0,
    );
  }

  late final __setjmpex_ptr =
      _lookup<ffi.NativeFunction<Native__setjmpex>>('_setjmpex');
  late final _dart__setjmpex __setjmpex =
      __setjmpex_ptr.asFunction<_dart__setjmpex>();

  void _rsm() {
    return __rsm();
  }

  late final __rsm_ptr = _lookup<ffi.NativeFunction<Native__rsm>>('_rsm');
  late final _dart__rsm __rsm = __rsm_ptr.asFunction<_dart__rsm>();

  void _lgdt(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __lgdt(
      arg0,
    );
  }

  late final __lgdt_ptr = _lookup<ffi.NativeFunction<Native__lgdt>>('_lgdt');
  late final _dart__lgdt __lgdt = __lgdt_ptr.asFunction<_dart__lgdt>();

  void _sgdt(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return __sgdt(
      arg0,
    );
  }

  late final __sgdt_ptr = _lookup<ffi.NativeFunction<Native__sgdt>>('_sgdt');
  late final _dart__sgdt __sgdt = __sgdt_ptr.asFunction<_dart__sgdt>();

  void _clac() {
    return __clac();
  }

  late final __clac_ptr = _lookup<ffi.NativeFunction<Native__clac>>('_clac');
  late final _dart__clac __clac = __clac_ptr.asFunction<_dart__clac>();

  void _stac() {
    return __stac();
  }

  late final __stac_ptr = _lookup<ffi.NativeFunction<Native__stac>>('_stac');
  late final _dart__stac __stac = __stac_ptr.asFunction<_dart__stac>();

  int _addcarry_u8(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint8> arg3,
  ) {
    return __addcarry_u8(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __addcarry_u8_ptr =
      _lookup<ffi.NativeFunction<Native__addcarry_u8>>('_addcarry_u8');
  late final _dart__addcarry_u8 __addcarry_u8 =
      __addcarry_u8_ptr.asFunction<_dart__addcarry_u8>();

  int _subborrow_u8(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint8> arg3,
  ) {
    return __subborrow_u8(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __subborrow_u8_ptr =
      _lookup<ffi.NativeFunction<Native__subborrow_u8>>('_subborrow_u8');
  late final _dart__subborrow_u8 __subborrow_u8 =
      __subborrow_u8_ptr.asFunction<_dart__subborrow_u8>();

  int _addcarry_u16(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint16> arg3,
  ) {
    return __addcarry_u16(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __addcarry_u16_ptr =
      _lookup<ffi.NativeFunction<Native__addcarry_u16>>('_addcarry_u16');
  late final _dart__addcarry_u16 __addcarry_u16 =
      __addcarry_u16_ptr.asFunction<_dart__addcarry_u16>();

  int _subborrow_u16(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint16> arg3,
  ) {
    return __subborrow_u16(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __subborrow_u16_ptr =
      _lookup<ffi.NativeFunction<Native__subborrow_u16>>('_subborrow_u16');
  late final _dart__subborrow_u16 __subborrow_u16 =
      __subborrow_u16_ptr.asFunction<_dart__subborrow_u16>();

  int _addcarry_u32(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint32> arg3,
  ) {
    return __addcarry_u32(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __addcarry_u32_ptr =
      _lookup<ffi.NativeFunction<Native__addcarry_u32>>('_addcarry_u32');
  late final _dart__addcarry_u32 __addcarry_u32 =
      __addcarry_u32_ptr.asFunction<_dart__addcarry_u32>();

  int _subborrow_u32(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint32> arg3,
  ) {
    return __subborrow_u32(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __subborrow_u32_ptr =
      _lookup<ffi.NativeFunction<Native__subborrow_u32>>('_subborrow_u32');
  late final _dart__subborrow_u32 __subborrow_u32 =
      __subborrow_u32_ptr.asFunction<_dart__subborrow_u32>();

  int _addcarry_u64(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint64> arg3,
  ) {
    return __addcarry_u64(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __addcarry_u64_ptr =
      _lookup<ffi.NativeFunction<Native__addcarry_u64>>('_addcarry_u64');
  late final _dart__addcarry_u64 __addcarry_u64 =
      __addcarry_u64_ptr.asFunction<_dart__addcarry_u64>();

  int _subborrow_u64(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint64> arg3,
  ) {
    return __subborrow_u64(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __subborrow_u64_ptr =
      _lookup<ffi.NativeFunction<Native__subborrow_u64>>('_subborrow_u64');
  late final _dart__subborrow_u64 __subborrow_u64 =
      __subborrow_u64_ptr.asFunction<_dart__subborrow_u64>();

  late final ffi.Pointer<ffi.Int32> _Concurrency =
      _lookup<ffi.Int32>('Concurrency');

  int get Concurrency => _Concurrency.value;

  set Concurrency(int value) => _Concurrency.value = value;

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CronetDart _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<Native___va_start>> get __va_start =>
      _library.___va_start_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___security_init_cookie>>
      get __security_init_cookie => _library.___security_init_cookie_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___security_check_cookie>>
      get __security_check_cookie => _library.___security_check_cookie_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___report_gsfailure>>
      get __report_gsfailure => _library.___report_gsfailure_ptr;
  ffi.Pointer<ffi.Uint64> get __security_cookie => _library.___security_cookie;
  ffi.Pointer<ffi.NativeFunction<Native__invalid_parameter_noinfo>>
      get _invalid_parameter_noinfo => _library.__invalid_parameter_noinfo_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__invalid_parameter_noinfo_noreturn>>
      get _invalid_parameter_noinfo_noreturn =>
          _library.__invalid_parameter_noinfo_noreturn_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__invoke_watson>> get _invoke_watson =>
      _library.__invoke_watson_ptr;
  ffi.Pointer<ffi.Int32> get std => _library._std;
  ffi.Pointer<ffi.NativeFunction<Native__set_errno>> get _set_errno =>
      _library.__set_errno_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_errno>> get _get_errno =>
      _library.__get_errno_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___threadid>> get __threadid =>
      _library.___threadid_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___threadhandle>> get __threadhandle =>
      _library.___threadhandle_ptr;
  ffi.Pointer<ffi.Double> get _HUGE => _library.__HUGE;
  ffi.Pointer<ffi.NativeFunction<Native__fperrraise>> get _fperrraise =>
      _library.__fperrraise_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__dclass>> get _dclass =>
      _library.__dclass_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fdclass>> get _fdclass =>
      _library.__fdclass_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__dsign>> get _dsign =>
      _library.__dsign_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fdsign>> get _fdsign =>
      _library.__fdsign_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__dpcomp>> get _dpcomp =>
      _library.__dpcomp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fdpcomp>> get _fdpcomp =>
      _library.__fdpcomp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__dtest>> get _dtest =>
      _library.__dtest_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fdtest>> get _fdtest =>
      _library.__fdtest_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__d_int>> get _d_int =>
      _library.__d_int_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fd_int>> get _fd_int =>
      _library.__fd_int_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__dscale>> get _dscale =>
      _library.__dscale_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fdscale>> get _fdscale =>
      _library.__fdscale_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__dunscale>> get _dunscale =>
      _library.__dunscale_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fdunscale>> get _fdunscale =>
      _library.__fdunscale_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__dexp>> get _dexp =>
      _library.__dexp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fdexp>> get _fdexp =>
      _library.__fdexp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__dnorm>> get _dnorm =>
      _library.__dnorm_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fdnorm>> get _fdnorm =>
      _library.__fdnorm_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__dpoly>> get _dpoly =>
      _library.__dpoly_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fdpoly>> get _fdpoly =>
      _library.__fdpoly_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__dlog>> get _dlog =>
      _library.__dlog_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fdlog>> get _fdlog =>
      _library.__fdlog_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__dsin>> get _dsin =>
      _library.__dsin_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fdsin>> get _fdsin =>
      _library.__fdsin_ptr;
  ffi.Pointer<ffi.Double> get _Zero_C => _library.__Zero_C;
  ffi.Pointer<ffi.Double> get _Xbig_C => _library.__Xbig_C;
  ffi.Pointer<ffi.Float> get _FZero_C => _library.__FZero_C;
  ffi.Pointer<ffi.Float> get _FXbig_C => _library.__FXbig_C;
  ffi.Pointer<ffi.NativeFunction<Native_abs>> get abs => _library._abs_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_labs>> get labs => _library._labs_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_llabs>> get llabs =>
      _library._llabs_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_acos>> get acos => _library._acos_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_asin>> get asin => _library._asin_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_atan>> get atan => _library._atan_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_atan2>> get atan2 =>
      _library._atan2_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_cos>> get cos => _library._cos_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_cosh>> get cosh => _library._cosh_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_exp>> get exp => _library._exp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fabs>> get fabs => _library._fabs_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fmod>> get fmod => _library._fmod_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_log>> get log => _library._log_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_log10>> get log10 =>
      _library._log10_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_pow>> get pow => _library._pow_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_sin>> get sin => _library._sin_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_sinh>> get sinh => _library._sinh_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_sqrt>> get sqrt => _library._sqrt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tan>> get tan => _library._tan_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tanh>> get tanh => _library._tanh_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_acosh>> get acosh =>
      _library._acosh_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_asinh>> get asinh =>
      _library._asinh_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_atanh>> get atanh =>
      _library._atanh_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_atof>> get atof => _library._atof_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__atof_l>> get _atof_l =>
      _library.__atof_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__cabs>> get _cabs =>
      _library.__cabs_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_cbrt>> get cbrt => _library._cbrt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_ceil>> get ceil => _library._ceil_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__chgsign>> get _chgsign =>
      _library.__chgsign_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_copysign>> get copysign =>
      _library._copysign_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__copysign>> get _copysign =>
      _library.__copysign_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_erf>> get erf => _library._erf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_erfc>> get erfc => _library._erfc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_exp2>> get exp2 => _library._exp2_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_expm1>> get expm1 =>
      _library._expm1_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fdim>> get fdim => _library._fdim_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_floor>> get floor =>
      _library._floor_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fma>> get fma => _library._fma_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fmax>> get fmax => _library._fmax_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fmin>> get fmin => _library._fmin_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_frexp>> get frexp =>
      _library._frexp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_hypot>> get hypot =>
      _library._hypot_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__hypot>> get _hypot =>
      _library.__hypot_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_ilogb>> get ilogb =>
      _library._ilogb_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_ldexp>> get ldexp =>
      _library._ldexp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_lgamma>> get lgamma =>
      _library._lgamma_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_llrint>> get llrint =>
      _library._llrint_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_llround>> get llround =>
      _library._llround_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_log1p>> get log1p =>
      _library._log1p_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_log2>> get log2 => _library._log2_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_logb>> get logb => _library._logb_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_lrint>> get lrint =>
      _library._lrint_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_lround>> get lround =>
      _library._lround_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__matherr>> get _matherr =>
      _library.__matherr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_modf>> get modf => _library._modf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_nan>> get nan => _library._nan_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_nearbyint>> get nearbyint =>
      _library._nearbyint_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_nextafter>> get nextafter =>
      _library._nextafter_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_remainder>> get remainder =>
      _library._remainder_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_remquo>> get remquo =>
      _library._remquo_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_rint>> get rint => _library._rint_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_round>> get round =>
      _library._round_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_scalbln>> get scalbln =>
      _library._scalbln_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_scalbn>> get scalbn =>
      _library._scalbn_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tgamma>> get tgamma =>
      _library._tgamma_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_trunc>> get trunc =>
      _library._trunc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__j0>> get _j0 => _library.__j0_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__j1>> get _j1 => _library.__j1_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__jn>> get _jn => _library.__jn_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__y0>> get _y0 => _library.__y0_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__y1>> get _y1 => _library.__y1_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__yn>> get _yn => _library.__yn_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_acoshf>> get acoshf =>
      _library._acoshf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_asinhf>> get asinhf =>
      _library._asinhf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_atanhf>> get atanhf =>
      _library._atanhf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_cbrtf>> get cbrtf =>
      _library._cbrtf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__chgsignf>> get _chgsignf =>
      _library.__chgsignf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_copysignf>> get copysignf =>
      _library._copysignf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__copysignf>> get _copysignf =>
      _library.__copysignf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_erff>> get erff => _library._erff_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_erfcf>> get erfcf =>
      _library._erfcf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_expm1f>> get expm1f =>
      _library._expm1f_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_exp2f>> get exp2f =>
      _library._exp2f_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fdimf>> get fdimf =>
      _library._fdimf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fmaf>> get fmaf => _library._fmaf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fmaxf>> get fmaxf =>
      _library._fmaxf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fminf>> get fminf =>
      _library._fminf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__hypotf>> get _hypotf =>
      _library.__hypotf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_ilogbf>> get ilogbf =>
      _library._ilogbf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_lgammaf>> get lgammaf =>
      _library._lgammaf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_llrintf>> get llrintf =>
      _library._llrintf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_llroundf>> get llroundf =>
      _library._llroundf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_log1pf>> get log1pf =>
      _library._log1pf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_log2f>> get log2f =>
      _library._log2f_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_logbf>> get logbf =>
      _library._logbf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_lrintf>> get lrintf =>
      _library._lrintf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_lroundf>> get lroundf =>
      _library._lroundf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_nanf>> get nanf => _library._nanf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_nearbyintf>> get nearbyintf =>
      _library._nearbyintf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_nextafterf>> get nextafterf =>
      _library._nextafterf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_remainderf>> get remainderf =>
      _library._remainderf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_remquof>> get remquof =>
      _library._remquof_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_rintf>> get rintf =>
      _library._rintf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_roundf>> get roundf =>
      _library._roundf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_scalblnf>> get scalblnf =>
      _library._scalblnf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_scalbnf>> get scalbnf =>
      _library._scalbnf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tgammaf>> get tgammaf =>
      _library._tgammaf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_truncf>> get truncf =>
      _library._truncf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__logbf>> get _logbf =>
      _library.__logbf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__nextafterf>> get _nextafterf =>
      _library.__nextafterf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__finitef>> get _finitef =>
      _library.__finitef_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__isnanf>> get _isnanf =>
      _library.__isnanf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fpclassf>> get _fpclassf =>
      _library.__fpclassf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__set_FMA3_enable>>
      get _set_FMA3_enable => _library.__set_FMA3_enable_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_FMA3_enable>>
      get _get_FMA3_enable => _library.__get_FMA3_enable_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_acosf>> get acosf =>
      _library._acosf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_asinf>> get asinf =>
      _library._asinf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_atan2f>> get atan2f =>
      _library._atan2f_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_atanf>> get atanf =>
      _library._atanf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_ceilf>> get ceilf =>
      _library._ceilf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_cosf>> get cosf => _library._cosf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_coshf>> get coshf =>
      _library._coshf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_expf>> get expf => _library._expf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_floorf>> get floorf =>
      _library._floorf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fmodf>> get fmodf =>
      _library._fmodf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_log10f>> get log10f =>
      _library._log10f_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_logf>> get logf => _library._logf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_modff>> get modff =>
      _library._modff_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_powf>> get powf => _library._powf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_sinf>> get sinf => _library._sinf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_sinhf>> get sinhf =>
      _library._sinhf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_sqrtf>> get sqrtf =>
      _library._sqrtf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tanf>> get tanf => _library._tanf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tanhf>> get tanhf =>
      _library._tanhf_ptr;
  ffi.Pointer<ffi.Double> get HUGE => _library._HUGE_1;
  ffi.Pointer<ffi.NativeFunction<Native_j0>> get j0 => _library._j0_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_j1>> get j1 => _library._j1_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_jn>> get jn => _library._jn_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_y0>> get y0 => _library._y0_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_y1>> get y1 => _library._y1_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_yn>> get yn => _library._yn_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__calloc_base>> get _calloc_base =>
      _library.__calloc_base_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_calloc>> get calloc =>
      _library._calloc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__callnewh>> get _callnewh =>
      _library.__callnewh_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__expand>> get _expand =>
      _library.__expand_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__free_base>> get _free_base =>
      _library.__free_base_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_free>> get free => _library._free_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__malloc_base>> get _malloc_base =>
      _library.__malloc_base_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_malloc>> get malloc =>
      _library._malloc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__msize_base>> get _msize_base =>
      _library.__msize_base_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__msize>> get _msize =>
      _library.__msize_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__realloc_base>> get _realloc_base =>
      _library.__realloc_base_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_realloc>> get realloc =>
      _library._realloc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__recalloc_base>> get _recalloc_base =>
      _library.__recalloc_base_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__recalloc>> get _recalloc =>
      _library.__recalloc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__aligned_free>> get _aligned_free =>
      _library.__aligned_free_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__aligned_malloc>> get _aligned_malloc =>
      _library.__aligned_malloc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__aligned_offset_malloc>>
      get _aligned_offset_malloc => _library.__aligned_offset_malloc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__aligned_msize>> get _aligned_msize =>
      _library.__aligned_msize_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__aligned_offset_realloc>>
      get _aligned_offset_realloc => _library.__aligned_offset_realloc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__aligned_offset_recalloc>>
      get _aligned_offset_recalloc => _library.__aligned_offset_recalloc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__aligned_realloc>>
      get _aligned_realloc => _library.__aligned_realloc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__aligned_recalloc>>
      get _aligned_recalloc => _library.__aligned_recalloc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_bsearch_s>> get bsearch_s =>
      _library._bsearch_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_qsort_s>> get qsort_s =>
      _library._qsort_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_bsearch>> get bsearch =>
      _library._bsearch_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_qsort>> get qsort =>
      _library._qsort_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__lfind_s>> get _lfind_s =>
      _library.__lfind_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__lfind>> get _lfind =>
      _library.__lfind_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__lsearch_s>> get _lsearch_s =>
      _library.__lsearch_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__lsearch>> get _lsearch =>
      _library.__lsearch_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_lfind>> get lfind =>
      _library._lfind_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_lsearch>> get lsearch =>
      _library._lsearch_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__itow_s>> get _itow_s =>
      _library.__itow_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__itow>> get _itow =>
      _library.__itow_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ltow_s>> get _ltow_s =>
      _library.__ltow_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ltow>> get _ltow =>
      _library.__ltow_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ultow_s>> get _ultow_s =>
      _library.__ultow_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ultow>> get _ultow =>
      _library.__ultow_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcstod>> get wcstod =>
      _library._wcstod_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcstod_l>> get _wcstod_l =>
      _library.__wcstod_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcstol>> get wcstol =>
      _library._wcstol_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcstol_l>> get _wcstol_l =>
      _library.__wcstol_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcstoll>> get wcstoll =>
      _library._wcstoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcstoll_l>> get _wcstoll_l =>
      _library.__wcstoll_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcstoul>> get wcstoul =>
      _library._wcstoul_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcstoul_l>> get _wcstoul_l =>
      _library.__wcstoul_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcstoull>> get wcstoull =>
      _library._wcstoull_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcstoull_l>> get _wcstoull_l =>
      _library.__wcstoull_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcstof>> get wcstof =>
      _library._wcstof_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcstof_l>> get _wcstof_l =>
      _library.__wcstof_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wtof>> get _wtof =>
      _library.__wtof_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wtof_l>> get _wtof_l =>
      _library.__wtof_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wtoi>> get _wtoi =>
      _library.__wtoi_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wtoi_l>> get _wtoi_l =>
      _library.__wtoi_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wtol>> get _wtol =>
      _library.__wtol_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wtol_l>> get _wtol_l =>
      _library.__wtol_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wtoll>> get _wtoll =>
      _library.__wtoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wtoll_l>> get _wtoll_l =>
      _library.__wtoll_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__i64tow_s>> get _i64tow_s =>
      _library.__i64tow_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__i64tow>> get _i64tow =>
      _library.__i64tow_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ui64tow_s>> get _ui64tow_s =>
      _library.__ui64tow_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ui64tow>> get _ui64tow =>
      _library.__ui64tow_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wtoi64>> get _wtoi64 =>
      _library.__wtoi64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wtoi64_l>> get _wtoi64_l =>
      _library.__wtoi64_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcstoi64>> get _wcstoi64 =>
      _library.__wcstoi64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcstoi64_l>> get _wcstoi64_l =>
      _library.__wcstoi64_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcstoui64>> get _wcstoui64 =>
      _library.__wcstoui64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcstoui64_l>> get _wcstoui64_l =>
      _library.__wcstoui64_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wfullpath>> get _wfullpath =>
      _library.__wfullpath_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wmakepath_s>> get _wmakepath_s =>
      _library.__wmakepath_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wmakepath>> get _wmakepath =>
      _library.__wmakepath_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wperror>> get _wperror =>
      _library.__wperror_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wsplitpath>> get _wsplitpath =>
      _library.__wsplitpath_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wsplitpath_s>> get _wsplitpath_s =>
      _library.__wsplitpath_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wdupenv_s>> get _wdupenv_s =>
      _library.__wdupenv_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wgetenv>> get _wgetenv =>
      _library.__wgetenv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wgetenv_s>> get _wgetenv_s =>
      _library.__wgetenv_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wputenv>> get _wputenv =>
      _library.__wputenv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wputenv_s>> get _wputenv_s =>
      _library.__wputenv_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wsearchenv_s>> get _wsearchenv_s =>
      _library.__wsearchenv_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wsearchenv>> get _wsearchenv =>
      _library.__wsearchenv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wsystem>> get _wsystem =>
      _library.__wsystem_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__swab>> get _swab =>
      _library.__swab_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_exit>> get exit => _library._exit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__exit>> get _exit =>
      _library.__exit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Exit>> get _Exit =>
      _library.__Exit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_quick_exit>> get quick_exit =>
      _library._quick_exit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_abort>> get abort =>
      _library._abort_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__set_abort_behavior>>
      get _set_abort_behavior => _library.__set_abort_behavior_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_atexit>> get atexit =>
      _library._atexit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__onexit>> get _onexit =>
      _library.__onexit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_at_quick_exit>> get at_quick_exit =>
      _library._at_quick_exit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__set_purecall_handler>>
      get _set_purecall_handler => _library.__set_purecall_handler_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_purecall_handler>>
      get _get_purecall_handler => _library.__get_purecall_handler_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__set_invalid_parameter_handler>>
      get _set_invalid_parameter_handler =>
          _library.__set_invalid_parameter_handler_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_invalid_parameter_handler>>
      get _get_invalid_parameter_handler =>
          _library.__get_invalid_parameter_handler_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native__set_thread_local_invalid_parameter_handler>>
      get _set_thread_local_invalid_parameter_handler =>
          _library.__set_thread_local_invalid_parameter_handler_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native__get_thread_local_invalid_parameter_handler>>
      get _get_thread_local_invalid_parameter_handler =>
          _library.__get_thread_local_invalid_parameter_handler_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__set_error_mode>> get _set_error_mode =>
      _library.__set_error_mode_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__errno>> get _errno =>
      _library.__errno_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___doserrno>> get __doserrno =>
      _library.___doserrno_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__set_doserrno>> get _set_doserrno =>
      _library.__set_doserrno_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_doserrno>> get _get_doserrno =>
      _library.__get_doserrno_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___sys_errlist>> get __sys_errlist =>
      _library.___sys_errlist_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___sys_nerr>> get __sys_nerr =>
      _library.___sys_nerr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_perror>> get perror =>
      _library._perror_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___p__pgmptr>> get __p__pgmptr =>
      _library.___p__pgmptr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___p__wpgmptr>> get __p__wpgmptr =>
      _library.___p__wpgmptr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___p__fmode>> get __p__fmode =>
      _library.___p__fmode_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_pgmptr>> get _get_pgmptr =>
      _library.__get_pgmptr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_wpgmptr>> get _get_wpgmptr =>
      _library.__get_wpgmptr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__set_fmode>> get _set_fmode =>
      _library.__set_fmode_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_fmode>> get _get_fmode =>
      _library.__get_fmode_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__abs64>> get _abs64 =>
      _library.__abs64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__byteswap_ushort>>
      get _byteswap_ushort => _library.__byteswap_ushort_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__byteswap_ulong>> get _byteswap_ulong =>
      _library.__byteswap_ulong_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__byteswap_uint64>>
      get _byteswap_uint64 => _library.__byteswap_uint64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_div>> get div => _library._div_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_ldiv>> get ldiv => _library._ldiv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_lldiv>> get lldiv =>
      _library._lldiv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rotl>> get _rotl =>
      _library.__rotl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__lrotl>> get _lrotl =>
      _library.__lrotl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rotl64>> get _rotl64 =>
      _library.__rotl64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rotr>> get _rotr =>
      _library.__rotr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__lrotr>> get _lrotr =>
      _library.__lrotr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rotr64>> get _rotr64 =>
      _library.__rotr64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_srand>> get srand =>
      _library._srand_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_rand>> get rand => _library._rand_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_atoi>> get atoi => _library._atoi_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_atol>> get atol => _library._atol_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_atoll>> get atoll =>
      _library._atoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__atoi64>> get _atoi64 =>
      _library.__atoi64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__atoi_l>> get _atoi_l =>
      _library.__atoi_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__atol_l>> get _atol_l =>
      _library.__atol_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__atoll_l>> get _atoll_l =>
      _library.__atoll_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__atoi64_l>> get _atoi64_l =>
      _library.__atoi64_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__atoflt>> get _atoflt =>
      _library.__atoflt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__atodbl>> get _atodbl =>
      _library.__atodbl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__atoldbl>> get _atoldbl =>
      _library.__atoldbl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__atoflt_l>> get _atoflt_l =>
      _library.__atoflt_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__atodbl_l>> get _atodbl_l =>
      _library.__atodbl_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__atoldbl_l>> get _atoldbl_l =>
      _library.__atoldbl_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strtof>> get strtof =>
      _library._strtof_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strtof_l>> get _strtof_l =>
      _library.__strtof_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strtod>> get strtod =>
      _library._strtod_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strtod_l>> get _strtod_l =>
      _library.__strtod_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strtol>> get strtol =>
      _library._strtol_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strtol_l>> get _strtol_l =>
      _library.__strtol_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strtoll>> get strtoll =>
      _library._strtoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strtoll_l>> get _strtoll_l =>
      _library.__strtoll_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strtoul>> get strtoul =>
      _library._strtoul_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strtoul_l>> get _strtoul_l =>
      _library.__strtoul_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strtoull>> get strtoull =>
      _library._strtoull_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strtoull_l>> get _strtoull_l =>
      _library.__strtoull_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strtoi64>> get _strtoi64 =>
      _library.__strtoi64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strtoi64_l>> get _strtoi64_l =>
      _library.__strtoi64_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strtoui64>> get _strtoui64 =>
      _library.__strtoui64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strtoui64_l>> get _strtoui64_l =>
      _library.__strtoui64_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__itoa_s>> get _itoa_s =>
      _library.__itoa_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__itoa>> get _itoa =>
      _library.__itoa_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ltoa_s>> get _ltoa_s =>
      _library.__ltoa_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ltoa>> get _ltoa =>
      _library.__ltoa_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ultoa_s>> get _ultoa_s =>
      _library.__ultoa_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ultoa>> get _ultoa =>
      _library.__ultoa_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__i64toa_s>> get _i64toa_s =>
      _library.__i64toa_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__i64toa>> get _i64toa =>
      _library.__i64toa_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ui64toa_s>> get _ui64toa_s =>
      _library.__ui64toa_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ui64toa>> get _ui64toa =>
      _library.__ui64toa_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ecvt_s>> get _ecvt_s =>
      _library.__ecvt_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ecvt>> get _ecvt =>
      _library.__ecvt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fcvt_s>> get _fcvt_s =>
      _library.__fcvt_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fcvt>> get _fcvt =>
      _library.__fcvt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__gcvt_s>> get _gcvt_s =>
      _library.__gcvt_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__gcvt>> get _gcvt =>
      _library.__gcvt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native____mb_cur_max_func>>
      get ___mb_cur_max_func => _library.____mb_cur_max_func_ptr;
  ffi.Pointer<ffi.NativeFunction<Native____mb_cur_max_l_func>>
      get ___mb_cur_max_l_func => _library.____mb_cur_max_l_func_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_mblen>> get mblen =>
      _library._mblen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mblen_l>> get _mblen_l =>
      _library.__mblen_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mbstrlen>> get _mbstrlen =>
      _library.__mbstrlen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mbstrlen_l>> get _mbstrlen_l =>
      _library.__mbstrlen_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mbstrnlen>> get _mbstrnlen =>
      _library.__mbstrnlen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mbstrnlen_l>> get _mbstrnlen_l =>
      _library.__mbstrnlen_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_mbtowc>> get mbtowc =>
      _library._mbtowc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mbtowc_l>> get _mbtowc_l =>
      _library.__mbtowc_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_mbstowcs_s>> get mbstowcs_s =>
      _library._mbstowcs_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_mbstowcs>> get mbstowcs =>
      _library._mbstowcs_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mbstowcs_s_l>> get _mbstowcs_s_l =>
      _library.__mbstowcs_s_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mbstowcs_l>> get _mbstowcs_l =>
      _library.__mbstowcs_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wctomb>> get wctomb =>
      _library._wctomb_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wctomb_l>> get _wctomb_l =>
      _library.__wctomb_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wctomb_s>> get wctomb_s =>
      _library._wctomb_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wctomb_s_l>> get _wctomb_s_l =>
      _library.__wctomb_s_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcstombs_s>> get wcstombs_s =>
      _library._wcstombs_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcstombs>> get wcstombs =>
      _library._wcstombs_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcstombs_s_l>> get _wcstombs_s_l =>
      _library.__wcstombs_s_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcstombs_l>> get _wcstombs_l =>
      _library.__wcstombs_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fullpath>> get _fullpath =>
      _library.__fullpath_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__makepath_s>> get _makepath_s =>
      _library.__makepath_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__makepath>> get _makepath =>
      _library.__makepath_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__splitpath>> get _splitpath =>
      _library.__splitpath_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__splitpath_s>> get _splitpath_s =>
      _library.__splitpath_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_getenv_s>> get getenv_s =>
      _library._getenv_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___p___argc>> get __p___argc =>
      _library.___p___argc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___p___argv>> get __p___argv =>
      _library.___p___argv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___p___wargv>> get __p___wargv =>
      _library.___p___wargv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___p__environ>> get __p__environ =>
      _library.___p__environ_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___p__wenviron>> get __p__wenviron =>
      _library.___p__wenviron_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_getenv>> get getenv =>
      _library._getenv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__dupenv_s>> get _dupenv_s =>
      _library.__dupenv_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_system>> get system =>
      _library._system_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__putenv>> get _putenv =>
      _library.__putenv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__putenv_s>> get _putenv_s =>
      _library.__putenv_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__searchenv_s>> get _searchenv_s =>
      _library.__searchenv_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__searchenv>> get _searchenv =>
      _library.__searchenv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__seterrormode>> get _seterrormode =>
      _library.__seterrormode_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__beep>> get _beep =>
      _library.__beep_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__sleep>> get _sleep =>
      _library.__sleep_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_ecvt>> get ecvt => _library._ecvt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fcvt>> get fcvt => _library._fcvt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_gcvt>> get gcvt => _library._gcvt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_itoa>> get itoa => _library._itoa_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_ltoa>> get ltoa => _library._ltoa_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_swab>> get swab => _library._swab_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_ultoa>> get ultoa =>
      _library._ultoa_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_putenv>> get putenv =>
      _library._putenv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_onexit>> get onexit =>
      _library._onexit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__alloca>> get _alloca =>
      _library.__alloca_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_heap_handle>>
      get _get_heap_handle => _library.__get_heap_handle_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__heapmin>> get _heapmin =>
      _library.__heapmin_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__heapwalk>> get _heapwalk =>
      _library.__heapwalk_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__heapchk>> get _heapchk =>
      _library.__heapchk_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__resetstkoflw>> get _resetstkoflw =>
      _library.__resetstkoflw_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___std_exception_copy>>
      get __std_exception_copy => _library.___std_exception_copy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___std_exception_destroy>>
      get __std_exception_destroy => _library.___std_exception_destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___ExceptionPtrRethrow>>
      get __ExceptionPtrRethrow => _library.___ExceptionPtrRethrow_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___acrt_iob_func>> get __acrt_iob_func =>
      _library.___acrt_iob_func_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fgetwc>> get fgetwc =>
      _library._fgetwc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fgetwchar>> get _fgetwchar =>
      _library.__fgetwchar_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fputwc>> get fputwc =>
      _library._fputwc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fputwchar>> get _fputwchar =>
      _library.__fputwchar_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_getwc>> get getwc =>
      _library._getwc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_getwchar>> get getwchar =>
      _library._getwchar_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fgetws>> get fgetws =>
      _library._fgetws_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fputws>> get fputws =>
      _library._fputws_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__getws_s>> get _getws_s =>
      _library.__getws_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_putwc>> get putwc =>
      _library._putwc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_putwchar>> get putwchar =>
      _library._putwchar_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__putws>> get _putws =>
      _library.__putws_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_ungetwc>> get ungetwc =>
      _library._ungetwc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wfdopen>> get _wfdopen =>
      _library.__wfdopen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wfopen>> get _wfopen =>
      _library.__wfopen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wfopen_s>> get _wfopen_s =>
      _library.__wfopen_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wfreopen>> get _wfreopen =>
      _library.__wfreopen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wfreopen_s>> get _wfreopen_s =>
      _library.__wfreopen_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wfsopen>> get _wfsopen =>
      _library.__wfsopen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wpopen>> get _wpopen =>
      _library.__wpopen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wremove>> get _wremove =>
      _library.__wremove_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wtempnam>> get _wtempnam =>
      _library.__wtempnam_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wtmpnam_s>> get _wtmpnam_s =>
      _library.__wtmpnam_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wtmpnam>> get _wtmpnam =>
      _library.__wtmpnam_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fgetwc_nolock>> get _fgetwc_nolock =>
      _library.__fgetwc_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fputwc_nolock>> get _fputwc_nolock =>
      _library.__fputwc_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__getwc_nolock>> get _getwc_nolock =>
      _library.__getwc_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__putwc_nolock>> get _putwc_nolock =>
      _library.__putwc_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ungetwc_nolock>> get _ungetwc_nolock =>
      _library.__ungetwc_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vfwprintf>>
      get __stdio_common_vfwprintf => _library.___stdio_common_vfwprintf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vfwprintf_s>>
      get __stdio_common_vfwprintf_s =>
          _library.___stdio_common_vfwprintf_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vfwprintf_p>>
      get __stdio_common_vfwprintf_p =>
          _library.___stdio_common_vfwprintf_p_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vfwscanf>>
      get __stdio_common_vfwscanf => _library.___stdio_common_vfwscanf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vswprintf>>
      get __stdio_common_vswprintf => _library.___stdio_common_vswprintf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vswprintf_s>>
      get __stdio_common_vswprintf_s =>
          _library.___stdio_common_vswprintf_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vsnwprintf_s>>
      get __stdio_common_vsnwprintf_s =>
          _library.___stdio_common_vsnwprintf_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vswprintf_p>>
      get __stdio_common_vswprintf_p =>
          _library.___stdio_common_vswprintf_p_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vswscanf>>
      get __stdio_common_vswscanf => _library.___stdio_common_vswscanf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_stream_buffer_pointers>>
      get _get_stream_buffer_pointers =>
          _library.__get_stream_buffer_pointers_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_clearerr_s>> get clearerr_s =>
      _library._clearerr_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fopen_s>> get fopen_s =>
      _library._fopen_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fread_s>> get fread_s =>
      _library._fread_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_freopen_s>> get freopen_s =>
      _library._freopen_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_gets_s>> get gets_s =>
      _library._gets_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tmpfile_s>> get tmpfile_s =>
      _library._tmpfile_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tmpnam_s>> get tmpnam_s =>
      _library._tmpnam_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_clearerr>> get clearerr =>
      _library._clearerr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fclose>> get fclose =>
      _library._fclose_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fcloseall>> get _fcloseall =>
      _library.__fcloseall_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fdopen>> get _fdopen =>
      _library.__fdopen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_feof>> get feof => _library._feof_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_ferror>> get ferror =>
      _library._ferror_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fflush>> get fflush =>
      _library._fflush_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fgetc>> get fgetc =>
      _library._fgetc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fgetchar>> get _fgetchar =>
      _library.__fgetchar_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fgetpos>> get fgetpos =>
      _library._fgetpos_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fgets>> get fgets =>
      _library._fgets_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fileno>> get _fileno =>
      _library.__fileno_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__flushall>> get _flushall =>
      _library.__flushall_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fopen>> get fopen =>
      _library._fopen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fputc>> get fputc =>
      _library._fputc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fputchar>> get _fputchar =>
      _library.__fputchar_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fputs>> get fputs =>
      _library._fputs_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fread>> get fread =>
      _library._fread_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_freopen>> get freopen =>
      _library._freopen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fsopen>> get _fsopen =>
      _library.__fsopen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fsetpos>> get fsetpos =>
      _library._fsetpos_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fseek>> get fseek =>
      _library._fseek_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fseeki64>> get _fseeki64 =>
      _library.__fseeki64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_ftell>> get ftell =>
      _library._ftell_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ftelli64>> get _ftelli64 =>
      _library.__ftelli64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fwrite>> get fwrite =>
      _library._fwrite_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_getc>> get getc => _library._getc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_getchar>> get getchar =>
      _library._getchar_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__getmaxstdio>> get _getmaxstdio =>
      _library.__getmaxstdio_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__getw>> get _getw =>
      _library.__getw_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__pclose>> get _pclose =>
      _library.__pclose_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__popen>> get _popen =>
      _library.__popen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_putc>> get putc => _library._putc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_putchar>> get putchar =>
      _library._putchar_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_puts>> get puts => _library._puts_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__putw>> get _putw =>
      _library.__putw_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_remove>> get remove =>
      _library._remove_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_rename>> get rename =>
      _library._rename_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__unlink>> get _unlink =>
      _library.__unlink_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_unlink>> get unlink =>
      _library._unlink_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_rewind>> get rewind =>
      _library._rewind_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rmtmp>> get _rmtmp =>
      _library.__rmtmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_setbuf>> get setbuf =>
      _library._setbuf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__setmaxstdio>> get _setmaxstdio =>
      _library.__setmaxstdio_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_setvbuf>> get setvbuf =>
      _library._setvbuf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tempnam>> get _tempnam =>
      _library.__tempnam_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tmpfile>> get tmpfile =>
      _library._tmpfile_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tmpnam>> get tmpnam =>
      _library._tmpnam_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_ungetc>> get ungetc =>
      _library._ungetc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__lock_file>> get _lock_file =>
      _library.__lock_file_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__unlock_file>> get _unlock_file =>
      _library.__unlock_file_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fclose_nolock>> get _fclose_nolock =>
      _library.__fclose_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fflush_nolock>> get _fflush_nolock =>
      _library.__fflush_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fgetc_nolock>> get _fgetc_nolock =>
      _library.__fgetc_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fputc_nolock>> get _fputc_nolock =>
      _library.__fputc_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fread_nolock>> get _fread_nolock =>
      _library.__fread_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fread_nolock_s>> get _fread_nolock_s =>
      _library.__fread_nolock_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fseek_nolock>> get _fseek_nolock =>
      _library.__fseek_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fseeki64_nolock>>
      get _fseeki64_nolock => _library.__fseeki64_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ftell_nolock>> get _ftell_nolock =>
      _library.__ftell_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ftelli64_nolock>>
      get _ftelli64_nolock => _library.__ftelli64_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fwrite_nolock>> get _fwrite_nolock =>
      _library.__fwrite_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__getc_nolock>> get _getc_nolock =>
      _library.__getc_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__putc_nolock>> get _putc_nolock =>
      _library.__putc_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ungetc_nolock>> get _ungetc_nolock =>
      _library.__ungetc_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___p__commode>> get __p__commode =>
      _library.___p__commode_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vfprintf>>
      get __stdio_common_vfprintf => _library.___stdio_common_vfprintf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vfprintf_s>>
      get __stdio_common_vfprintf_s => _library.___stdio_common_vfprintf_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vfprintf_p>>
      get __stdio_common_vfprintf_p => _library.___stdio_common_vfprintf_p_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__set_printf_count_output>>
      get _set_printf_count_output => _library.__set_printf_count_output_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_printf_count_output>>
      get _get_printf_count_output => _library.__get_printf_count_output_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vfscanf>>
      get __stdio_common_vfscanf => _library.___stdio_common_vfscanf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vsprintf>>
      get __stdio_common_vsprintf => _library.___stdio_common_vsprintf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vsprintf_s>>
      get __stdio_common_vsprintf_s => _library.___stdio_common_vsprintf_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vsnprintf_s>>
      get __stdio_common_vsnprintf_s =>
          _library.___stdio_common_vsnprintf_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vsprintf_p>>
      get __stdio_common_vsprintf_p => _library.___stdio_common_vsprintf_p_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stdio_common_vsscanf>>
      get __stdio_common_vsscanf => _library.___stdio_common_vsscanf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tempnam>> get tempnam =>
      _library._tempnam_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fcloseall>> get fcloseall =>
      _library._fcloseall_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fdopen>> get fdopen =>
      _library._fdopen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fgetchar>> get fgetchar =>
      _library._fgetchar_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fileno>> get fileno =>
      _library._fileno_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_flushall>> get flushall =>
      _library._flushall_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fputchar>> get fputchar =>
      _library._fputchar_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_getw>> get getw => _library._getw_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_putw>> get putw => _library._putw_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_rmtmp>> get rmtmp =>
      _library._rmtmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_memchr>> get memchr =>
      _library._memchr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_memcmp>> get memcmp =>
      _library._memcmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_memcpy>> get memcpy =>
      _library._memcpy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_memmove>> get memmove =>
      _library._memmove_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_memset>> get memset =>
      _library._memset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strchr>> get strchr =>
      _library._strchr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strrchr>> get strrchr =>
      _library._strrchr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strstr>> get strstr =>
      _library._strstr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcschr>> get wcschr =>
      _library._wcschr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsrchr>> get wcsrchr =>
      _library._wcsrchr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsstr>> get wcsstr =>
      _library._wcsstr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__memicmp>> get _memicmp =>
      _library.__memicmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__memicmp_l>> get _memicmp_l =>
      _library.__memicmp_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_memccpy>> get memccpy =>
      _library._memccpy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_memicmp>> get memicmp =>
      _library._memicmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcscat_s>> get wcscat_s =>
      _library._wcscat_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcscpy_s>> get wcscpy_s =>
      _library._wcscpy_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsncat_s>> get wcsncat_s =>
      _library._wcsncat_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsncpy_s>> get wcsncpy_s =>
      _library._wcsncpy_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcstok_s>> get wcstok_s =>
      _library._wcstok_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsdup>> get _wcsdup =>
      _library.__wcsdup_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcscat>> get wcscat =>
      _library._wcscat_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcscmp>> get wcscmp =>
      _library._wcscmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcscpy>> get wcscpy =>
      _library._wcscpy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcscspn>> get wcscspn =>
      _library._wcscspn_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcslen>> get wcslen =>
      _library._wcslen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsnlen>> get wcsnlen =>
      _library._wcsnlen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsncat>> get wcsncat =>
      _library._wcsncat_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsncmp>> get wcsncmp =>
      _library._wcsncmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsncpy>> get wcsncpy =>
      _library._wcsncpy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcspbrk>> get wcspbrk =>
      _library._wcspbrk_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsspn>> get wcsspn =>
      _library._wcsspn_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcstok>> get wcstok =>
      _library._wcstok_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcserror>> get _wcserror =>
      _library.__wcserror_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcserror_s>> get _wcserror_s =>
      _library.__wcserror_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___wcserror>> get __wcserror =>
      _library.___wcserror_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___wcserror_s>> get __wcserror_s =>
      _library.___wcserror_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsicmp>> get _wcsicmp =>
      _library.__wcsicmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsicmp_l>> get _wcsicmp_l =>
      _library.__wcsicmp_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsnicmp>> get _wcsnicmp =>
      _library.__wcsnicmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsnicmp_l>> get _wcsnicmp_l =>
      _library.__wcsnicmp_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsnset_s>> get _wcsnset_s =>
      _library.__wcsnset_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsnset>> get _wcsnset =>
      _library.__wcsnset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsrev>> get _wcsrev =>
      _library.__wcsrev_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsset_s>> get _wcsset_s =>
      _library.__wcsset_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsset>> get _wcsset =>
      _library.__wcsset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcslwr_s>> get _wcslwr_s =>
      _library.__wcslwr_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcslwr>> get _wcslwr =>
      _library.__wcslwr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcslwr_s_l>> get _wcslwr_s_l =>
      _library.__wcslwr_s_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcslwr_l>> get _wcslwr_l =>
      _library.__wcslwr_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsupr_s>> get _wcsupr_s =>
      _library.__wcsupr_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsupr>> get _wcsupr =>
      _library.__wcsupr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsupr_s_l>> get _wcsupr_s_l =>
      _library.__wcsupr_s_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsupr_l>> get _wcsupr_l =>
      _library.__wcsupr_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsxfrm>> get wcsxfrm =>
      _library._wcsxfrm_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsxfrm_l>> get _wcsxfrm_l =>
      _library.__wcsxfrm_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcscoll>> get wcscoll =>
      _library._wcscoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcscoll_l>> get _wcscoll_l =>
      _library.__wcscoll_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsicoll>> get _wcsicoll =>
      _library.__wcsicoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsicoll_l>> get _wcsicoll_l =>
      _library.__wcsicoll_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsncoll>> get _wcsncoll =>
      _library.__wcsncoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsncoll_l>> get _wcsncoll_l =>
      _library.__wcsncoll_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsnicoll>> get _wcsnicoll =>
      _library.__wcsnicoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsnicoll_l>> get _wcsnicoll_l =>
      _library.__wcsnicoll_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsdup>> get wcsdup =>
      _library._wcsdup_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsicmp>> get wcsicmp =>
      _library._wcsicmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsnicmp>> get wcsnicmp =>
      _library._wcsnicmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsnset>> get wcsnset =>
      _library._wcsnset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsrev>> get wcsrev =>
      _library._wcsrev_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsset>> get wcsset =>
      _library._wcsset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcslwr>> get wcslwr =>
      _library._wcslwr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsupr>> get wcsupr =>
      _library._wcsupr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsicoll>> get wcsicoll =>
      _library._wcsicoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strcpy_s>> get strcpy_s =>
      _library._strcpy_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strcat_s>> get strcat_s =>
      _library._strcat_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strerror_s>> get strerror_s =>
      _library._strerror_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strncat_s>> get strncat_s =>
      _library._strncat_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strncpy_s>> get strncpy_s =>
      _library._strncpy_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strtok_s>> get strtok_s =>
      _library._strtok_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__memccpy>> get _memccpy =>
      _library.__memccpy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strcat>> get strcat =>
      _library._strcat_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strcmp>> get strcmp =>
      _library._strcmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strcmpi>> get _strcmpi =>
      _library.__strcmpi_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strcoll>> get strcoll =>
      _library._strcoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strcoll_l>> get _strcoll_l =>
      _library.__strcoll_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strcpy>> get strcpy =>
      _library._strcpy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strcspn>> get strcspn =>
      _library._strcspn_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strdup>> get _strdup =>
      _library.__strdup_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strerror>> get _strerror =>
      _library.__strerror_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strerror_s>> get _strerror_s =>
      _library.__strerror_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strerror>> get strerror =>
      _library._strerror_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__stricmp>> get _stricmp =>
      _library.__stricmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__stricoll>> get _stricoll =>
      _library.__stricoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__stricoll_l>> get _stricoll_l =>
      _library.__stricoll_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__stricmp_l>> get _stricmp_l =>
      _library.__stricmp_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strlen>> get strlen =>
      _library._strlen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strlwr_s>> get _strlwr_s =>
      _library.__strlwr_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strlwr>> get _strlwr =>
      _library.__strlwr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strlwr_s_l>> get _strlwr_s_l =>
      _library.__strlwr_s_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strlwr_l>> get _strlwr_l =>
      _library.__strlwr_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strncat>> get strncat =>
      _library._strncat_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strncmp>> get strncmp =>
      _library._strncmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strnicmp>> get _strnicmp =>
      _library.__strnicmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strnicmp_l>> get _strnicmp_l =>
      _library.__strnicmp_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strnicoll>> get _strnicoll =>
      _library.__strnicoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strnicoll_l>> get _strnicoll_l =>
      _library.__strnicoll_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strncoll>> get _strncoll =>
      _library.__strncoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strncoll_l>> get _strncoll_l =>
      _library.__strncoll_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___strncnt>> get __strncnt =>
      _library.___strncnt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strncpy>> get strncpy =>
      _library._strncpy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strnlen>> get strnlen =>
      _library._strnlen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strnset_s>> get _strnset_s =>
      _library.__strnset_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strnset>> get _strnset =>
      _library.__strnset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strpbrk>> get strpbrk =>
      _library._strpbrk_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strrev>> get _strrev =>
      _library.__strrev_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strset_s>> get _strset_s =>
      _library.__strset_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strset>> get _strset =>
      _library.__strset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strspn>> get strspn =>
      _library._strspn_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strtok>> get strtok =>
      _library._strtok_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strupr_s>> get _strupr_s =>
      _library.__strupr_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strupr>> get _strupr =>
      _library.__strupr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strupr_s_l>> get _strupr_s_l =>
      _library.__strupr_s_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strupr_l>> get _strupr_l =>
      _library.__strupr_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strxfrm>> get strxfrm =>
      _library._strxfrm_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strxfrm_l>> get _strxfrm_l =>
      _library.__strxfrm_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strdup>> get strdup =>
      _library._strdup_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strcmpi>> get strcmpi =>
      _library._strcmpi_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_stricmp>> get stricmp =>
      _library._stricmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strlwr>> get strlwr =>
      _library._strlwr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strnicmp>> get strnicmp =>
      _library._strnicmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strnset>> get strnset =>
      _library._strnset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strrev>> get strrev =>
      _library._strrev_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strset>> get strset =>
      _library._strset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strupr>> get strupr =>
      _library._strupr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__cputws>> get _cputws =>
      _library.__cputws_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__getwch>> get _getwch =>
      _library.__getwch_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__getwche>> get _getwche =>
      _library.__getwche_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__putwch>> get _putwch =>
      _library.__putwch_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ungetwch>> get _ungetwch =>
      _library.__ungetwch_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__getwch_nolock>> get _getwch_nolock =>
      _library.__getwch_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__getwche_nolock>> get _getwche_nolock =>
      _library.__getwche_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__putwch_nolock>> get _putwch_nolock =>
      _library.__putwch_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ungetwch_nolock>>
      get _ungetwch_nolock => _library.__ungetwch_nolock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___conio_common_vcwprintf>>
      get __conio_common_vcwprintf => _library.___conio_common_vcwprintf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___conio_common_vcwprintf_s>>
      get __conio_common_vcwprintf_s =>
          _library.___conio_common_vcwprintf_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___conio_common_vcwprintf_p>>
      get __conio_common_vcwprintf_p =>
          _library.___conio_common_vcwprintf_p_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___conio_common_vcwscanf>>
      get __conio_common_vcwscanf => _library.___conio_common_vcwscanf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___pctype_func>> get __pctype_func =>
      _library.___pctype_func_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___pwctype_func>> get __pwctype_func =>
      _library.___pwctype_func_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_iswalnum>> get iswalnum =>
      _library._iswalnum_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_iswalpha>> get iswalpha =>
      _library._iswalpha_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_iswascii>> get iswascii =>
      _library._iswascii_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_iswblank>> get iswblank =>
      _library._iswblank_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_iswcntrl>> get iswcntrl =>
      _library._iswcntrl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_iswdigit>> get iswdigit =>
      _library._iswdigit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_iswgraph>> get iswgraph =>
      _library._iswgraph_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_iswlower>> get iswlower =>
      _library._iswlower_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_iswprint>> get iswprint =>
      _library._iswprint_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_iswpunct>> get iswpunct =>
      _library._iswpunct_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_iswspace>> get iswspace =>
      _library._iswspace_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_iswupper>> get iswupper =>
      _library._iswupper_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_iswxdigit>> get iswxdigit =>
      _library._iswxdigit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___iswcsymf>> get __iswcsymf =>
      _library.___iswcsymf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___iswcsym>> get __iswcsym =>
      _library.___iswcsym_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iswalnum_l>> get _iswalnum_l =>
      _library.__iswalnum_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iswalpha_l>> get _iswalpha_l =>
      _library.__iswalpha_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iswblank_l>> get _iswblank_l =>
      _library.__iswblank_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iswcntrl_l>> get _iswcntrl_l =>
      _library.__iswcntrl_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iswdigit_l>> get _iswdigit_l =>
      _library.__iswdigit_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iswgraph_l>> get _iswgraph_l =>
      _library.__iswgraph_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iswlower_l>> get _iswlower_l =>
      _library.__iswlower_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iswprint_l>> get _iswprint_l =>
      _library.__iswprint_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iswpunct_l>> get _iswpunct_l =>
      _library.__iswpunct_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iswspace_l>> get _iswspace_l =>
      _library.__iswspace_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iswupper_l>> get _iswupper_l =>
      _library.__iswupper_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iswxdigit_l>> get _iswxdigit_l =>
      _library.__iswxdigit_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iswcsymf_l>> get _iswcsymf_l =>
      _library.__iswcsymf_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iswcsym_l>> get _iswcsym_l =>
      _library.__iswcsym_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_towupper>> get towupper =>
      _library._towupper_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_towlower>> get towlower =>
      _library._towlower_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_iswctype>> get iswctype =>
      _library._iswctype_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__towupper_l>> get _towupper_l =>
      _library.__towupper_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__towlower_l>> get _towlower_l =>
      _library.__towlower_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iswctype_l>> get _iswctype_l =>
      _library.__iswctype_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_isleadbyte>> get isleadbyte =>
      _library._isleadbyte_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__isleadbyte_l>> get _isleadbyte_l =>
      _library.__isleadbyte_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_is_wctype>> get is_wctype =>
      _library._is_wctype_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wgetcwd>> get _wgetcwd =>
      _library.__wgetcwd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wgetdcwd>> get _wgetdcwd =>
      _library.__wgetdcwd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wchdir>> get _wchdir =>
      _library.__wchdir_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wmkdir>> get _wmkdir =>
      _library.__wmkdir_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wrmdir>> get _wrmdir =>
      _library.__wrmdir_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__waccess>> get _waccess =>
      _library.__waccess_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__waccess_s>> get _waccess_s =>
      _library.__waccess_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wchmod>> get _wchmod =>
      _library.__wchmod_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcreat>> get _wcreat =>
      _library.__wcreat_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wfindfirst32>> get _wfindfirst32 =>
      _library.__wfindfirst32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wfindnext32>> get _wfindnext32 =>
      _library.__wfindnext32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wunlink>> get _wunlink =>
      _library.__wunlink_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wrename>> get _wrename =>
      _library.__wrename_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wmktemp_s>> get _wmktemp_s =>
      _library.__wmktemp_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wmktemp>> get _wmktemp =>
      _library.__wmktemp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wfindfirst32i64>>
      get _wfindfirst32i64 => _library.__wfindfirst32i64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wfindfirst64i32>>
      get _wfindfirst64i32 => _library.__wfindfirst64i32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wfindfirst64>> get _wfindfirst64 =>
      _library.__wfindfirst64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wfindnext32i64>> get _wfindnext32i64 =>
      _library.__wfindnext32i64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wfindnext64i32>> get _wfindnext64i32 =>
      _library.__wfindnext64i32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wfindnext64>> get _wfindnext64 =>
      _library.__wfindnext64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wsopen_s>> get _wsopen_s =>
      _library.__wsopen_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wsopen_dispatch>>
      get _wsopen_dispatch => _library.__wsopen_dispatch_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wopen>> get _wopen =>
      _library.__wopen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wsopen>> get _wsopen =>
      _library.__wsopen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wexecl>> get _wexecl =>
      _library.__wexecl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wexecle>> get _wexecle =>
      _library.__wexecle_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wexeclp>> get _wexeclp =>
      _library.__wexeclp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wexeclpe>> get _wexeclpe =>
      _library.__wexeclpe_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wexecv>> get _wexecv =>
      _library.__wexecv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wexecve>> get _wexecve =>
      _library.__wexecve_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wexecvp>> get _wexecvp =>
      _library.__wexecvp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wexecvpe>> get _wexecvpe =>
      _library.__wexecvpe_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wspawnl>> get _wspawnl =>
      _library.__wspawnl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wspawnle>> get _wspawnle =>
      _library.__wspawnle_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wspawnlp>> get _wspawnlp =>
      _library.__wspawnlp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wspawnlpe>> get _wspawnlpe =>
      _library.__wspawnlpe_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wspawnv>> get _wspawnv =>
      _library.__wspawnv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wspawnve>> get _wspawnve =>
      _library.__wspawnve_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wspawnvp>> get _wspawnvp =>
      _library.__wspawnvp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wspawnvpe>> get _wspawnvpe =>
      _library.__wspawnvpe_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wasctime>> get _wasctime =>
      _library.__wasctime_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wasctime_s>> get _wasctime_s =>
      _library.__wasctime_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsftime>> get wcsftime =>
      _library._wcsftime_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcsftime_l>> get _wcsftime_l =>
      _library.__wcsftime_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wctime32>> get _wctime32 =>
      _library.__wctime32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wctime32_s>> get _wctime32_s =>
      _library.__wctime32_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wctime64>> get _wctime64 =>
      _library.__wctime64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wctime64_s>> get _wctime64_s =>
      _library.__wctime64_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wstrdate_s>> get _wstrdate_s =>
      _library.__wstrdate_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wstrdate>> get _wstrdate =>
      _library.__wstrdate_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wstrtime_s>> get _wstrtime_s =>
      _library.__wstrtime_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wstrtime>> get _wstrtime =>
      _library.__wstrtime_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fstat32>> get _fstat32 =>
      _library.__fstat32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fstat32i64>> get _fstat32i64 =>
      _library.__fstat32i64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fstat64i32>> get _fstat64i32 =>
      _library.__fstat64i32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fstat64>> get _fstat64 =>
      _library.__fstat64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__stat32_1>> get _stat32_1 =>
      _library.__stat32_1_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__stat32i64_1>> get _stat32i64_1 =>
      _library.__stat32i64_1_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__stat64i32_1>> get _stat64i32_1 =>
      _library.__stat64i32_1_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__stat64_1>> get _stat64_1 =>
      _library.__stat64_1_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wstat32>> get _wstat32 =>
      _library.__wstat32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wstat32i64>> get _wstat32i64 =>
      _library.__wstat32i64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wstat64i32>> get _wstat64i32 =>
      _library.__wstat64i32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wstat64>> get _wstat64 =>
      _library.__wstat64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wsetlocale>> get _wsetlocale =>
      _library.__wsetlocale_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wcreate_locale>> get _wcreate_locale =>
      _library.__wcreate_locale_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_btowc>> get btowc =>
      _library._btowc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_mbrlen>> get mbrlen =>
      _library._mbrlen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_mbrtowc>> get mbrtowc =>
      _library._mbrtowc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_mbsrtowcs_s>> get mbsrtowcs_s =>
      _library._mbsrtowcs_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_mbsrtowcs>> get mbsrtowcs =>
      _library._mbsrtowcs_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcrtomb_s>> get wcrtomb_s =>
      _library._wcrtomb_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcrtomb>> get wcrtomb =>
      _library._wcrtomb_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsrtombs_s>> get wcsrtombs_s =>
      _library._wcsrtombs_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wcsrtombs>> get wcsrtombs =>
      _library._wcsrtombs_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wctob>> get wctob =>
      _library._wctob_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wmemcpy_s>> get wmemcpy_s =>
      _library._wmemcpy_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_wmemmove_s>> get wmemmove_s =>
      _library._wmemmove_s_ptr;
  ffi.Pointer<ffi.Int32> get _Mbstatet_1 => _library.__Mbstatet_1;
  ffi.Pointer<ffi.Int32> get __type_info_root_node =>
      _library.___type_info_root_node;
  ffi.Pointer<ffi.NativeFunction<Native___std_type_info_compare>>
      get __std_type_info_compare => _library.___std_type_info_compare_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___std_type_info_hash>>
      get __std_type_info_hash => _library.___std_type_info_hash_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___std_type_info_name>>
      get __std_type_info_name => _library.___std_type_info_name_ptr;
  ffi.Pointer<ffi.Int32> get type_info => _library._type_info;
  ffi.Pointer<ffi.NativeFunction<Native__controlfp>> get _controlfp =>
      _library.__controlfp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__set_controlfp>> get _set_controlfp =>
      _library.__set_controlfp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__controlfp_s>> get _controlfp_s =>
      _library.__controlfp_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__statusfp>> get _statusfp =>
      _library.__statusfp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fpreset>> get _fpreset =>
      _library.__fpreset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__control87>> get _control87 =>
      _library.__control87_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___fpecode>> get __fpecode =>
      _library.___fpecode_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___fpe_flt_rounds>>
      get __fpe_flt_rounds => _library.___fpe_flt_rounds_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__scalb>> get _scalb =>
      _library.__scalb_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__logb>> get _logb =>
      _library.__logb_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__nextafter>> get _nextafter =>
      _library.__nextafter_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__finite>> get _finite =>
      _library.__finite_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__isnan>> get _isnan =>
      _library.__isnan_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fpclass>> get _fpclass =>
      _library.__fpclass_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__scalbf>> get _scalbf =>
      _library.__scalbf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_fpreset>> get fpreset =>
      _library._fpreset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__BitScanForward>> get _BitScanForward =>
      _library.__BitScanForward_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__BitScanForward64>>
      get _BitScanForward64 => _library.__BitScanForward64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__BitScanReverse>> get _BitScanReverse =>
      _library.__BitScanReverse_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__BitScanReverse64>>
      get _BitScanReverse64 => _library.__BitScanReverse64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bittest>> get _bittest =>
      _library.__bittest_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedAnd>> get _InterlockedAnd =>
      _library.__InterlockedAnd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedAnd16>>
      get _InterlockedAnd16 => _library.__InterlockedAnd16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedAnd64>>
      get _InterlockedAnd64 => _library.__InterlockedAnd64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedAnd8>>
      get _InterlockedAnd8 => _library.__InterlockedAnd8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedCompareExchange>>
      get _InterlockedCompareExchange =>
          _library.__InterlockedCompareExchange_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedCompareExchange16>>
      get _InterlockedCompareExchange16 =>
          _library.__InterlockedCompareExchange16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedCompareExchange64>>
      get _InterlockedCompareExchange64 =>
          _library.__InterlockedCompareExchange64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedCompareExchange8>>
      get _InterlockedCompareExchange8 =>
          _library.__InterlockedCompareExchange8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedCompareExchange128>>
      get _InterlockedCompareExchange128 =>
          _library.__InterlockedCompareExchange128_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedDecrement>>
      get _InterlockedDecrement => _library.__InterlockedDecrement_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedDecrement16>>
      get _InterlockedDecrement16 => _library.__InterlockedDecrement16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedDecrement64>>
      get _InterlockedDecrement64 => _library.__InterlockedDecrement64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchange>>
      get _InterlockedExchange => _library.__InterlockedExchange_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchange16>>
      get _InterlockedExchange16 => _library.__InterlockedExchange16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchange64>>
      get _InterlockedExchange64 => _library.__InterlockedExchange64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchange8>>
      get _InterlockedExchange8 => _library.__InterlockedExchange8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchangeAdd>>
      get _InterlockedExchangeAdd => _library.__InterlockedExchangeAdd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchangeAdd16>>
      get _InterlockedExchangeAdd16 => _library.__InterlockedExchangeAdd16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchangeAdd64>>
      get _InterlockedExchangeAdd64 => _library.__InterlockedExchangeAdd64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchangeAdd8>>
      get _InterlockedExchangeAdd8 => _library.__InterlockedExchangeAdd8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedIncrement>>
      get _InterlockedIncrement => _library.__InterlockedIncrement_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedIncrement16>>
      get _InterlockedIncrement16 => _library.__InterlockedIncrement16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedIncrement64>>
      get _InterlockedIncrement64 => _library.__InterlockedIncrement64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedOr>> get _InterlockedOr =>
      _library.__InterlockedOr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedOr16>>
      get _InterlockedOr16 => _library.__InterlockedOr16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedOr64>>
      get _InterlockedOr64 => _library.__InterlockedOr64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedOr8>> get _InterlockedOr8 =>
      _library.__InterlockedOr8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedXor>> get _InterlockedXor =>
      _library.__InterlockedXor_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedXor16>>
      get _InterlockedXor16 => _library.__InterlockedXor16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedXor64>>
      get _InterlockedXor64 => _library.__InterlockedXor64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedXor8>>
      get _InterlockedXor8 => _library.__InterlockedXor8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ReadWriteBarrier>>
      get _ReadWriteBarrier => _library.__ReadWriteBarrier_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___iso_volatile_load16>>
      get __iso_volatile_load16 => _library.___iso_volatile_load16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___iso_volatile_load32>>
      get __iso_volatile_load32 => _library.___iso_volatile_load32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___iso_volatile_load64>>
      get __iso_volatile_load64 => _library.___iso_volatile_load64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___iso_volatile_load8>>
      get __iso_volatile_load8 => _library.___iso_volatile_load8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___iso_volatile_store16>>
      get __iso_volatile_store16 => _library.___iso_volatile_store16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___iso_volatile_store32>>
      get __iso_volatile_store32 => _library.___iso_volatile_store32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___iso_volatile_store64>>
      get __iso_volatile_store64 => _library.___iso_volatile_store64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___iso_volatile_store8>>
      get __iso_volatile_store8 => _library.___iso_volatile_store8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__interlockedbittestandset>>
      get _interlockedbittestandset => _library.__interlockedbittestandset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___lzcnt>> get __lzcnt =>
      _library.___lzcnt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___lzcnt16>> get __lzcnt16 =>
      _library.___lzcnt16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___lzcnt64>> get __lzcnt64 =>
      _library.___lzcnt64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___popcnt>> get __popcnt =>
      _library.___popcnt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___popcnt16>> get __popcnt16 =>
      _library.___popcnt16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___popcnt64>> get __popcnt64 =>
      _library.___popcnt64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___shiftright128>> get __shiftright128 =>
      _library.___shiftright128_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__umul128>> get _umul128 =>
      _library.__umul128_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___ceil>> get __ceil =>
      _library.___ceil_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___ceilf>> get __ceilf =>
      _library.___ceilf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___floor>> get __floor =>
      _library.___floor_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___floorf>> get __floorf =>
      _library.___floorf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___round>> get __round =>
      _library.___round_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___roundf>> get __roundf =>
      _library.___roundf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___trunc>> get __trunc =>
      _library.___trunc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___truncf>> get __truncf =>
      _library.___truncf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___copysign>> get __copysign =>
      _library.___copysign_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___copysignf>> get __copysignf =>
      _library.___copysignf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___signbitvalue>> get __signbitvalue =>
      _library.___signbitvalue_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___signbitvaluef>> get __signbitvaluef =>
      _library.___signbitvaluef_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__isctype_l>> get _isctype_l =>
      _library.__isctype_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_isalpha>> get isalpha =>
      _library._isalpha_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__isalpha_l>> get _isalpha_l =>
      _library.__isalpha_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_isupper>> get isupper =>
      _library._isupper_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__isupper_l>> get _isupper_l =>
      _library.__isupper_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_islower>> get islower =>
      _library._islower_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__islower_l>> get _islower_l =>
      _library.__islower_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_isdigit>> get isdigit =>
      _library._isdigit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__isdigit_l>> get _isdigit_l =>
      _library.__isdigit_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_isxdigit>> get isxdigit =>
      _library._isxdigit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__isxdigit_l>> get _isxdigit_l =>
      _library.__isxdigit_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_isspace>> get isspace =>
      _library._isspace_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__isspace_l>> get _isspace_l =>
      _library.__isspace_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_ispunct>> get ispunct =>
      _library._ispunct_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ispunct_l>> get _ispunct_l =>
      _library.__ispunct_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_isblank>> get isblank =>
      _library._isblank_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__isblank_l>> get _isblank_l =>
      _library.__isblank_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_isalnum>> get isalnum =>
      _library._isalnum_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__isalnum_l>> get _isalnum_l =>
      _library.__isalnum_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_isprint>> get isprint =>
      _library._isprint_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__isprint_l>> get _isprint_l =>
      _library.__isprint_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_isgraph>> get isgraph =>
      _library._isgraph_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__isgraph_l>> get _isgraph_l =>
      _library.__isgraph_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_iscntrl>> get iscntrl =>
      _library._iscntrl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__iscntrl_l>> get _iscntrl_l =>
      _library.__iscntrl_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_toupper>> get toupper =>
      _library._toupper_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tolower>> get tolower =>
      _library._tolower_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tolower>> get _tolower =>
      _library.__tolower_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tolower_l>> get _tolower_l =>
      _library.__tolower_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__toupper>> get _toupper =>
      _library.__toupper_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__toupper_l>> get _toupper_l =>
      _library.__toupper_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___isascii>> get __isascii =>
      _library.___isascii_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___toascii>> get __toascii =>
      _library.___toascii_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___iscsymf>> get __iscsymf =>
      _library.___iscsymf_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___iscsym>> get __iscsym =>
      _library.___iscsym_ptr;
  ffi.Pointer<ffi.Int32> get net => _library._net;
  ffi.Pointer<ffi.Int32> get Cronet_BufferPtr => _library._Cronet_BufferPtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Buffer_Destroy>>
      get Cronet_Buffer_Destroy => _library._Cronet_Buffer_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Buffer_SetClientContext>>
      get Cronet_Buffer_SetClientContext =>
          _library._Cronet_Buffer_SetClientContext_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_ClientContext =>
      _library._Cronet_ClientContext;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Buffer_InitWithDataAndCallback>>
      get Cronet_Buffer_InitWithDataAndCallback =>
          _library._Cronet_Buffer_InitWithDataAndCallback_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Buffer_InitWithAlloc>>
      get Cronet_Buffer_InitWithAlloc =>
          _library._Cronet_Buffer_InitWithAlloc_ptr;
  ffi.Pointer<ffi.Int32> get uint64_t => _library._uint64_t;
  ffi.Pointer<ffi.Int32> get Cronet_RawDataPtr => _library._Cronet_RawDataPtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_BufferCallback_Destroy>>
      get Cronet_BufferCallback_Destroy =>
          _library._Cronet_BufferCallback_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_BufferCallback_SetClientContext>>
      get Cronet_BufferCallback_SetClientContext =>
          _library._Cronet_BufferCallback_SetClientContext_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_BufferCallback_OnDestroy>>
      get Cronet_BufferCallback_OnDestroy =>
          _library._Cronet_BufferCallback_OnDestroy_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_BufferCallbackPtr =>
      _library._Cronet_BufferCallbackPtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Runnable_Destroy>>
      get Cronet_Runnable_Destroy => _library._Cronet_Runnable_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Runnable_SetClientContext>>
      get Cronet_Runnable_SetClientContext =>
          _library._Cronet_Runnable_SetClientContext_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Runnable_Run>>
      get Cronet_Runnable_Run => _library._Cronet_Runnable_Run_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_RunnablePtr => _library._Cronet_RunnablePtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Executor_Destroy>>
      get Cronet_Executor_Destroy => _library._Cronet_Executor_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Executor_SetClientContext>>
      get Cronet_Executor_SetClientContext =>
          _library._Cronet_Executor_SetClientContext_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Executor_Execute>>
      get Cronet_Executor_Execute => _library._Cronet_Executor_Execute_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_ExecutorPtr => _library._Cronet_ExecutorPtr;
  ffi.Pointer<ffi.Int32> get Cronet_EnginePtr => _library._Cronet_EnginePtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Engine_Destroy>>
      get Cronet_Engine_Destroy => _library._Cronet_Engine_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Engine_SetClientContext>>
      get Cronet_Engine_SetClientContext =>
          _library._Cronet_Engine_SetClientContext_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_RESULT_1 => _library._Cronet_RESULT_1;
  ffi.Pointer<ffi.Int32> get bool => _library._bool;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Engine_StopNetLog>>
      get Cronet_Engine_StopNetLog => _library._Cronet_Engine_StopNetLog_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_String => _library._Cronet_String;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_Engine_AddRequestFinishedListener>>
      get Cronet_Engine_AddRequestFinishedListener =>
          _library._Cronet_Engine_AddRequestFinishedListener_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_Engine_RemoveRequestFinishedListener>>
      get Cronet_Engine_RemoveRequestFinishedListener =>
          _library._Cronet_Engine_RemoveRequestFinishedListener_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_UrlRequestStatusListener_Destroy>>
      get Cronet_UrlRequestStatusListener_Destroy =>
          _library._Cronet_UrlRequestStatusListener_Destroy_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestStatusListener_SetClientContext>>
      get Cronet_UrlRequestStatusListener_SetClientContext =>
          _library._Cronet_UrlRequestStatusListener_SetClientContext_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_UrlRequestStatusListener_OnStatus>>
      get Cronet_UrlRequestStatusListener_OnStatus =>
          _library._Cronet_UrlRequestStatusListener_OnStatus_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_UrlRequestStatusListenerPtr =>
      _library._Cronet_UrlRequestStatusListenerPtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UrlRequestCallback_Destroy>>
      get Cronet_UrlRequestCallback_Destroy =>
          _library._Cronet_UrlRequestCallback_Destroy_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_UrlRequestCallback_SetClientContext>>
      get Cronet_UrlRequestCallback_SetClientContext =>
          _library._Cronet_UrlRequestCallback_SetClientContext_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestCallback_OnRedirectReceived>>
      get Cronet_UrlRequestCallback_OnRedirectReceived =>
          _library._Cronet_UrlRequestCallback_OnRedirectReceived_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestCallback_OnResponseStarted>>
      get Cronet_UrlRequestCallback_OnResponseStarted =>
          _library._Cronet_UrlRequestCallback_OnResponseStarted_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_UrlRequestCallback_OnReadCompleted>>
      get Cronet_UrlRequestCallback_OnReadCompleted =>
          _library._Cronet_UrlRequestCallback_OnReadCompleted_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UrlRequestCallback_OnSucceeded>>
      get Cronet_UrlRequestCallback_OnSucceeded =>
          _library._Cronet_UrlRequestCallback_OnSucceeded_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UrlRequestCallback_OnFailed>>
      get Cronet_UrlRequestCallback_OnFailed =>
          _library._Cronet_UrlRequestCallback_OnFailed_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UrlRequestCallback_OnCanceled>>
      get Cronet_UrlRequestCallback_OnCanceled =>
          _library._Cronet_UrlRequestCallback_OnCanceled_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_UrlRequestCallbackPtr =>
      _library._Cronet_UrlRequestCallbackPtr;
  ffi.Pointer<ffi.Int32> get Cronet_UploadDataSinkPtr =>
      _library._Cronet_UploadDataSinkPtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UploadDataSink_Destroy>>
      get Cronet_UploadDataSink_Destroy =>
          _library._Cronet_UploadDataSink_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UploadDataSink_SetClientContext>>
      get Cronet_UploadDataSink_SetClientContext =>
          _library._Cronet_UploadDataSink_SetClientContext_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UploadDataSink_OnReadSucceeded>>
      get Cronet_UploadDataSink_OnReadSucceeded =>
          _library._Cronet_UploadDataSink_OnReadSucceeded_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UploadDataSink_OnReadError>>
      get Cronet_UploadDataSink_OnReadError =>
          _library._Cronet_UploadDataSink_OnReadError_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_UploadDataSink_OnRewindSucceeded>>
      get Cronet_UploadDataSink_OnRewindSucceeded =>
          _library._Cronet_UploadDataSink_OnRewindSucceeded_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UploadDataSink_OnRewindError>>
      get Cronet_UploadDataSink_OnRewindError =>
          _library._Cronet_UploadDataSink_OnRewindError_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UploadDataProvider_Destroy>>
      get Cronet_UploadDataProvider_Destroy =>
          _library._Cronet_UploadDataProvider_Destroy_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_UploadDataProvider_SetClientContext>>
      get Cronet_UploadDataProvider_SetClientContext =>
          _library._Cronet_UploadDataProvider_SetClientContext_ptr;
  ffi.Pointer<ffi.Int32> get int64_t => _library._int64_t;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UploadDataProvider_Read>>
      get Cronet_UploadDataProvider_Read =>
          _library._Cronet_UploadDataProvider_Read_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UploadDataProvider_Rewind>>
      get Cronet_UploadDataProvider_Rewind =>
          _library._Cronet_UploadDataProvider_Rewind_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UploadDataProvider_Close>>
      get Cronet_UploadDataProvider_Close =>
          _library._Cronet_UploadDataProvider_Close_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_UploadDataProviderPtr =>
      _library._Cronet_UploadDataProviderPtr;
  ffi.Pointer<ffi.Int32> get Cronet_UrlRequestPtr =>
      _library._Cronet_UrlRequestPtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UrlRequest_Destroy>>
      get Cronet_UrlRequest_Destroy => _library._Cronet_UrlRequest_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UrlRequest_SetClientContext>>
      get Cronet_UrlRequest_SetClientContext =>
          _library._Cronet_UrlRequest_SetClientContext_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UrlRequest_Cancel>>
      get Cronet_UrlRequest_Cancel => _library._Cronet_UrlRequest_Cancel_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UrlRequest_GetStatus>>
      get Cronet_UrlRequest_GetStatus =>
          _library._Cronet_UrlRequest_GetStatus_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_RequestFinishedInfoListener_Destroy>>
      get Cronet_RequestFinishedInfoListener_Destroy =>
          _library._Cronet_RequestFinishedInfoListener_Destroy_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_RequestFinishedInfoListener_SetClientContext>>
      get Cronet_RequestFinishedInfoListener_SetClientContext =>
          _library._Cronet_RequestFinishedInfoListener_SetClientContext_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_RequestFinishedInfoListener_OnRequestFinished>>
      get Cronet_RequestFinishedInfoListener_OnRequestFinished =>
          _library._Cronet_RequestFinishedInfoListener_OnRequestFinished_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_RequestFinishedInfoListenerPtr =>
      _library._Cronet_RequestFinishedInfoListenerPtr;
  ffi.Pointer<ffi.Int32> get Cronet_ErrorPtr => _library._Cronet_ErrorPtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Error_Destroy>>
      get Cronet_Error_Destroy => _library._Cronet_Error_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Error_error_code_set>>
      get Cronet_Error_error_code_set =>
          _library._Cronet_Error_error_code_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Error_message_set>>
      get Cronet_Error_message_set => _library._Cronet_Error_message_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Error_internal_error_code_set>>
      get Cronet_Error_internal_error_code_set =>
          _library._Cronet_Error_internal_error_code_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Error_immediately_retryable_set>>
      get Cronet_Error_immediately_retryable_set =>
          _library._Cronet_Error_immediately_retryable_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_Error_quic_detailed_error_code_set>>
      get Cronet_Error_quic_detailed_error_code_set =>
          _library._Cronet_Error_quic_detailed_error_code_set_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_Error_ERROR_CODE_1 =>
      _library._Cronet_Error_ERROR_CODE_1;
  ffi.Pointer<ffi.Int32> get int32_t => _library._int32_t;
  ffi.Pointer<ffi.Int32> get Cronet_QuicHintPtr => _library._Cronet_QuicHintPtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_QuicHint_Destroy>>
      get Cronet_QuicHint_Destroy => _library._Cronet_QuicHint_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_QuicHint_host_set>>
      get Cronet_QuicHint_host_set => _library._Cronet_QuicHint_host_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_QuicHint_port_set>>
      get Cronet_QuicHint_port_set => _library._Cronet_QuicHint_port_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_QuicHint_alternate_port_set>>
      get Cronet_QuicHint_alternate_port_set =>
          _library._Cronet_QuicHint_alternate_port_set_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_PublicKeyPinsPtr =>
      _library._Cronet_PublicKeyPinsPtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_PublicKeyPins_Destroy>>
      get Cronet_PublicKeyPins_Destroy =>
          _library._Cronet_PublicKeyPins_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_PublicKeyPins_host_set>>
      get Cronet_PublicKeyPins_host_set =>
          _library._Cronet_PublicKeyPins_host_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_PublicKeyPins_pins_sha256_add>>
      get Cronet_PublicKeyPins_pins_sha256_add =>
          _library._Cronet_PublicKeyPins_pins_sha256_add_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_PublicKeyPins_include_subdomains_set>>
      get Cronet_PublicKeyPins_include_subdomains_set =>
          _library._Cronet_PublicKeyPins_include_subdomains_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_PublicKeyPins_expiration_date_set>>
      get Cronet_PublicKeyPins_expiration_date_set =>
          _library._Cronet_PublicKeyPins_expiration_date_set_ptr;
  ffi.Pointer<ffi.Int32> get uint32_t => _library._uint32_t;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_PublicKeyPins_pins_sha256_clear>>
      get Cronet_PublicKeyPins_pins_sha256_clear =>
          _library._Cronet_PublicKeyPins_pins_sha256_clear_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_EngineParamsPtr =>
      _library._Cronet_EngineParamsPtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_EngineParams_Destroy>>
      get Cronet_EngineParams_Destroy =>
          _library._Cronet_EngineParams_Destroy_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_EngineParams_enable_check_result_set>>
      get Cronet_EngineParams_enable_check_result_set =>
          _library._Cronet_EngineParams_enable_check_result_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_EngineParams_user_agent_set>>
      get Cronet_EngineParams_user_agent_set =>
          _library._Cronet_EngineParams_user_agent_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_EngineParams_accept_language_set>>
      get Cronet_EngineParams_accept_language_set =>
          _library._Cronet_EngineParams_accept_language_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_EngineParams_storage_path_set>>
      get Cronet_EngineParams_storage_path_set =>
          _library._Cronet_EngineParams_storage_path_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_EngineParams_enable_quic_set>>
      get Cronet_EngineParams_enable_quic_set =>
          _library._Cronet_EngineParams_enable_quic_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_EngineParams_enable_http2_set>>
      get Cronet_EngineParams_enable_http2_set =>
          _library._Cronet_EngineParams_enable_http2_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_EngineParams_enable_brotli_set>>
      get Cronet_EngineParams_enable_brotli_set =>
          _library._Cronet_EngineParams_enable_brotli_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_EngineParams_http_cache_mode_set>>
      get Cronet_EngineParams_http_cache_mode_set =>
          _library._Cronet_EngineParams_http_cache_mode_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_EngineParams_http_cache_max_size_set>>
      get Cronet_EngineParams_http_cache_max_size_set =>
          _library._Cronet_EngineParams_http_cache_max_size_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_EngineParams_quic_hints_add>>
      get Cronet_EngineParams_quic_hints_add =>
          _library._Cronet_EngineParams_quic_hints_add_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_EngineParams_public_key_pins_add>>
      get Cronet_EngineParams_public_key_pins_add =>
          _library._Cronet_EngineParams_public_key_pins_add_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set>>
      get Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set =>
          _library
              ._Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_EngineParams_network_thread_priority_set>>
      get Cronet_EngineParams_network_thread_priority_set =>
          _library._Cronet_EngineParams_network_thread_priority_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_EngineParams_experimental_options_set>>
      get Cronet_EngineParams_experimental_options_set =>
          _library._Cronet_EngineParams_experimental_options_set_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_EngineParams_HTTP_CACHE_MODE_1 =>
      _library._Cronet_EngineParams_HTTP_CACHE_MODE_1;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_EngineParams_quic_hints_clear>>
      get Cronet_EngineParams_quic_hints_clear =>
          _library._Cronet_EngineParams_quic_hints_clear_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_EngineParams_public_key_pins_clear>>
      get Cronet_EngineParams_public_key_pins_clear =>
          _library._Cronet_EngineParams_public_key_pins_clear_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_EngineParams_network_thread_priority_get>>
      get Cronet_EngineParams_network_thread_priority_get =>
          _library._Cronet_EngineParams_network_thread_priority_get_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_HttpHeaderPtr =>
      _library._Cronet_HttpHeaderPtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_HttpHeader_Destroy>>
      get Cronet_HttpHeader_Destroy => _library._Cronet_HttpHeader_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_HttpHeader_name_set>>
      get Cronet_HttpHeader_name_set =>
          _library._Cronet_HttpHeader_name_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_HttpHeader_value_set>>
      get Cronet_HttpHeader_value_set =>
          _library._Cronet_HttpHeader_value_set_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_UrlResponseInfoPtr =>
      _library._Cronet_UrlResponseInfoPtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UrlResponseInfo_Destroy>>
      get Cronet_UrlResponseInfo_Destroy =>
          _library._Cronet_UrlResponseInfo_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UrlResponseInfo_url_set>>
      get Cronet_UrlResponseInfo_url_set =>
          _library._Cronet_UrlResponseInfo_url_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UrlResponseInfo_url_chain_add>>
      get Cronet_UrlResponseInfo_url_chain_add =>
          _library._Cronet_UrlResponseInfo_url_chain_add_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_http_status_code_set>>
      get Cronet_UrlResponseInfo_http_status_code_set =>
          _library._Cronet_UrlResponseInfo_http_status_code_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_http_status_text_set>>
      get Cronet_UrlResponseInfo_http_status_text_set =>
          _library._Cronet_UrlResponseInfo_http_status_text_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_all_headers_list_add>>
      get Cronet_UrlResponseInfo_all_headers_list_add =>
          _library._Cronet_UrlResponseInfo_all_headers_list_add_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UrlResponseInfo_was_cached_set>>
      get Cronet_UrlResponseInfo_was_cached_set =>
          _library._Cronet_UrlResponseInfo_was_cached_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_negotiated_protocol_set>>
      get Cronet_UrlResponseInfo_negotiated_protocol_set =>
          _library._Cronet_UrlResponseInfo_negotiated_protocol_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_UrlResponseInfo_proxy_server_set>>
      get Cronet_UrlResponseInfo_proxy_server_set =>
          _library._Cronet_UrlResponseInfo_proxy_server_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_received_byte_count_set>>
      get Cronet_UrlResponseInfo_received_byte_count_set =>
          _library._Cronet_UrlResponseInfo_received_byte_count_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UrlResponseInfo_url_chain_clear>>
      get Cronet_UrlResponseInfo_url_chain_clear =>
          _library._Cronet_UrlResponseInfo_url_chain_clear_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_all_headers_list_clear>>
      get Cronet_UrlResponseInfo_all_headers_list_clear =>
          _library._Cronet_UrlResponseInfo_all_headers_list_clear_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_UrlRequestParamsPtr =>
      _library._Cronet_UrlRequestParamsPtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UrlRequestParams_Destroy>>
      get Cronet_UrlRequestParams_Destroy =>
          _library._Cronet_UrlRequestParams_Destroy_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_UrlRequestParams_http_method_set>>
      get Cronet_UrlRequestParams_http_method_set =>
          _library._Cronet_UrlRequestParams_http_method_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestParams_request_headers_add>>
      get Cronet_UrlRequestParams_request_headers_add =>
          _library._Cronet_UrlRequestParams_request_headers_add_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_UrlRequestParams_disable_cache_set>>
      get Cronet_UrlRequestParams_disable_cache_set =>
          _library._Cronet_UrlRequestParams_disable_cache_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_UrlRequestParams_priority_set>>
      get Cronet_UrlRequestParams_priority_set =>
          _library._Cronet_UrlRequestParams_priority_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestParams_upload_data_provider_set>>
      get Cronet_UrlRequestParams_upload_data_provider_set =>
          _library._Cronet_UrlRequestParams_upload_data_provider_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestParams_upload_data_provider_executor_set>>
      get Cronet_UrlRequestParams_upload_data_provider_executor_set => _library
          ._Cronet_UrlRequestParams_upload_data_provider_executor_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestParams_allow_direct_executor_set>>
      get Cronet_UrlRequestParams_allow_direct_executor_set =>
          _library._Cronet_UrlRequestParams_allow_direct_executor_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_UrlRequestParams_annotations_add>>
      get Cronet_UrlRequestParams_annotations_add =>
          _library._Cronet_UrlRequestParams_annotations_add_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestParams_request_finished_listener_set>>
      get Cronet_UrlRequestParams_request_finished_listener_set =>
          _library._Cronet_UrlRequestParams_request_finished_listener_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestParams_request_finished_executor_set>>
      get Cronet_UrlRequestParams_request_finished_executor_set =>
          _library._Cronet_UrlRequestParams_request_finished_executor_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_UrlRequestParams_idempotency_set>>
      get Cronet_UrlRequestParams_idempotency_set =>
          _library._Cronet_UrlRequestParams_idempotency_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlRequestParams_request_headers_clear>>
      get Cronet_UrlRequestParams_request_headers_clear =>
          _library._Cronet_UrlRequestParams_request_headers_clear_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_UrlRequestParams_REQUEST_PRIORITY_1 =>
      _library._Cronet_UrlRequestParams_REQUEST_PRIORITY_1;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_UrlRequestParams_annotations_clear>>
      get Cronet_UrlRequestParams_annotations_clear =>
          _library._Cronet_UrlRequestParams_annotations_clear_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_UrlRequestParams_IDEMPOTENCY_1 =>
      _library._Cronet_UrlRequestParams_IDEMPOTENCY_1;
  ffi.Pointer<ffi.Int32> get Cronet_DateTimePtr => _library._Cronet_DateTimePtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_DateTime_Destroy>>
      get Cronet_DateTime_Destroy => _library._Cronet_DateTime_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_DateTime_value_set>>
      get Cronet_DateTime_value_set => _library._Cronet_DateTime_value_set_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_MetricsPtr => _library._Cronet_MetricsPtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_Destroy>>
      get Cronet_Metrics_Destroy => _library._Cronet_Metrics_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_request_start_set>>
      get Cronet_Metrics_request_start_set =>
          _library._Cronet_Metrics_request_start_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_request_start_move>>
      get Cronet_Metrics_request_start_move =>
          _library._Cronet_Metrics_request_start_move_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_dns_start_set>>
      get Cronet_Metrics_dns_start_set =>
          _library._Cronet_Metrics_dns_start_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_dns_start_move>>
      get Cronet_Metrics_dns_start_move =>
          _library._Cronet_Metrics_dns_start_move_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_dns_end_set>>
      get Cronet_Metrics_dns_end_set =>
          _library._Cronet_Metrics_dns_end_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_dns_end_move>>
      get Cronet_Metrics_dns_end_move =>
          _library._Cronet_Metrics_dns_end_move_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_connect_start_set>>
      get Cronet_Metrics_connect_start_set =>
          _library._Cronet_Metrics_connect_start_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_connect_start_move>>
      get Cronet_Metrics_connect_start_move =>
          _library._Cronet_Metrics_connect_start_move_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_connect_end_set>>
      get Cronet_Metrics_connect_end_set =>
          _library._Cronet_Metrics_connect_end_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_connect_end_move>>
      get Cronet_Metrics_connect_end_move =>
          _library._Cronet_Metrics_connect_end_move_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_ssl_start_set>>
      get Cronet_Metrics_ssl_start_set =>
          _library._Cronet_Metrics_ssl_start_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_ssl_start_move>>
      get Cronet_Metrics_ssl_start_move =>
          _library._Cronet_Metrics_ssl_start_move_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_ssl_end_set>>
      get Cronet_Metrics_ssl_end_set =>
          _library._Cronet_Metrics_ssl_end_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_ssl_end_move>>
      get Cronet_Metrics_ssl_end_move =>
          _library._Cronet_Metrics_ssl_end_move_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_sending_start_set>>
      get Cronet_Metrics_sending_start_set =>
          _library._Cronet_Metrics_sending_start_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_sending_start_move>>
      get Cronet_Metrics_sending_start_move =>
          _library._Cronet_Metrics_sending_start_move_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_sending_end_set>>
      get Cronet_Metrics_sending_end_set =>
          _library._Cronet_Metrics_sending_end_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_sending_end_move>>
      get Cronet_Metrics_sending_end_move =>
          _library._Cronet_Metrics_sending_end_move_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_push_start_set>>
      get Cronet_Metrics_push_start_set =>
          _library._Cronet_Metrics_push_start_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_push_start_move>>
      get Cronet_Metrics_push_start_move =>
          _library._Cronet_Metrics_push_start_move_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_push_end_set>>
      get Cronet_Metrics_push_end_set =>
          _library._Cronet_Metrics_push_end_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_push_end_move>>
      get Cronet_Metrics_push_end_move =>
          _library._Cronet_Metrics_push_end_move_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_response_start_set>>
      get Cronet_Metrics_response_start_set =>
          _library._Cronet_Metrics_response_start_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_response_start_move>>
      get Cronet_Metrics_response_start_move =>
          _library._Cronet_Metrics_response_start_move_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_request_end_set>>
      get Cronet_Metrics_request_end_set =>
          _library._Cronet_Metrics_request_end_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_request_end_move>>
      get Cronet_Metrics_request_end_move =>
          _library._Cronet_Metrics_request_end_move_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_socket_reused_set>>
      get Cronet_Metrics_socket_reused_set =>
          _library._Cronet_Metrics_socket_reused_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_sent_byte_count_set>>
      get Cronet_Metrics_sent_byte_count_set =>
          _library._Cronet_Metrics_sent_byte_count_set_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Metrics_received_byte_count_set>>
      get Cronet_Metrics_received_byte_count_set =>
          _library._Cronet_Metrics_received_byte_count_set_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_RequestFinishedInfoPtr =>
      _library._Cronet_RequestFinishedInfoPtr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_RequestFinishedInfo_Destroy>>
      get Cronet_RequestFinishedInfo_Destroy =>
          _library._Cronet_RequestFinishedInfo_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_RequestFinishedInfo_metrics_set>>
      get Cronet_RequestFinishedInfo_metrics_set =>
          _library._Cronet_RequestFinishedInfo_metrics_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_RequestFinishedInfo_metrics_move>>
      get Cronet_RequestFinishedInfo_metrics_move =>
          _library._Cronet_RequestFinishedInfo_metrics_move_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_RequestFinishedInfo_annotations_add>>
      get Cronet_RequestFinishedInfo_annotations_add =>
          _library._Cronet_RequestFinishedInfo_annotations_add_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_RequestFinishedInfo_finished_reason_set>>
      get Cronet_RequestFinishedInfo_finished_reason_set =>
          _library._Cronet_RequestFinishedInfo_finished_reason_set_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_RequestFinishedInfo_annotations_clear>>
      get Cronet_RequestFinishedInfo_annotations_clear =>
          _library._Cronet_RequestFinishedInfo_annotations_clear_ptr;
  ffi.Pointer<ffi.Int32> get Cronet_RequestFinishedInfo_FINISHED_REASON_1 =>
      _library._Cronet_RequestFinishedInfo_FINISHED_REASON_1;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_Engine_SetMockCertVerifierForTesting>>
      get Cronet_Engine_SetMockCertVerifierForTesting =>
          _library._Cronet_Engine_SetMockCertVerifierForTesting_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Engine_GetStreamEngine>>
      get Cronet_Engine_GetStreamEngine =>
          _library._Cronet_Engine_GetStreamEngine_ptr;
  ffi.Pointer<ffi.Int32> get cronet => _library._cronet;
  ffi.Pointer<ffi.NativeFunction<Native_PerfTest>> get PerfTest =>
      _library._PerfTest_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___daylight>> get __daylight =>
      _library.___daylight_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___dstbias>> get __dstbias =>
      _library.___dstbias_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___timezone>> get __timezone =>
      _library.___timezone_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___tzname>> get __tzname =>
      _library.___tzname_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_daylight>> get _get_daylight =>
      _library.__get_daylight_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_dstbias>> get _get_dstbias =>
      _library.__get_dstbias_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_timezone>> get _get_timezone =>
      _library.__get_timezone_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_tzname>> get _get_tzname =>
      _library.__get_tzname_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_asctime>> get asctime =>
      _library._asctime_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_asctime_s>> get asctime_s =>
      _library._asctime_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_clock>> get clock =>
      _library._clock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ctime32>> get _ctime32 =>
      _library.__ctime32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ctime32_s>> get _ctime32_s =>
      _library.__ctime32_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ctime64>> get _ctime64 =>
      _library.__ctime64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ctime64_s>> get _ctime64_s =>
      _library.__ctime64_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__difftime32>> get _difftime32 =>
      _library.__difftime32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__difftime64>> get _difftime64 =>
      _library.__difftime64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__gmtime32>> get _gmtime32 =>
      _library.__gmtime32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__gmtime32_s>> get _gmtime32_s =>
      _library.__gmtime32_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__gmtime64>> get _gmtime64 =>
      _library.__gmtime64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__gmtime64_s>> get _gmtime64_s =>
      _library.__gmtime64_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__localtime32>> get _localtime32 =>
      _library.__localtime32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__localtime32_s>> get _localtime32_s =>
      _library.__localtime32_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__localtime64>> get _localtime64 =>
      _library.__localtime64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__localtime64_s>> get _localtime64_s =>
      _library.__localtime64_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mkgmtime32>> get _mkgmtime32 =>
      _library.__mkgmtime32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mkgmtime64>> get _mkgmtime64 =>
      _library.__mkgmtime64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mktime32>> get _mktime32 =>
      _library.__mktime32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mktime64>> get _mktime64 =>
      _library.__mktime64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_strftime>> get strftime =>
      _library._strftime_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strftime_l>> get _strftime_l =>
      _library.__strftime_l_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strdate_s>> get _strdate_s =>
      _library.__strdate_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strdate>> get _strdate =>
      _library.__strdate_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strtime_s>> get _strtime_s =>
      _library.__strtime_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__strtime>> get _strtime =>
      _library.__strtime_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__time32>> get _time32 =>
      _library.__time32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__time64>> get _time64 =>
      _library.__time64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__timespec32_get>> get _timespec32_get =>
      _library.__timespec32_get_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__timespec64_get>> get _timespec64_get =>
      _library.__timespec64_get_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tzset>> get _tzset =>
      _library.__tzset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__getsystime>> get _getsystime =>
      _library.__getsystime_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__setsystime>> get _setsystime =>
      _library.__setsystime_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tzset>> get tzset =>
      _library._tzset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__cgetws_s>> get _cgetws_s =>
      _library.__cgetws_s_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_xtime_get>> get xtime_get =>
      _library._xtime_get_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Xtime_diff_to_millis>>
      get _Xtime_diff_to_millis => _library.__Xtime_diff_to_millis_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Xtime_diff_to_millis2>>
      get _Xtime_diff_to_millis2 => _library.__Xtime_diff_to_millis2_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Xtime_get_ticks>>
      get _Xtime_get_ticks => _library.__Xtime_get_ticks_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Query_perf_counter>>
      get _Query_perf_counter => _library.__Query_perf_counter_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Query_perf_frequency>>
      get _Query_perf_frequency => _library.__Query_perf_frequency_ptr;
  ffi.Pointer<ffi.Int32> get _Thrd_id_t => _library.__Thrd_id_t;
  ffi.Pointer<ffi.Int32> get _Mtx_t => _library.__Mtx_t;
  ffi.Pointer<ffi.Int32> get _Cnd_t => _library.__Cnd_t;
  ffi.Pointer<ffi.NativeFunction<Native__Thrd_detach>> get _Thrd_detach =>
      _library.__Thrd_detach_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Thrd_join>> get _Thrd_join =>
      _library.__Thrd_join_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Thrd_sleep>> get _Thrd_sleep =>
      _library.__Thrd_sleep_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Thrd_yield>> get _Thrd_yield =>
      _library.__Thrd_yield_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Thrd_hardware_concurrency>>
      get _Thrd_hardware_concurrency =>
          _library.__Thrd_hardware_concurrency_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Thrd_id>> get _Thrd_id =>
      _library.__Thrd_id_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Mtx_init>> get _Mtx_init =>
      _library.__Mtx_init_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Mtx_destroy>> get _Mtx_destroy =>
      _library.__Mtx_destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Mtx_init_in_situ>>
      get _Mtx_init_in_situ => _library.__Mtx_init_in_situ_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Mtx_destroy_in_situ>>
      get _Mtx_destroy_in_situ => _library.__Mtx_destroy_in_situ_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Mtx_current_owns>>
      get _Mtx_current_owns => _library.__Mtx_current_owns_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Mtx_lock>> get _Mtx_lock =>
      _library.__Mtx_lock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Mtx_trylock>> get _Mtx_trylock =>
      _library.__Mtx_trylock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Mtx_timedlock>> get _Mtx_timedlock =>
      _library.__Mtx_timedlock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Mtx_unlock>> get _Mtx_unlock =>
      _library.__Mtx_unlock_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Mtx_getconcrtcs>>
      get _Mtx_getconcrtcs => _library.__Mtx_getconcrtcs_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Mtx_clear_owner>>
      get _Mtx_clear_owner => _library.__Mtx_clear_owner_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Mtx_reset_owner>>
      get _Mtx_reset_owner => _library.__Mtx_reset_owner_ptr;
  ffi.Pointer<ffi.Int32> get _Smtx_t => _library.__Smtx_t;
  ffi.Pointer<ffi.NativeFunction<Native__Smtx_lock_exclusive>>
      get _Smtx_lock_exclusive => _library.__Smtx_lock_exclusive_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Smtx_lock_shared>>
      get _Smtx_lock_shared => _library.__Smtx_lock_shared_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Smtx_try_lock_exclusive>>
      get _Smtx_try_lock_exclusive => _library.__Smtx_try_lock_exclusive_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Smtx_try_lock_shared>>
      get _Smtx_try_lock_shared => _library.__Smtx_try_lock_shared_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Smtx_unlock_exclusive>>
      get _Smtx_unlock_exclusive => _library.__Smtx_unlock_exclusive_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Smtx_unlock_shared>>
      get _Smtx_unlock_shared => _library.__Smtx_unlock_shared_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Cnd_init>> get _Cnd_init =>
      _library.__Cnd_init_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Cnd_destroy>> get _Cnd_destroy =>
      _library.__Cnd_destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Cnd_init_in_situ>>
      get _Cnd_init_in_situ => _library.__Cnd_init_in_situ_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Cnd_destroy_in_situ>>
      get _Cnd_destroy_in_situ => _library.__Cnd_destroy_in_situ_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Cnd_wait>> get _Cnd_wait =>
      _library.__Cnd_wait_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Cnd_timedwait>> get _Cnd_timedwait =>
      _library.__Cnd_timedwait_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Cnd_broadcast>> get _Cnd_broadcast =>
      _library.__Cnd_broadcast_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Cnd_signal>> get _Cnd_signal =>
      _library.__Cnd_signal_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Cnd_register_at_thread_exit>>
      get _Cnd_register_at_thread_exit =>
          _library.__Cnd_register_at_thread_exit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Cnd_unregister_at_thread_exit>>
      get _Cnd_unregister_at_thread_exit =>
          _library.__Cnd_unregister_at_thread_exit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Cnd_do_broadcast_at_thread_exit>>
      get _Cnd_do_broadcast_at_thread_exit =>
          _library.__Cnd_do_broadcast_at_thread_exit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__lock_locales>> get _lock_locales =>
      _library.__lock_locales_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__unlock_locales>> get _unlock_locales =>
      _library.__unlock_locales_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__configthreadlocale>>
      get _configthreadlocale => _library.__configthreadlocale_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_setlocale>> get setlocale =>
      _library._setlocale_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_localeconv>> get localeconv =>
      _library._localeconv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_current_locale>>
      get _get_current_locale => _library.__get_current_locale_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__create_locale>> get _create_locale =>
      _library.__create_locale_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__free_locale>> get _free_locale =>
      _library.__free_locale_ptr;
  ffi.Pointer<ffi.NativeFunction<Native____lc_locale_name_func>>
      get ___lc_locale_name_func => _library.____lc_locale_name_func_ptr;
  ffi.Pointer<ffi.NativeFunction<Native____lc_codepage_func>>
      get ___lc_codepage_func => _library.____lc_codepage_func_ptr;
  ffi.Pointer<ffi.NativeFunction<Native____lc_collate_cp_func>>
      get ___lc_collate_cp_func => _library.____lc_collate_cp_func_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Getdays>> get _Getdays =>
      _library.__Getdays_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Getmonths>> get _Getmonths =>
      _library.__Getmonths_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Gettnames>> get _Gettnames =>
      _library.__Gettnames_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__W_Getdays>> get _W_Getdays =>
      _library.__W_Getdays_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__W_Getmonths>> get _W_Getmonths =>
      _library.__W_Getmonths_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__W_Gettnames>> get _W_Gettnames =>
      _library.__W_Gettnames_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Strftime>> get _Strftime =>
      _library.__Strftime_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Wcsftime>> get _Wcsftime =>
      _library.__Wcsftime_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Getcoll>> get _Getcoll =>
      _library.__Getcoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Getctype>> get _Getctype =>
      _library.__Getctype_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Getdateorder>> get _Getdateorder =>
      _library.__Getdateorder_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Mbrtowc>> get _Mbrtowc =>
      _library.__Mbrtowc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Stof>> get _Stof =>
      _library.__Stof_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Stod>> get _Stod =>
      _library.__Stod_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Strcoll>> get _Strcoll =>
      _library.__Strcoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Strxfrm>> get _Strxfrm =>
      _library.__Strxfrm_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Tolower>> get _Tolower =>
      _library.__Tolower_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Toupper>> get _Toupper =>
      _library.__Toupper_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Wcrtomb>> get _Wcrtomb =>
      _library.__Wcrtomb_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Wcscoll>> get _Wcscoll =>
      _library.__Wcscoll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Wcsxfrm>> get _Wcsxfrm =>
      _library.__Wcsxfrm_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Getwctype>> get _Getwctype =>
      _library.__Getwctype_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Getwctypes>> get _Getwctypes =>
      _library.__Getwctypes_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Towlower>> get _Towlower =>
      _library.__Towlower_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Towupper>> get _Towupper =>
      _library.__Towupper_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__GetLocaleForCP>> get _GetLocaleForCP =>
      _library.__GetLocaleForCP_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Stodx>> get _Stodx =>
      _library.__Stodx_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Stolx>> get _Stolx =>
      _library.__Stolx_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Stoulx>> get _Stoulx =>
      _library.__Stoulx_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Stollx>> get _Stollx =>
      _library.__Stollx_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Stoullx>> get _Stoullx =>
      _library.__Stoullx_ptr;
  ffi.Pointer<ffi.Int32> get __current_exit_return_mode =>
      _library.___current_exit_return_mode;
  ffi.Pointer<ffi.NativeFunction<Native___vcrt_initialize>>
      get __vcrt_initialize => _library.___vcrt_initialize_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___vcrt_uninitialize>>
      get __vcrt_uninitialize => _library.___vcrt_uninitialize_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___vcrt_uninitialize_critical>>
      get __vcrt_uninitialize_critical =>
          _library.___vcrt_uninitialize_critical_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___vcrt_thread_attach>>
      get __vcrt_thread_attach => _library.___vcrt_thread_attach_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___vcrt_thread_detach>>
      get __vcrt_thread_detach => _library.___vcrt_thread_detach_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___isa_available_init>>
      get __isa_available_init => _library.___isa_available_init_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_startup_argv_mode>>
      get _get_startup_argv_mode => _library.__get_startup_argv_mode_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__seh_filter_dll>> get _seh_filter_dll =>
      _library.__seh_filter_dll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__seh_filter_exe>> get _seh_filter_exe =>
      _library.__seh_filter_exe_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__query_app_type>> get _query_app_type =>
      _library.__query_app_type_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__set_app_type>> get _set_app_type =>
      _library.__set_app_type_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___setusermatherr>>
      get __setusermatherr => _library.___setusermatherr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__is_c_termination_complete>>
      get _is_c_termination_complete =>
          _library.__is_c_termination_complete_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__configure_narrow_argv>>
      get _configure_narrow_argv => _library.__configure_narrow_argv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__configure_wide_argv>>
      get _configure_wide_argv => _library.__configure_wide_argv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__initialize_narrow_environment>>
      get _initialize_narrow_environment =>
          _library.__initialize_narrow_environment_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__initialize_wide_environment>>
      get _initialize_wide_environment =>
          _library.__initialize_wide_environment_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_initial_narrow_environment>>
      get _get_initial_narrow_environment =>
          _library.__get_initial_narrow_environment_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_initial_wide_environment>>
      get _get_initial_wide_environment =>
          _library.__get_initial_wide_environment_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_narrow_winmain_command_line>>
      get _get_narrow_winmain_command_line =>
          _library.__get_narrow_winmain_command_line_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__get_wide_winmain_command_line>>
      get _get_wide_winmain_command_line =>
          _library.__get_wide_winmain_command_line_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___p__acmdln>> get __p__acmdln =>
      _library.___p__acmdln_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___p__wcmdln>> get __p__wcmdln =>
      _library.___p__wcmdln_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__initterm>> get _initterm =>
      _library.__initterm_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__initterm_e>> get _initterm_e =>
      _library.__initterm_e_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__initialize_onexit_table>>
      get _initialize_onexit_table => _library.__initialize_onexit_table_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__register_onexit_function>>
      get _register_onexit_function => _library.__register_onexit_function_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__execute_onexit_table>>
      get _execute_onexit_table => _library.__execute_onexit_table_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__crt_atexit>> get _crt_atexit =>
      _library.__crt_atexit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__crt_at_quick_exit>>
      get _crt_at_quick_exit => _library.__crt_at_quick_exit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___acrt_initialize>>
      get __acrt_initialize => _library.___acrt_initialize_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___acrt_uninitialize>>
      get __acrt_uninitialize => _library.___acrt_uninitialize_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___acrt_uninitialize_critical>>
      get __acrt_uninitialize_critical =>
          _library.___acrt_uninitialize_critical_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___acrt_thread_attach>>
      get __acrt_thread_attach => _library.___acrt_thread_attach_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___acrt_thread_detach>>
      get __acrt_thread_detach => _library.___acrt_thread_detach_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__cexit>> get _cexit =>
      _library.__cexit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__c_exit>> get _c_exit =>
      _library.__c_exit_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native__register_thread_local_exe_atexit_callback>>
      get _register_thread_local_exe_atexit_callback =>
          _library.__register_thread_local_exe_atexit_callback_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__beginthread>> get _beginthread =>
      _library.__beginthread_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__endthread>> get _endthread =>
      _library.__endthread_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__beginthreadex>> get _beginthreadex =>
      _library.__beginthreadex_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__endthreadex>> get _endthreadex =>
      _library.__endthreadex_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__getpid>> get _getpid =>
      _library.__getpid_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__cwait>> get _cwait =>
      _library.__cwait_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__execl>> get _execl =>
      _library.__execl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__execle>> get _execle =>
      _library.__execle_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__execlp>> get _execlp =>
      _library.__execlp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__execlpe>> get _execlpe =>
      _library.__execlpe_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__execv>> get _execv =>
      _library.__execv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__execve>> get _execve =>
      _library.__execve_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__execvp>> get _execvp =>
      _library.__execvp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__execvpe>> get _execvpe =>
      _library.__execvpe_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__spawnl>> get _spawnl =>
      _library.__spawnl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__spawnle>> get _spawnle =>
      _library.__spawnle_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__spawnlp>> get _spawnlp =>
      _library.__spawnlp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__spawnlpe>> get _spawnlpe =>
      _library.__spawnlpe_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__spawnv>> get _spawnv =>
      _library.__spawnv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__spawnve>> get _spawnve =>
      _library.__spawnve_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__spawnvp>> get _spawnvp =>
      _library.__spawnvp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__spawnvpe>> get _spawnvpe =>
      _library.__spawnvpe_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__loaddll>> get _loaddll =>
      _library.__loaddll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__unloaddll>> get _unloaddll =>
      _library.__unloaddll_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__getdllprocaddr>> get _getdllprocaddr =>
      _library.__getdllprocaddr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_cwait>> get cwait =>
      _library._cwait_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_execl>> get execl =>
      _library._execl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_execle>> get execle =>
      _library._execle_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_execlp>> get execlp =>
      _library._execlp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_execlpe>> get execlpe =>
      _library._execlpe_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_execv>> get execv =>
      _library._execv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_execve>> get execve =>
      _library._execve_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_execvp>> get execvp =>
      _library._execvp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_execvpe>> get execvpe =>
      _library._execvpe_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_spawnl>> get spawnl =>
      _library._spawnl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_spawnle>> get spawnle =>
      _library._spawnle_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_spawnlp>> get spawnlp =>
      _library._spawnlp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_spawnlpe>> get spawnlpe =>
      _library._spawnlpe_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_spawnv>> get spawnv =>
      _library._spawnv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_spawnve>> get spawnve =>
      _library._spawnve_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_spawnvp>> get spawnvp =>
      _library._spawnvp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_spawnvpe>> get spawnvpe =>
      _library._spawnvpe_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_getpid>> get getpid =>
      _library._getpid_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__setjmp>> get _setjmp =>
      _library.__setjmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_longjmp>> get longjmp =>
      _library._longjmp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_prefetch>> get _mm_prefetch =>
      _library.__mm_prefetch_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_sfence>> get _mm_sfence =>
      _library.__mm_sfence_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_getcsr>> get _mm_getcsr =>
      _library.__mm_getcsr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_setcsr>> get _mm_setcsr =>
      _library.__mm_setcsr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_clflush>> get _mm_clflush =>
      _library.__mm_clflush_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_lfence>> get _mm_lfence =>
      _library.__mm_lfence_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_mfence>> get _mm_mfence =>
      _library.__mm_mfence_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_stream_si32>> get _mm_stream_si32 =>
      _library.__mm_stream_si32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_pause>> get _mm_pause =>
      _library.__mm_pause_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_monitor>> get _mm_monitor =>
      _library.__mm_monitor_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_mwait>> get _mm_mwait =>
      _library.__mm_mwait_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_popcnt_u32>> get _mm_popcnt_u32 =>
      _library.__mm_popcnt_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_popcnt_u64>> get _mm_popcnt_u64 =>
      _library.__mm_popcnt_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_crc32_u8>> get _mm_crc32_u8 =>
      _library.__mm_crc32_u8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_crc32_u16>> get _mm_crc32_u16 =>
      _library.__mm_crc32_u16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_crc32_u32>> get _mm_crc32_u32 =>
      _library.__mm_crc32_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_crc32_u64>> get _mm_crc32_u64 =>
      _library.__mm_crc32_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm256_zeroall>> get _mm256_zeroall =>
      _library.__mm256_zeroall_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm256_zeroupper>>
      get _mm256_zeroupper => _library.__mm256_zeroupper_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xgetbv>> get _xgetbv =>
      _library.__xgetbv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xsetbv>> get _xsetbv =>
      _library.__xsetbv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xsave>> get _xsave =>
      _library.__xsave_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xsave64>> get _xsave64 =>
      _library.__xsave64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xsaveopt>> get _xsaveopt =>
      _library.__xsaveopt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xsaveopt64>> get _xsaveopt64 =>
      _library.__xsaveopt64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xsavec>> get _xsavec =>
      _library.__xsavec_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xsavec64>> get _xsavec64 =>
      _library.__xsavec64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xrstor>> get _xrstor =>
      _library.__xrstor_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xrstor64>> get _xrstor64 =>
      _library.__xrstor64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xsaves>> get _xsaves =>
      _library.__xsaves_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xsaves64>> get _xsaves64 =>
      _library.__xsaves64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xrstors>> get _xrstors =>
      _library.__xrstors_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xrstors64>> get _xrstors64 =>
      _library.__xrstors64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fxsave>> get _fxsave =>
      _library.__fxsave_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fxsave64>> get _fxsave64 =>
      _library.__fxsave64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fxrstor>> get _fxrstor =>
      _library.__fxrstor_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__fxrstor64>> get _fxrstor64 =>
      _library.__fxrstor64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rdrand16_step>> get _rdrand16_step =>
      _library.__rdrand16_step_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rdrand32_step>> get _rdrand32_step =>
      _library.__rdrand32_step_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rdrand64_step>> get _rdrand64_step =>
      _library.__rdrand64_step_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__readfsbase_u32>> get _readfsbase_u32 =>
      _library.__readfsbase_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__readgsbase_u32>> get _readgsbase_u32 =>
      _library.__readgsbase_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__readfsbase_u64>> get _readfsbase_u64 =>
      _library.__readfsbase_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__readgsbase_u64>> get _readgsbase_u64 =>
      _library.__readgsbase_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__writefsbase_u32>>
      get _writefsbase_u32 => _library.__writefsbase_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__writegsbase_u32>>
      get _writegsbase_u32 => _library.__writegsbase_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__writefsbase_u64>>
      get _writefsbase_u64 => _library.__writefsbase_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__writegsbase_u64>>
      get _writegsbase_u64 => _library.__writegsbase_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bextr_u32>> get _bextr_u32 =>
      _library.__bextr_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bextr2_u32>> get _bextr2_u32 =>
      _library.__bextr2_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blsi_u32>> get _blsi_u32 =>
      _library.__blsi_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blsmsk_u32>> get _blsmsk_u32 =>
      _library.__blsmsk_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blsr_u32>> get _blsr_u32 =>
      _library.__blsr_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bzhi_u32>> get _bzhi_u32 =>
      _library.__bzhi_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mulx_u32>> get _mulx_u32 =>
      _library.__mulx_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__pdep_u32>> get _pdep_u32 =>
      _library.__pdep_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__pext_u32>> get _pext_u32 =>
      _library.__pext_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rorx_u32>> get _rorx_u32 =>
      _library.__rorx_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__sarx_i32>> get _sarx_i32 =>
      _library.__sarx_i32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__shlx_u32>> get _shlx_u32 =>
      _library.__shlx_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__shrx_u32>> get _shrx_u32 =>
      _library.__shrx_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bextr_u64>> get _bextr_u64 =>
      _library.__bextr_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bextr2_u64>> get _bextr2_u64 =>
      _library.__bextr2_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blsi_u64>> get _blsi_u64 =>
      _library.__blsi_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blsmsk_u64>> get _blsmsk_u64 =>
      _library.__blsmsk_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blsr_u64>> get _blsr_u64 =>
      _library.__blsr_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bzhi_u64>> get _bzhi_u64 =>
      _library.__bzhi_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mulx_u64>> get _mulx_u64 =>
      _library.__mulx_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__pdep_u64>> get _pdep_u64 =>
      _library.__pdep_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__pext_u64>> get _pext_u64 =>
      _library.__pext_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rorx_u64>> get _rorx_u64 =>
      _library.__rorx_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__sarx_i64>> get _sarx_i64 =>
      _library.__sarx_i64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__shlx_u64>> get _shlx_u64 =>
      _library.__shlx_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__shrx_u64>> get _shrx_u64 =>
      _library.__shrx_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__lzcnt_u32>> get _lzcnt_u32 =>
      _library.__lzcnt_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__lzcnt_u64>> get _lzcnt_u64 =>
      _library.__lzcnt_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tzcnt_u32>> get _tzcnt_u32 =>
      _library.__tzcnt_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tzcnt_u64>> get _tzcnt_u64 =>
      _library.__tzcnt_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__invpcid>> get _invpcid =>
      _library.__invpcid_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Store_HLERelease>>
      get _Store_HLERelease => _library.__Store_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__StorePointer_HLERelease>>
      get _StorePointer_HLERelease => _library.__StorePointer_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchange_HLEAcquire>>
      get _InterlockedExchange_HLEAcquire =>
          _library.__InterlockedExchange_HLEAcquire_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchange_HLERelease>>
      get _InterlockedExchange_HLERelease =>
          _library.__InterlockedExchange_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchangePointer_HLEAcquire>>
      get _InterlockedExchangePointer_HLEAcquire =>
          _library.__InterlockedExchangePointer_HLEAcquire_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchangePointer_HLERelease>>
      get _InterlockedExchangePointer_HLERelease =>
          _library.__InterlockedExchangePointer_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedCompareExchange_HLEAcquire>>
      get _InterlockedCompareExchange_HLEAcquire =>
          _library.__InterlockedCompareExchange_HLEAcquire_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedCompareExchange_HLERelease>>
      get _InterlockedCompareExchange_HLERelease =>
          _library.__InterlockedCompareExchange_HLERelease_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native__InterlockedCompareExchange64_HLEAcquire>>
      get _InterlockedCompareExchange64_HLEAcquire =>
          _library.__InterlockedCompareExchange64_HLEAcquire_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native__InterlockedCompareExchange64_HLERelease>>
      get _InterlockedCompareExchange64_HLERelease =>
          _library.__InterlockedCompareExchange64_HLERelease_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native__InterlockedCompareExchangePointer_HLEAcquire>>
      get _InterlockedCompareExchangePointer_HLEAcquire =>
          _library.__InterlockedCompareExchangePointer_HLEAcquire_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native__InterlockedCompareExchangePointer_HLERelease>>
      get _InterlockedCompareExchangePointer_HLERelease =>
          _library.__InterlockedCompareExchangePointer_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchangeAdd_HLEAcquire>>
      get _InterlockedExchangeAdd_HLEAcquire =>
          _library.__InterlockedExchangeAdd_HLEAcquire_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchangeAdd_HLERelease>>
      get _InterlockedExchangeAdd_HLERelease =>
          _library.__InterlockedExchangeAdd_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedAnd_HLEAcquire>>
      get _InterlockedAnd_HLEAcquire =>
          _library.__InterlockedAnd_HLEAcquire_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedAnd_HLERelease>>
      get _InterlockedAnd_HLERelease =>
          _library.__InterlockedAnd_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedOr_HLEAcquire>>
      get _InterlockedOr_HLEAcquire => _library.__InterlockedOr_HLEAcquire_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedOr_HLERelease>>
      get _InterlockedOr_HLERelease => _library.__InterlockedOr_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedXor_HLEAcquire>>
      get _InterlockedXor_HLEAcquire =>
          _library.__InterlockedXor_HLEAcquire_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedXor_HLERelease>>
      get _InterlockedXor_HLERelease =>
          _library.__InterlockedXor_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__interlockedbittestandset_HLEAcquire>>
      get _interlockedbittestandset_HLEAcquire =>
          _library.__interlockedbittestandset_HLEAcquire_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__interlockedbittestandset_HLERelease>>
      get _interlockedbittestandset_HLERelease =>
          _library.__interlockedbittestandset_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__interlockedbittestandreset_HLEAcquire>>
      get _interlockedbittestandreset_HLEAcquire =>
          _library.__interlockedbittestandreset_HLEAcquire_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__interlockedbittestandreset_HLERelease>>
      get _interlockedbittestandreset_HLERelease =>
          _library.__interlockedbittestandreset_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__Store64_HLERelease>>
      get _Store64_HLERelease => _library.__Store64_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchange64_HLEAcquire>>
      get _InterlockedExchange64_HLEAcquire =>
          _library.__InterlockedExchange64_HLEAcquire_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchange64_HLERelease>>
      get _InterlockedExchange64_HLERelease =>
          _library.__InterlockedExchange64_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchangeAdd64_HLEAcquire>>
      get _InterlockedExchangeAdd64_HLEAcquire =>
          _library.__InterlockedExchangeAdd64_HLEAcquire_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchangeAdd64_HLERelease>>
      get _InterlockedExchangeAdd64_HLERelease =>
          _library.__InterlockedExchangeAdd64_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedAnd64_HLEAcquire>>
      get _InterlockedAnd64_HLEAcquire =>
          _library.__InterlockedAnd64_HLEAcquire_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedAnd64_HLERelease>>
      get _InterlockedAnd64_HLERelease =>
          _library.__InterlockedAnd64_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedOr64_HLEAcquire>>
      get _InterlockedOr64_HLEAcquire =>
          _library.__InterlockedOr64_HLEAcquire_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedOr64_HLERelease>>
      get _InterlockedOr64_HLERelease =>
          _library.__InterlockedOr64_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedXor64_HLEAcquire>>
      get _InterlockedXor64_HLEAcquire =>
          _library.__InterlockedXor64_HLEAcquire_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedXor64_HLERelease>>
      get _InterlockedXor64_HLERelease =>
          _library.__InterlockedXor64_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__interlockedbittestandset64_HLEAcquire>>
      get _interlockedbittestandset64_HLEAcquire =>
          _library.__interlockedbittestandset64_HLEAcquire_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__interlockedbittestandset64_HLERelease>>
      get _interlockedbittestandset64_HLERelease =>
          _library.__interlockedbittestandset64_HLERelease_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native__interlockedbittestandreset64_HLEAcquire>>
      get _interlockedbittestandreset64_HLEAcquire =>
          _library.__interlockedbittestandreset64_HLEAcquire_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native__interlockedbittestandreset64_HLERelease>>
      get _interlockedbittestandreset64_HLERelease =>
          _library.__interlockedbittestandreset64_HLERelease_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xbegin>> get _xbegin =>
      _library.__xbegin_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xend>> get _xend =>
      _library.__xend_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xabort>> get _xabort =>
      _library.__xabort_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xtest>> get _xtest =>
      _library.__xtest_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rdseed16_step>> get _rdseed16_step =>
      _library.__rdseed16_step_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rdseed32_step>> get _rdseed32_step =>
      _library.__rdseed32_step_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rdseed64_step>> get _rdseed64_step =>
      _library.__rdseed64_step_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__addcarryx_u32>> get _addcarryx_u32 =>
      _library.__addcarryx_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__addcarryx_u64>> get _addcarryx_u64 =>
      _library.__addcarryx_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__load_be_u16>> get _load_be_u16 =>
      _library.__load_be_u16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__load_be_u32>> get _load_be_u32 =>
      _library.__load_be_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__load_be_u64>> get _load_be_u64 =>
      _library.__load_be_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__store_be_u16>> get _store_be_u16 =>
      _library.__store_be_u16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__store_be_u32>> get _store_be_u32 =>
      _library.__store_be_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__store_be_u64>> get _store_be_u64 =>
      _library.__store_be_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bnd_set_ptr_bounds>>
      get _bnd_set_ptr_bounds => _library.__bnd_set_ptr_bounds_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bnd_narrow_ptr_bounds>>
      get _bnd_narrow_ptr_bounds => _library.__bnd_narrow_ptr_bounds_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bnd_copy_ptr_bounds>>
      get _bnd_copy_ptr_bounds => _library.__bnd_copy_ptr_bounds_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bnd_init_ptr_bounds>>
      get _bnd_init_ptr_bounds => _library.__bnd_init_ptr_bounds_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bnd_store_ptr_bounds>>
      get _bnd_store_ptr_bounds => _library.__bnd_store_ptr_bounds_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bnd_chk_ptr_lbounds>>
      get _bnd_chk_ptr_lbounds => _library.__bnd_chk_ptr_lbounds_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bnd_chk_ptr_ubounds>>
      get _bnd_chk_ptr_ubounds => _library.__bnd_chk_ptr_ubounds_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bnd_chk_ptr_bounds>>
      get _bnd_chk_ptr_bounds => _library.__bnd_chk_ptr_bounds_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bnd_load_ptr_bounds>>
      get _bnd_load_ptr_bounds => _library.__bnd_load_ptr_bounds_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bnd_get_ptr_lbound>>
      get _bnd_get_ptr_lbound => _library.__bnd_get_ptr_lbound_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bnd_get_ptr_ubound>>
      get _bnd_get_ptr_ubound => _library.__bnd_get_ptr_ubound_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rdpid_u32>> get _rdpid_u32 =>
      _library.__rdpid_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ptwrite32>> get _ptwrite32 =>
      _library.__ptwrite32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ptwrite64>> get _ptwrite64 =>
      _library.__ptwrite64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__pconfig_u32>> get _pconfig_u32 =>
      _library.__pconfig_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wbnoinvd>> get _wbnoinvd =>
      _library.__wbnoinvd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__encls_u32>> get _encls_u32 =>
      _library.__encls_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__enclu_u32>> get _enclu_u32 =>
      _library.__enclu_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__enclv_u32>> get _enclv_u32 =>
      _library.__enclv_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__udiv128>> get _udiv128 =>
      _library.__udiv128_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__div128>> get _div128 =>
      _library.__div128_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__udiv64>> get _udiv64 =>
      _library.__udiv64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__div64>> get _div64 =>
      _library.__div64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rdpkru_u32>> get _rdpkru_u32 =>
      _library.__rdpkru_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wrpkru>> get _wrpkru =>
      _library.__wrpkru_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__enqcmd>> get _enqcmd =>
      _library.__enqcmd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__enqcmds>> get _enqcmds =>
      _library.__enqcmds_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__incsspd>> get _incsspd =>
      _library.__incsspd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rdsspd>> get _rdsspd =>
      _library.__rdsspd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__saveprevssp>> get _saveprevssp =>
      _library.__saveprevssp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rstorssp>> get _rstorssp =>
      _library.__rstorssp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wrssd>> get _wrssd =>
      _library.__wrssd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wrussd>> get _wrussd =>
      _library.__wrussd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__setssbsy>> get _setssbsy =>
      _library.__setssbsy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__clrssbsy>> get _clrssbsy =>
      _library.__clrssbsy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__switchssp>> get _switchssp =>
      _library.__switchssp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__incsspq>> get _incsspq =>
      _library.__incsspq_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rdsspq>> get _rdsspq =>
      _library.__rdsspq_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wrssq>> get _wrssq =>
      _library.__wrssq_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__wrussq>> get _wrussq =>
      _library.__wrussq_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_cldemote>> get _mm_cldemote =>
      _library.__mm_cldemote_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__directstoreu_u32>>
      get _directstoreu_u32 => _library.__directstoreu_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__directstoreu_u64>>
      get _directstoreu_u64 => _library.__directstoreu_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__movdir64b>> get _movdir64b =>
      _library.__movdir64b_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__serialize>> get _serialize =>
      _library.__serialize_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xsusldtrk>> get _xsusldtrk =>
      _library.__xsusldtrk_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__xresldtrk>> get _xresldtrk =>
      _library.__xresldtrk_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__umonitor>> get _umonitor =>
      _library.__umonitor_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__umwait>> get _umwait =>
      _library.__umwait_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tpause>> get _tpause =>
      _library.__tpause_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__clui>> get _clui =>
      _library.__clui_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__stui>> get _stui =>
      _library.__stui_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__testui>> get _testui =>
      _library.__testui_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__senduipi>> get _senduipi =>
      _library.__senduipi_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__hreset>> get _hreset =>
      _library.__hreset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_kunpackb>> get _mm512_kunpackb =>
      _library.__mm512_kunpackb_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_kunpackw>> get _mm512_kunpackw =>
      _library.__mm512_kunpackw_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_kunpackd>> get _mm512_kunpackd =>
      _library.__mm512_kunpackd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_and_mask8>>
      get _mm512_testz_and_mask8 => _library.__mm512_testz_and_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_and_mask16>>
      get _mm512_testz_and_mask16 => _library.__mm512_testz_and_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_and_mask32>>
      get _mm512_testz_and_mask32 => _library.__mm512_testz_and_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_and_mask64>>
      get _mm512_testz_and_mask64 => _library.__mm512_testz_and_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_andn_mask8>>
      get _mm512_testz_andn_mask8 => _library.__mm512_testz_andn_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_andn_mask16>>
      get _mm512_testz_andn_mask16 => _library.__mm512_testz_andn_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_andn_mask32>>
      get _mm512_testz_andn_mask32 => _library.__mm512_testz_andn_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_andn_mask64>>
      get _mm512_testz_andn_mask64 => _library.__mm512_testz_andn_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_or_mask8>>
      get _mm512_testz_or_mask8 => _library.__mm512_testz_or_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_or_mask16>>
      get _mm512_testz_or_mask16 => _library.__mm512_testz_or_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_or_mask32>>
      get _mm512_testz_or_mask32 => _library.__mm512_testz_or_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_or_mask64>>
      get _mm512_testz_or_mask64 => _library.__mm512_testz_or_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_nor_mask8>>
      get _mm512_testz_nor_mask8 => _library.__mm512_testz_nor_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_nor_mask16>>
      get _mm512_testz_nor_mask16 => _library.__mm512_testz_nor_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_nor_mask32>>
      get _mm512_testz_nor_mask32 => _library.__mm512_testz_nor_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_testz_nor_mask64>>
      get _mm512_testz_nor_mask64 => _library.__mm512_testz_nor_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kadd_mask8>> get _kadd_mask8 =>
      _library.__kadd_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kadd_mask16>> get _kadd_mask16 =>
      _library.__kadd_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kadd_mask32>> get _kadd_mask32 =>
      _library.__kadd_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kadd_mask64>> get _kadd_mask64 =>
      _library.__kadd_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kand_mask8>> get _kand_mask8 =>
      _library.__kand_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kand_mask16>> get _kand_mask16 =>
      _library.__kand_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kand_mask32>> get _kand_mask32 =>
      _library.__kand_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kand_mask64>> get _kand_mask64 =>
      _library.__kand_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kandn_mask8>> get _kandn_mask8 =>
      _library.__kandn_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kandn_mask16>> get _kandn_mask16 =>
      _library.__kandn_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kandn_mask32>> get _kandn_mask32 =>
      _library.__kandn_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kandn_mask64>> get _kandn_mask64 =>
      _library.__kandn_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__knot_mask8>> get _knot_mask8 =>
      _library.__knot_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__knot_mask16>> get _knot_mask16 =>
      _library.__knot_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__knot_mask32>> get _knot_mask32 =>
      _library.__knot_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__knot_mask64>> get _knot_mask64 =>
      _library.__knot_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kor_mask8>> get _kor_mask8 =>
      _library.__kor_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kor_mask16>> get _kor_mask16 =>
      _library.__kor_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kor_mask32>> get _kor_mask32 =>
      _library.__kor_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kor_mask64>> get _kor_mask64 =>
      _library.__kor_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kxnor_mask8>> get _kxnor_mask8 =>
      _library.__kxnor_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kxnor_mask16>> get _kxnor_mask16 =>
      _library.__kxnor_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kxnor_mask32>> get _kxnor_mask32 =>
      _library.__kxnor_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kxnor_mask64>> get _kxnor_mask64 =>
      _library.__kxnor_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kxor_mask8>> get _kxor_mask8 =>
      _library.__kxor_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kxor_mask16>> get _kxor_mask16 =>
      _library.__kxor_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kxor_mask32>> get _kxor_mask32 =>
      _library.__kxor_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kxor_mask64>> get _kxor_mask64 =>
      _library.__kxor_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kshiftli_mask8>> get _kshiftli_mask8 =>
      _library.__kshiftli_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kshiftli_mask16>>
      get _kshiftli_mask16 => _library.__kshiftli_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kshiftli_mask32>>
      get _kshiftli_mask32 => _library.__kshiftli_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kshiftli_mask64>>
      get _kshiftli_mask64 => _library.__kshiftli_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kshiftri_mask8>> get _kshiftri_mask8 =>
      _library.__kshiftri_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kshiftri_mask16>>
      get _kshiftri_mask16 => _library.__kshiftri_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kshiftri_mask32>>
      get _kshiftri_mask32 => _library.__kshiftri_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kshiftri_mask64>>
      get _kshiftri_mask64 => _library.__kshiftri_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__load_mask8>> get _load_mask8 =>
      _library.__load_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__load_mask16>> get _load_mask16 =>
      _library.__load_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__load_mask32>> get _load_mask32 =>
      _library.__load_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__load_mask64>> get _load_mask64 =>
      _library.__load_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__store_mask8>> get _store_mask8 =>
      _library.__store_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__store_mask16>> get _store_mask16 =>
      _library.__store_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__store_mask32>> get _store_mask32 =>
      _library.__store_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__store_mask64>> get _store_mask64 =>
      _library.__store_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__cvtmask8_u32>> get _cvtmask8_u32 =>
      _library.__cvtmask8_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__cvtmask16_u32>> get _cvtmask16_u32 =>
      _library.__cvtmask16_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__cvtmask32_u32>> get _cvtmask32_u32 =>
      _library.__cvtmask32_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__cvtmask64_u64>> get _cvtmask64_u64 =>
      _library.__cvtmask64_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__cvtu32_mask8>> get _cvtu32_mask8 =>
      _library.__cvtu32_mask8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__cvtu32_mask16>> get _cvtu32_mask16 =>
      _library.__cvtu32_mask16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__cvtu32_mask32>> get _cvtu32_mask32 =>
      _library.__cvtu32_mask32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__cvtu64_mask64>> get _cvtu64_mask64 =>
      _library.__cvtu64_mask64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm512_kmov>> get _mm512_kmov =>
      _library.__mm512_kmov_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kortest_mask8_u8>>
      get _kortest_mask8_u8 => _library.__kortest_mask8_u8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kortest_mask16_u8>>
      get _kortest_mask16_u8 => _library.__kortest_mask16_u8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kortest_mask32_u8>>
      get _kortest_mask32_u8 => _library.__kortest_mask32_u8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__kortest_mask64_u8>>
      get _kortest_mask64_u8 => _library.__kortest_mask64_u8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ktest_mask8_u8>> get _ktest_mask8_u8 =>
      _library.__ktest_mask8_u8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ktest_mask16_u8>>
      get _ktest_mask16_u8 => _library.__ktest_mask16_u8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ktest_mask32_u8>>
      get _ktest_mask32_u8 => _library.__ktest_mask32_u8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ktest_mask64_u8>>
      get _ktest_mask64_u8 => _library.__ktest_mask64_u8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tile_loadconfig>>
      get _tile_loadconfig => _library.__tile_loadconfig_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tile_storeconfig>>
      get _tile_storeconfig => _library.__tile_storeconfig_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tile_release>> get _tile_release =>
      _library.__tile_release_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tile_loadd>> get _tile_loadd =>
      _library.__tile_loadd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tile_stream_loadd>>
      get _tile_stream_loadd => _library.__tile_stream_loadd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tile_stored>> get _tile_stored =>
      _library.__tile_stored_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tile_zero>> get _tile_zero =>
      _library.__tile_zero_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tile_dpbf16ps>> get _tile_dpbf16ps =>
      _library.__tile_dpbf16ps_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tile_dpbssd>> get _tile_dpbssd =>
      _library.__tile_dpbssd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tile_dpbsud>> get _tile_dpbsud =>
      _library.__tile_dpbsud_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tile_dpbusd>> get _tile_dpbusd =>
      _library.__tile_dpbusd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tile_dpbuud>> get _tile_dpbuud =>
      _library.__tile_dpbuud_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___llwpcb>> get __llwpcb =>
      _library.___llwpcb_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___slwpcb>> get __slwpcb =>
      _library.___slwpcb_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___lwpval32>> get __lwpval32 =>
      _library.___lwpval32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___lwpins32>> get __lwpins32 =>
      _library.___lwpins32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___lwpval64>> get __lwpval64 =>
      _library.___lwpval64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___lwpins64>> get __lwpins64 =>
      _library.___lwpins64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__andn_u32>> get _andn_u32 =>
      _library.__andn_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__andn_u64>> get _andn_u64 =>
      _library.__andn_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bextri_u32>> get _bextri_u32 =>
      _library.__bextri_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blcfill_u32>> get _blcfill_u32 =>
      _library.__blcfill_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blsfill_u32>> get _blsfill_u32 =>
      _library.__blsfill_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blcs_u32>> get _blcs_u32 =>
      _library.__blcs_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tzmsk_u32>> get _tzmsk_u32 =>
      _library.__tzmsk_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blcic_u32>> get _blcic_u32 =>
      _library.__blcic_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blsic_u32>> get _blsic_u32 =>
      _library.__blsic_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__t1mskc_u32>> get _t1mskc_u32 =>
      _library.__t1mskc_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blcmsk_u32>> get _blcmsk_u32 =>
      _library.__blcmsk_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blci_u32>> get _blci_u32 =>
      _library.__blci_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bextri_u64>> get _bextri_u64 =>
      _library.__bextri_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blcfill_u64>> get _blcfill_u64 =>
      _library.__blcfill_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blsfill_u64>> get _blsfill_u64 =>
      _library.__blsfill_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blcs_u64>> get _blcs_u64 =>
      _library.__blcs_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__tzmsk_u64>> get _tzmsk_u64 =>
      _library.__tzmsk_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blcic_u64>> get _blcic_u64 =>
      _library.__blcic_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blsic_u64>> get _blsic_u64 =>
      _library.__blsic_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__t1mskc_u64>> get _t1mskc_u64 =>
      _library.__t1mskc_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blcmsk_u64>> get _blcmsk_u64 =>
      _library.__blcmsk_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__blci_u64>> get _blci_u64 =>
      _library.__blci_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_monitorx>> get _mm_monitorx =>
      _library.__mm_monitorx_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_mwaitx>> get _mm_mwaitx =>
      _library.__mm_mwaitx_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_clzero>> get _mm_clzero =>
      _library.__mm_clzero_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___rmpupdate>> get __rmpupdate =>
      _library.___rmpupdate_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___pvalidate>> get __pvalidate =>
      _library.___pvalidate_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___psmash>> get __psmash =>
      _library.___psmash_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___rmpadjust>> get __rmpadjust =>
      _library.___rmpadjust_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___svm_invlpgb>> get __svm_invlpgb =>
      _library.___svm_invlpgb_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___svm_tlbsync>> get __svm_tlbsync =>
      _library.___svm_tlbsync_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__AddressOfReturnAddress>>
      get _AddressOfReturnAddress => _library.__AddressOfReturnAddress_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedAnd16_np>>
      get _InterlockedAnd16_np => _library.__InterlockedAnd16_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedAnd64_np>>
      get _InterlockedAnd64_np => _library.__InterlockedAnd64_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedAnd8_np>>
      get _InterlockedAnd8_np => _library.__InterlockedAnd8_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedAnd_np>>
      get _InterlockedAnd_np => _library.__InterlockedAnd_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedCompareExchange128_np>>
      get _InterlockedCompareExchange128_np =>
          _library.__InterlockedCompareExchange128_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedCompareExchange16_np>>
      get _InterlockedCompareExchange16_np =>
          _library.__InterlockedCompareExchange16_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedCompareExchange64_np>>
      get _InterlockedCompareExchange64_np =>
          _library.__InterlockedCompareExchange64_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedCompareExchangePointer>>
      get _InterlockedCompareExchangePointer =>
          _library.__InterlockedCompareExchangePointer_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedCompareExchangePointer_np>>
      get _InterlockedCompareExchangePointer_np =>
          _library.__InterlockedCompareExchangePointer_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedCompareExchange_np>>
      get _InterlockedCompareExchange_np =>
          _library.__InterlockedCompareExchange_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedExchangePointer>>
      get _InterlockedExchangePointer =>
          _library.__InterlockedExchangePointer_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedOr16_np>>
      get _InterlockedOr16_np => _library.__InterlockedOr16_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedOr64_np>>
      get _InterlockedOr64_np => _library.__InterlockedOr64_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedOr8_np>>
      get _InterlockedOr8_np => _library.__InterlockedOr8_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedOr_np>>
      get _InterlockedOr_np => _library.__InterlockedOr_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedXor16_np>>
      get _InterlockedXor16_np => _library.__InterlockedXor16_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedXor64_np>>
      get _InterlockedXor64_np => _library.__InterlockedXor64_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedXor8_np>>
      get _InterlockedXor8_np => _library.__InterlockedXor8_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__InterlockedXor_np>>
      get _InterlockedXor_np => _library.__InterlockedXor_np_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ReadBarrier>> get _ReadBarrier =>
      _library.__ReadBarrier_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__ReturnAddress>> get _ReturnAddress =>
      _library.__ReturnAddress_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__WriteBarrier>> get _WriteBarrier =>
      _library.__WriteBarrier_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___addgsbyte>> get __addgsbyte =>
      _library.___addgsbyte_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___addgsdword>> get __addgsdword =>
      _library.___addgsdword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___addgsqword>> get __addgsqword =>
      _library.___addgsqword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___addgsword>> get __addgsword =>
      _library.___addgsword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___clts>> get __clts =>
      _library.___clts_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___code_seg>> get __code_seg =>
      _library.___code_seg_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___cpuid>> get __cpuid =>
      _library.___cpuid_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___cpuidex>> get __cpuidex =>
      _library.___cpuidex_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___debugbreak>> get __debugbreak =>
      _library.___debugbreak_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___emul>> get __emul =>
      _library.___emul_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___emulu>> get __emulu =>
      _library.___emulu_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___fastfail>> get __fastfail =>
      _library.___fastfail_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___faststorefence>>
      get __faststorefence => _library.___faststorefence_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___getcallerseflags>>
      get __getcallerseflags => _library.___getcallerseflags_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___halt>> get __halt =>
      _library.___halt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___inbyte>> get __inbyte =>
      _library.___inbyte_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___inbytestring>> get __inbytestring =>
      _library.___inbytestring_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___incgsbyte>> get __incgsbyte =>
      _library.___incgsbyte_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___incgsdword>> get __incgsdword =>
      _library.___incgsdword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___incgsqword>> get __incgsqword =>
      _library.___incgsqword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___incgsword>> get __incgsword =>
      _library.___incgsword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___indword>> get __indword =>
      _library.___indword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___indwordstring>> get __indwordstring =>
      _library.___indwordstring_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___int2c>> get __int2c =>
      _library.___int2c_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___invlpg>> get __invlpg =>
      _library.___invlpg_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___inword>> get __inword =>
      _library.___inword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___inwordstring>> get __inwordstring =>
      _library.___inwordstring_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___lidt>> get __lidt =>
      _library.___lidt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___ll_lshift>> get __ll_lshift =>
      _library.___ll_lshift_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___ll_rshift>> get __ll_rshift =>
      _library.___ll_rshift_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___movsb>> get __movsb =>
      _library.___movsb_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___movsd>> get __movsd =>
      _library.___movsd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___movsq>> get __movsq =>
      _library.___movsq_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___movsw>> get __movsw =>
      _library.___movsw_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___mulh>> get __mulh =>
      _library.___mulh_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___nop>> get __nop =>
      _library.___nop_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___nvreg_restore_fence>>
      get __nvreg_restore_fence => _library.___nvreg_restore_fence_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___nvreg_save_fence>>
      get __nvreg_save_fence => _library.___nvreg_save_fence_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___outbyte>> get __outbyte =>
      _library.___outbyte_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___outbytestring>> get __outbytestring =>
      _library.___outbytestring_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___outdword>> get __outdword =>
      _library.___outdword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___outdwordstring>>
      get __outdwordstring => _library.___outdwordstring_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___outword>> get __outword =>
      _library.___outword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___outwordstring>> get __outwordstring =>
      _library.___outwordstring_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___rdtsc>> get __rdtsc =>
      _library.___rdtsc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___rdtscp>> get __rdtscp =>
      _library.___rdtscp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___readcr0>> get __readcr0 =>
      _library.___readcr0_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___readcr2>> get __readcr2 =>
      _library.___readcr2_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___readcr3>> get __readcr3 =>
      _library.___readcr3_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___readcr4>> get __readcr4 =>
      _library.___readcr4_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___readcr8>> get __readcr8 =>
      _library.___readcr8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___readdr>> get __readdr =>
      _library.___readdr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___readeflags>> get __readeflags =>
      _library.___readeflags_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___readgsbyte>> get __readgsbyte =>
      _library.___readgsbyte_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___readgsdword>> get __readgsdword =>
      _library.___readgsdword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___readgsqword>> get __readgsqword =>
      _library.___readgsqword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___readgsword>> get __readgsword =>
      _library.___readgsword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___readmsr>> get __readmsr =>
      _library.___readmsr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___readpmc>> get __readpmc =>
      _library.___readpmc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___segmentlimit>> get __segmentlimit =>
      _library.___segmentlimit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___shiftleft128>> get __shiftleft128 =>
      _library.___shiftleft128_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___sidt>> get __sidt =>
      _library.___sidt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stosb>> get __stosb =>
      _library.___stosb_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stosd>> get __stosd =>
      _library.___stosd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stosq>> get __stosq =>
      _library.___stosq_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___stosw>> get __stosw =>
      _library.___stosw_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___svm_clgi>> get __svm_clgi =>
      _library.___svm_clgi_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___svm_invlpga>> get __svm_invlpga =>
      _library.___svm_invlpga_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___svm_skinit>> get __svm_skinit =>
      _library.___svm_skinit_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___svm_stgi>> get __svm_stgi =>
      _library.___svm_stgi_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___svm_vmload>> get __svm_vmload =>
      _library.___svm_vmload_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___svm_vmrun>> get __svm_vmrun =>
      _library.___svm_vmrun_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___svm_vmsave>> get __svm_vmsave =>
      _library.___svm_vmsave_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___ud2>> get __ud2 =>
      _library.___ud2_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___ull_rshift>> get __ull_rshift =>
      _library.___ull_rshift_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___umulh>> get __umulh =>
      _library.___umulh_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___vmx_off>> get __vmx_off =>
      _library.___vmx_off_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___vmx_on>> get __vmx_on =>
      _library.___vmx_on_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___vmx_vmclear>> get __vmx_vmclear =>
      _library.___vmx_vmclear_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___vmx_vmlaunch>> get __vmx_vmlaunch =>
      _library.___vmx_vmlaunch_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___vmx_vmptrld>> get __vmx_vmptrld =>
      _library.___vmx_vmptrld_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___vmx_vmptrst>> get __vmx_vmptrst =>
      _library.___vmx_vmptrst_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___vmx_vmread>> get __vmx_vmread =>
      _library.___vmx_vmread_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___vmx_vmresume>> get __vmx_vmresume =>
      _library.___vmx_vmresume_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___vmx_vmwrite>> get __vmx_vmwrite =>
      _library.___vmx_vmwrite_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___wbinvd>> get __wbinvd =>
      _library.___wbinvd_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___writecr0>> get __writecr0 =>
      _library.___writecr0_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___writecr2>> get __writecr2 =>
      _library.___writecr2_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___writecr3>> get __writecr3 =>
      _library.___writecr3_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___writecr4>> get __writecr4 =>
      _library.___writecr4_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___writecr8>> get __writecr8 =>
      _library.___writecr8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___writedr>> get __writedr =>
      _library.___writedr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___writeeflags>> get __writeeflags =>
      _library.___writeeflags_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___writegsbyte>> get __writegsbyte =>
      _library.___writegsbyte_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___writegsdword>> get __writegsdword =>
      _library.___writegsdword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___writegsqword>> get __writegsqword =>
      _library.___writegsqword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___writegsword>> get __writegsword =>
      _library.___writegsword_ptr;
  ffi.Pointer<ffi.NativeFunction<Native___writemsr>> get __writemsr =>
      _library.___writemsr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bittest64>> get _bittest64 =>
      _library.__bittest64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bittestandcomplement>>
      get _bittestandcomplement => _library.__bittestandcomplement_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bittestandcomplement64>>
      get _bittestandcomplement64 => _library.__bittestandcomplement64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bittestandreset>>
      get _bittestandreset => _library.__bittestandreset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bittestandreset64>>
      get _bittestandreset64 => _library.__bittestandreset64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bittestandset>> get _bittestandset =>
      _library.__bittestandset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__bittestandset64>>
      get _bittestandset64 => _library.__bittestandset64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__disable>> get _disable =>
      _library.__disable_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__enable>> get _enable =>
      _library.__enable_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__interlockedbittestandreset>>
      get _interlockedbittestandreset =>
          _library.__interlockedbittestandreset_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__interlockedbittestandreset64>>
      get _interlockedbittestandreset64 =>
          _library.__interlockedbittestandreset64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__interlockedbittestandset64>>
      get _interlockedbittestandset64 =>
          _library.__interlockedbittestandset64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__m_prefetch>> get _m_prefetch =>
      _library.__m_prefetch_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__m_prefetchw>> get _m_prefetchw =>
      _library.__m_prefetchw_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_clflushopt>> get _mm_clflushopt =>
      _library.__mm_clflushopt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_clwb>> get _mm_clwb =>
      _library.__mm_clwb_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mm_stream_si64x>>
      get _mm_stream_si64x => _library.__mm_stream_si64x_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__mul128>> get _mul128 =>
      _library.__mul128_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rotl16>> get _rotl16 =>
      _library.__rotl16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rotl8>> get _rotl8 =>
      _library.__rotl8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rotr16>> get _rotr16 =>
      _library.__rotr16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rotr8>> get _rotr8 =>
      _library.__rotr8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__setjmpex>> get _setjmpex =>
      _library.__setjmpex_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__rsm>> get _rsm => _library.__rsm_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__lgdt>> get _lgdt =>
      _library.__lgdt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__sgdt>> get _sgdt =>
      _library.__sgdt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__clac>> get _clac =>
      _library.__clac_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__stac>> get _stac =>
      _library.__stac_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__addcarry_u8>> get _addcarry_u8 =>
      _library.__addcarry_u8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__subborrow_u8>> get _subborrow_u8 =>
      _library.__subborrow_u8_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__addcarry_u16>> get _addcarry_u16 =>
      _library.__addcarry_u16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__subborrow_u16>> get _subborrow_u16 =>
      _library.__subborrow_u16_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__addcarry_u32>> get _addcarry_u32 =>
      _library.__addcarry_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__subborrow_u32>> get _subborrow_u32 =>
      _library.__subborrow_u32_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__addcarry_u64>> get _addcarry_u64 =>
      _library.__addcarry_u64_ptr;
  ffi.Pointer<ffi.NativeFunction<Native__subborrow_u64>> get _subborrow_u64 =>
      _library.__subborrow_u64_ptr;
  ffi.Pointer<ffi.Int32> get Concurrency => _library._Concurrency;
}

class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> _locale_pctype;

  @ffi.Int32()
  external int _locale_mb_cur_max;

  @ffi.Uint32()
  external int _locale_lc_codepage;
}

class __crt_locale_data extends ffi.Opaque {}

class __crt_multibyte_data extends ffi.Opaque {}

class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class _Mbstatet extends ffi.Struct {
  @ffi.Uint64()
  external int _Wchar;

  @ffi.Uint16()
  external int _Byte;

  @ffi.Uint16()
  external int _State;
}

class _CrtMemBlockHeader extends ffi.Opaque {}

class _CrtMemState extends ffi.Opaque {}

class _exception extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external ffi.Pointer<ffi.Int8> name;

  @ffi.Double()
  external double arg1;

  @ffi.Double()
  external double arg2;

  @ffi.Double()
  external double retval;
}

class _complex extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class _LDOUBLE extends ffi.Opaque {}

class _CRT_DOUBLE extends ffi.Struct {
  @ffi.Double()
  external double x;
}

class _CRT_FLOAT extends ffi.Struct {
  @ffi.Float()
  external double f;
}

class _LONGDOUBLE extends ffi.Opaque {}

class _LDBL12 extends ffi.Opaque {}

class _EXCEPTION_POINTERS extends ffi.Opaque {}

class __std_exception_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> _What;

  @ffi.Int32()
  external int _DoFree;
}

class _wfinddata32_t extends ffi.Opaque {}

class _wfinddata32i64_t extends ffi.Opaque {}

class _wfinddata64i32_t extends ffi.Opaque {}

class _wfinddata64_t extends ffi.Opaque {}

class tm extends ffi.Struct {
  @ffi.Int32()
  external int tm_sec;

  @ffi.Int32()
  external int tm_min;

  @ffi.Int32()
  external int tm_hour;

  @ffi.Int32()
  external int tm_mday;

  @ffi.Int32()
  external int tm_mon;

  @ffi.Int32()
  external int tm_year;

  @ffi.Int32()
  external int tm_wday;

  @ffi.Int32()
  external int tm_yday;

  @ffi.Int32()
  external int tm_isdst;
}

class _stat32 extends ffi.Struct {
  @ffi.Uint32()
  external int st_dev;

  @ffi.Uint16()
  external int st_ino;

  @ffi.Uint16()
  external int st_mode;

  @ffi.Int16()
  external int st_nlink;

  @ffi.Int16()
  external int st_uid;

  @ffi.Int16()
  external int st_gid;

  @ffi.Uint32()
  external int st_rdev;

  @ffi.Int64()
  external int st_size;

  @ffi.Int64()
  external int st_atime;

  @ffi.Int64()
  external int st_mtime;

  @ffi.Int64()
  external int st_ctime;
}

class _stat32i64 extends ffi.Struct {
  @ffi.Uint32()
  external int st_dev;

  @ffi.Uint16()
  external int st_ino;

  @ffi.Uint16()
  external int st_mode;

  @ffi.Int16()
  external int st_nlink;

  @ffi.Int16()
  external int st_uid;

  @ffi.Int16()
  external int st_gid;

  @ffi.Uint32()
  external int st_rdev;

  @ffi.Int64()
  external int st_size;

  @ffi.Int64()
  external int st_atime;

  @ffi.Int64()
  external int st_mtime;

  @ffi.Int64()
  external int st_ctime;
}

class _stat64i32 extends ffi.Struct {
  @ffi.Uint32()
  external int st_dev;

  @ffi.Uint16()
  external int st_ino;

  @ffi.Uint16()
  external int st_mode;

  @ffi.Int16()
  external int st_nlink;

  @ffi.Int16()
  external int st_uid;

  @ffi.Int16()
  external int st_gid;

  @ffi.Uint32()
  external int st_rdev;

  @ffi.Int64()
  external int st_size;

  @ffi.Int64()
  external int st_atime;

  @ffi.Int64()
  external int st_mtime;

  @ffi.Int64()
  external int st_ctime;
}

class _stat64 extends ffi.Struct {
  @ffi.Uint32()
  external int st_dev;

  @ffi.Uint16()
  external int st_ino;

  @ffi.Uint16()
  external int st_mode;

  @ffi.Int16()
  external int st_nlink;

  @ffi.Int16()
  external int st_uid;

  @ffi.Int16()
  external int st_gid;

  @ffi.Uint32()
  external int st_rdev;

  @ffi.Int64()
  external int st_size;

  @ffi.Int64()
  external int st_atime;

  @ffi.Int64()
  external int st_mtime;

  @ffi.Int64()
  external int st_ctime;
}

class stat extends ffi.Struct {
  @ffi.Uint32()
  external int st_dev;

  @ffi.Uint16()
  external int st_ino;

  @ffi.Uint16()
  external int st_mode;

  @ffi.Int16()
  external int st_nlink;

  @ffi.Int16()
  external int st_uid;

  @ffi.Int16()
  external int st_gid;

  @ffi.Uint32()
  external int st_rdev;

  @ffi.Int64()
  external int st_size;

  @ffi.Int64()
  external int st_atime;

  @ffi.Int64()
  external int st_mtime;

  @ffi.Int64()
  external int st_ctime;
}

class __std_type_info_data extends ffi.Opaque {}

abstract class ISA_AVAILABILITY {
  static const int __ISA_AVAILABLE_X86 = 0;
  static const int __ISA_AVAILABLE_SSE2 = 1;
  static const int __ISA_AVAILABLE_SSE42 = 2;
  static const int __ISA_AVAILABLE_AVX = 3;
  static const int __ISA_AVAILABLE_ENFSTRG = 4;
  static const int __ISA_AVAILABLE_AVX2 = 5;
  static const int __ISA_AVAILABLE_AVX512 = 6;
  static const int __ISA_AVAILABLE_ARMNT = 0;
  static const int __ISA_AVAILABLE_NEON = 1;
  static const int __ISA_AVAILABLE_NEON_ARM64 = 2;
}

class Cronet_Buffer extends ffi.Opaque {}

class Cronet_BufferCallback extends ffi.Opaque {}

class Cronet_Runnable extends ffi.Opaque {}

class Cronet_Executor extends ffi.Opaque {}

class Cronet_Engine extends ffi.Opaque {}

class Cronet_UrlRequestStatusListener extends ffi.Opaque {}

class Cronet_UrlRequestCallback extends ffi.Opaque {}

class Cronet_UploadDataSink extends ffi.Opaque {}

class Cronet_UploadDataProvider extends ffi.Opaque {}

class Cronet_UrlRequest extends ffi.Opaque {}

class Cronet_RequestFinishedInfoListener extends ffi.Opaque {}

class Cronet_Error extends ffi.Opaque {}

class Cronet_QuicHint extends ffi.Opaque {}

class Cronet_PublicKeyPins extends ffi.Opaque {}

class Cronet_EngineParams extends ffi.Opaque {}

class Cronet_HttpHeader extends ffi.Opaque {}

class Cronet_UrlResponseInfo extends ffi.Opaque {}

class Cronet_UrlRequestParams extends ffi.Opaque {}

class Cronet_DateTime extends ffi.Opaque {}

class Cronet_Metrics extends ffi.Opaque {}

class Cronet_RequestFinishedInfo extends ffi.Opaque {}

abstract class Cronet_RESULT {
  static const int Cronet_RESULT_SUCCESS = 0;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT = -100;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_STORAGE_PATH_MUST_EXIST =
      -101;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_PIN = -102;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HOSTNAME = -103;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_METHOD = -104;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_HEADER = -105;
  static const int Cronet_RESULT_ILLEGAL_STATE = -200;
  static const int Cronet_RESULT_ILLEGAL_STATE_STORAGE_PATH_IN_USE = -201;
  static const int
      Cronet_RESULT_ILLEGAL_STATE_CANNOT_SHUTDOWN_ENGINE_FROM_NETWORK_THREAD =
      -202;
  static const int Cronet_RESULT_ILLEGAL_STATE_ENGINE_ALREADY_STARTED = -203;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_ALREADY_STARTED = -204;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_NOT_INITIALIZED = -205;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_ALREADY_INITIALIZED =
      -206;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_NOT_STARTED = -207;
  static const int Cronet_RESULT_ILLEGAL_STATE_UNEXPECTED_REDIRECT = -208;
  static const int Cronet_RESULT_ILLEGAL_STATE_UNEXPECTED_READ = -209;
  static const int Cronet_RESULT_ILLEGAL_STATE_READ_FAILED = -210;
  static const int Cronet_RESULT_NULL_POINTER = -300;
  static const int Cronet_RESULT_NULL_POINTER_HOSTNAME = -301;
  static const int Cronet_RESULT_NULL_POINTER_SHA256_PINS = -302;
  static const int Cronet_RESULT_NULL_POINTER_EXPIRATION_DATE = -303;
  static const int Cronet_RESULT_NULL_POINTER_ENGINE = -304;
  static const int Cronet_RESULT_NULL_POINTER_URL = -305;
  static const int Cronet_RESULT_NULL_POINTER_CALLBACK = -306;
  static const int Cronet_RESULT_NULL_POINTER_EXECUTOR = -307;
  static const int Cronet_RESULT_NULL_POINTER_METHOD = -308;
  static const int Cronet_RESULT_NULL_POINTER_HEADER_NAME = -309;
  static const int Cronet_RESULT_NULL_POINTER_HEADER_VALUE = -310;
  static const int Cronet_RESULT_NULL_POINTER_PARAMS = -311;
  static const int
      Cronet_RESULT_NULL_POINTER_REQUEST_FINISHED_INFO_LISTENER_EXECUTOR = -312;
}

abstract class Cronet_Error_ERROR_CODE {
  static const int Cronet_Error_ERROR_CODE_ERROR_CALLBACK = 0;
  static const int Cronet_Error_ERROR_CODE_ERROR_HOSTNAME_NOT_RESOLVED = 1;
  static const int Cronet_Error_ERROR_CODE_ERROR_INTERNET_DISCONNECTED = 2;
  static const int Cronet_Error_ERROR_CODE_ERROR_NETWORK_CHANGED = 3;
  static const int Cronet_Error_ERROR_CODE_ERROR_TIMED_OUT = 4;
  static const int Cronet_Error_ERROR_CODE_ERROR_CONNECTION_CLOSED = 5;
  static const int Cronet_Error_ERROR_CODE_ERROR_CONNECTION_TIMED_OUT = 6;
  static const int Cronet_Error_ERROR_CODE_ERROR_CONNECTION_REFUSED = 7;
  static const int Cronet_Error_ERROR_CODE_ERROR_CONNECTION_RESET = 8;
  static const int Cronet_Error_ERROR_CODE_ERROR_ADDRESS_UNREACHABLE = 9;
  static const int Cronet_Error_ERROR_CODE_ERROR_QUIC_PROTOCOL_FAILED = 10;
  static const int Cronet_Error_ERROR_CODE_ERROR_OTHER = 11;
}

abstract class Cronet_EngineParams_HTTP_CACHE_MODE {
  static const int Cronet_EngineParams_HTTP_CACHE_MODE_DISABLED = 0;
  static const int Cronet_EngineParams_HTTP_CACHE_MODE_IN_MEMORY = 1;
  static const int Cronet_EngineParams_HTTP_CACHE_MODE_DISK_NO_HTTP = 2;
  static const int Cronet_EngineParams_HTTP_CACHE_MODE_DISK = 3;
}

abstract class Cronet_UrlRequestParams_REQUEST_PRIORITY {
  static const int
      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_IDLE = 0;
  static const int
      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_LOWEST = 1;
  static const int
      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_LOW = 2;
  static const int
      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_MEDIUM = 3;
  static const int
      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_HIGHEST = 4;
}

abstract class Cronet_UrlRequestParams_IDEMPOTENCY {
  static const int Cronet_UrlRequestParams_IDEMPOTENCY_DEFAULT_IDEMPOTENCY = 0;
  static const int Cronet_UrlRequestParams_IDEMPOTENCY_IDEMPOTENT = 1;
  static const int Cronet_UrlRequestParams_IDEMPOTENCY_NOT_IDEMPOTENT = 2;
}

abstract class Cronet_RequestFinishedInfo_FINISHED_REASON {
  static const int Cronet_RequestFinishedInfo_FINISHED_REASON_SUCCEEDED = 0;
  static const int Cronet_RequestFinishedInfo_FINISHED_REASON_FAILED = 1;
  static const int Cronet_RequestFinishedInfo_FINISHED_REASON_CANCELED = 2;
}

abstract class Cronet_UrlRequestStatusListener_Status {
  static const int Cronet_UrlRequestStatusListener_Status_INVALID = -1;
  static const int Cronet_UrlRequestStatusListener_Status_IDLE = 0;
  static const int
      Cronet_UrlRequestStatusListener_Status_WAITING_FOR_STALLED_SOCKET_POOL =
      1;
  static const int
      Cronet_UrlRequestStatusListener_Status_WAITING_FOR_AVAILABLE_SOCKET = 2;
  static const int Cronet_UrlRequestStatusListener_Status_WAITING_FOR_DELEGATE =
      3;
  static const int Cronet_UrlRequestStatusListener_Status_WAITING_FOR_CACHE = 4;
  static const int Cronet_UrlRequestStatusListener_Status_DOWNLOADING_PAC_FILE =
      5;
  static const int
      Cronet_UrlRequestStatusListener_Status_RESOLVING_PROXY_FOR_URL = 6;
  static const int
      Cronet_UrlRequestStatusListener_Status_RESOLVING_HOST_IN_PAC_FILE = 7;
  static const int
      Cronet_UrlRequestStatusListener_Status_ESTABLISHING_PROXY_TUNNEL = 8;
  static const int Cronet_UrlRequestStatusListener_Status_RESOLVING_HOST = 9;
  static const int Cronet_UrlRequestStatusListener_Status_CONNECTING = 10;
  static const int Cronet_UrlRequestStatusListener_Status_SSL_HANDSHAKE = 11;
  static const int Cronet_UrlRequestStatusListener_Status_SENDING_REQUEST = 12;
  static const int Cronet_UrlRequestStatusListener_Status_WAITING_FOR_RESPONSE =
      13;
  static const int Cronet_UrlRequestStatusListener_Status_READING_RESPONSE = 14;
}

class FILE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _Placeholder;
}

class stream_engine extends ffi.Opaque {}

class _timespec32 extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

class _timespec64 extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

class timespec extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

class _Thrd_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _Hnd;

  @ffi.Int32()
  external int _Id;
}

class lconv extends ffi.Opaque {}

class _Ctypevec extends ffi.Struct {
  @ffi.Uint32()
  external int _Page;

  external ffi.Pointer<ffi.Int16> _Table;

  @ffi.Int32()
  external int _Delfl;

  external ffi.Pointer<ffi.Uint16> _LocaleName;
}

class _Cvtvec extends ffi.Opaque {}

abstract class _crt_exit_return_mode {
  static const int _crt_exit_terminate_process = 0;
  static const int _crt_exit_return_to_caller = 1;
}

abstract class _crt_exit_cleanup_mode {
  static const int _crt_exit_full_cleanup = 0;
  static const int _crt_exit_quick_cleanup = 1;
  static const int _crt_exit_no_cleanup = 2;
}

abstract class _crt_app_type {
  static const int _crt_unknown_app = 0;
  static const int _crt_console_app = 1;
  static const int _crt_gui_app = 2;
}

class _onexit_table_t extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_PVFV>>> _first;

  external ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_PVFV>>> _last;

  external ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_PVFV>>> _end;
}

class _JUMP_BUFFER extends ffi.Struct {
  @ffi.Uint64()
  external int Frame;

  @ffi.Uint64()
  external int Rbx;

  @ffi.Uint64()
  external int Rsp;

  @ffi.Uint64()
  external int Rbp;

  @ffi.Uint64()
  external int Rsi;

  @ffi.Uint64()
  external int Rdi;

  @ffi.Uint64()
  external int R12;

  @ffi.Uint64()
  external int R13;

  @ffi.Uint64()
  external int R14;

  @ffi.Uint64()
  external int R15;

  @ffi.Uint64()
  external int Rip;

  @ffi.Uint64()
  external int MxCsr;

  @ffi.Uint16()
  external int FpCsr;

  @ffi.Uint16()
  external int Spare;

  @ffi.Int32()
  external int Xmm6;

  @ffi.Int32()
  external int Xmm7;

  @ffi.Int32()
  external int Xmm8;

  @ffi.Int32()
  external int Xmm9;

  @ffi.Int32()
  external int Xmm10;

  @ffi.Int32()
  external int Xmm11;

  @ffi.Int32()
  external int Xmm12;

  @ffi.Int32()
  external int Xmm13;

  @ffi.Int32()
  external int Xmm14;

  @ffi.Int32()
  external int Xmm15;
}

class __m128d extends ffi.Opaque {}

class __m256d extends ffi.Opaque {}

class __m512d extends ffi.Opaque {}

abstract class _MM_BROADCAST32_ENUM {
  static const int _MM_BROADCAST32_NONE = 0;
  static const int _MM_BROADCAST_1X16 = 1;
  static const int _MM_BROADCAST_4X16 = 2;
}

abstract class _MM_BROADCAST64_ENUM {
  static const int _MM_BROADCAST64_NONE = 0;
  static const int _MM_BROADCAST_1X8 = 1;
  static const int _MM_BROADCAST_4X8 = 2;
}

abstract class _MM_ROUND_MODE_ENUM {
  static const int _MM_ROUND_MODE_NEAREST = 0;
  static const int _MM_ROUND_MODE_DOWN = 1;
  static const int _MM_ROUND_MODE_UP = 2;
  static const int _MM_ROUND_MODE_TOWARD_ZERO = 3;
  static const int _MM_ROUND_MODE_DEFAULT = 4;
  static const int _MM_ROUND_MODE_NO_EXC = 8;
}

abstract class _MM_EXP_ADJ_ENUM {
  static const int _MM_EXPADJ_NONE = 0;
  static const int _MM_EXPADJ_4 = 1;
  static const int _MM_EXPADJ_5 = 2;
  static const int _MM_EXPADJ_8 = 3;
  static const int _MM_EXPADJ_16 = 4;
  static const int _MM_EXPADJ_24 = 5;
  static const int _MM_EXPADJ_31 = 6;
  static const int _MM_EXPADJ_32 = 7;
}

abstract class _MM_INDEX_SCALE_ENUM {
  static const int _MM_SCALE_1 = 1;
  static const int _MM_SCALE_2 = 2;
  static const int _MM_SCALE_4 = 4;
  static const int _MM_SCALE_8 = 8;
}

abstract class _MM_PERM_ENUM {
  static const int _MM_PERM_AAAA = 0;
  static const int _MM_PERM_AAAB = 1;
  static const int _MM_PERM_AAAC = 2;
  static const int _MM_PERM_AAAD = 3;
  static const int _MM_PERM_AABA = 4;
  static const int _MM_PERM_AABB = 5;
  static const int _MM_PERM_AABC = 6;
  static const int _MM_PERM_AABD = 7;
  static const int _MM_PERM_AACA = 8;
  static const int _MM_PERM_AACB = 9;
  static const int _MM_PERM_AACC = 10;
  static const int _MM_PERM_AACD = 11;
  static const int _MM_PERM_AADA = 12;
  static const int _MM_PERM_AADB = 13;
  static const int _MM_PERM_AADC = 14;
  static const int _MM_PERM_AADD = 15;
  static const int _MM_PERM_ABAA = 16;
  static const int _MM_PERM_ABAB = 17;
  static const int _MM_PERM_ABAC = 18;
  static const int _MM_PERM_ABAD = 19;
  static const int _MM_PERM_ABBA = 20;
  static const int _MM_PERM_ABBB = 21;
  static const int _MM_PERM_ABBC = 22;
  static const int _MM_PERM_ABBD = 23;
  static const int _MM_PERM_ABCA = 24;
  static const int _MM_PERM_ABCB = 25;
  static const int _MM_PERM_ABCC = 26;
  static const int _MM_PERM_ABCD = 27;
  static const int _MM_PERM_ABDA = 28;
  static const int _MM_PERM_ABDB = 29;
  static const int _MM_PERM_ABDC = 30;
  static const int _MM_PERM_ABDD = 31;
  static const int _MM_PERM_ACAA = 32;
  static const int _MM_PERM_ACAB = 33;
  static const int _MM_PERM_ACAC = 34;
  static const int _MM_PERM_ACAD = 35;
  static const int _MM_PERM_ACBA = 36;
  static const int _MM_PERM_ACBB = 37;
  static const int _MM_PERM_ACBC = 38;
  static const int _MM_PERM_ACBD = 39;
  static const int _MM_PERM_ACCA = 40;
  static const int _MM_PERM_ACCB = 41;
  static const int _MM_PERM_ACCC = 42;
  static const int _MM_PERM_ACCD = 43;
  static const int _MM_PERM_ACDA = 44;
  static const int _MM_PERM_ACDB = 45;
  static const int _MM_PERM_ACDC = 46;
  static const int _MM_PERM_ACDD = 47;
  static const int _MM_PERM_ADAA = 48;
  static const int _MM_PERM_ADAB = 49;
  static const int _MM_PERM_ADAC = 50;
  static const int _MM_PERM_ADAD = 51;
  static const int _MM_PERM_ADBA = 52;
  static const int _MM_PERM_ADBB = 53;
  static const int _MM_PERM_ADBC = 54;
  static const int _MM_PERM_ADBD = 55;
  static const int _MM_PERM_ADCA = 56;
  static const int _MM_PERM_ADCB = 57;
  static const int _MM_PERM_ADCC = 58;
  static const int _MM_PERM_ADCD = 59;
  static const int _MM_PERM_ADDA = 60;
  static const int _MM_PERM_ADDB = 61;
  static const int _MM_PERM_ADDC = 62;
  static const int _MM_PERM_ADDD = 63;
  static const int _MM_PERM_BAAA = 64;
  static const int _MM_PERM_BAAB = 65;
  static const int _MM_PERM_BAAC = 66;
  static const int _MM_PERM_BAAD = 67;
  static const int _MM_PERM_BABA = 68;
  static const int _MM_PERM_BABB = 69;
  static const int _MM_PERM_BABC = 70;
  static const int _MM_PERM_BABD = 71;
  static const int _MM_PERM_BACA = 72;
  static const int _MM_PERM_BACB = 73;
  static const int _MM_PERM_BACC = 74;
  static const int _MM_PERM_BACD = 75;
  static const int _MM_PERM_BADA = 76;
  static const int _MM_PERM_BADB = 77;
  static const int _MM_PERM_BADC = 78;
  static const int _MM_PERM_BADD = 79;
  static const int _MM_PERM_BBAA = 80;
  static const int _MM_PERM_BBAB = 81;
  static const int _MM_PERM_BBAC = 82;
  static const int _MM_PERM_BBAD = 83;
  static const int _MM_PERM_BBBA = 84;
  static const int _MM_PERM_BBBB = 85;
  static const int _MM_PERM_BBBC = 86;
  static const int _MM_PERM_BBBD = 87;
  static const int _MM_PERM_BBCA = 88;
  static const int _MM_PERM_BBCB = 89;
  static const int _MM_PERM_BBCC = 90;
  static const int _MM_PERM_BBCD = 91;
  static const int _MM_PERM_BBDA = 92;
  static const int _MM_PERM_BBDB = 93;
  static const int _MM_PERM_BBDC = 94;
  static const int _MM_PERM_BBDD = 95;
  static const int _MM_PERM_BCAA = 96;
  static const int _MM_PERM_BCAB = 97;
  static const int _MM_PERM_BCAC = 98;
  static const int _MM_PERM_BCAD = 99;
  static const int _MM_PERM_BCBA = 100;
  static const int _MM_PERM_BCBB = 101;
  static const int _MM_PERM_BCBC = 102;
  static const int _MM_PERM_BCBD = 103;
  static const int _MM_PERM_BCCA = 104;
  static const int _MM_PERM_BCCB = 105;
  static const int _MM_PERM_BCCC = 106;
  static const int _MM_PERM_BCCD = 107;
  static const int _MM_PERM_BCDA = 108;
  static const int _MM_PERM_BCDB = 109;
  static const int _MM_PERM_BCDC = 110;
  static const int _MM_PERM_BCDD = 111;
  static const int _MM_PERM_BDAA = 112;
  static const int _MM_PERM_BDAB = 113;
  static const int _MM_PERM_BDAC = 114;
  static const int _MM_PERM_BDAD = 115;
  static const int _MM_PERM_BDBA = 116;
  static const int _MM_PERM_BDBB = 117;
  static const int _MM_PERM_BDBC = 118;
  static const int _MM_PERM_BDBD = 119;
  static const int _MM_PERM_BDCA = 120;
  static const int _MM_PERM_BDCB = 121;
  static const int _MM_PERM_BDCC = 122;
  static const int _MM_PERM_BDCD = 123;
  static const int _MM_PERM_BDDA = 124;
  static const int _MM_PERM_BDDB = 125;
  static const int _MM_PERM_BDDC = 126;
  static const int _MM_PERM_BDDD = 127;
  static const int _MM_PERM_CAAA = 128;
  static const int _MM_PERM_CAAB = 129;
  static const int _MM_PERM_CAAC = 130;
  static const int _MM_PERM_CAAD = 131;
  static const int _MM_PERM_CABA = 132;
  static const int _MM_PERM_CABB = 133;
  static const int _MM_PERM_CABC = 134;
  static const int _MM_PERM_CABD = 135;
  static const int _MM_PERM_CACA = 136;
  static const int _MM_PERM_CACB = 137;
  static const int _MM_PERM_CACC = 138;
  static const int _MM_PERM_CACD = 139;
  static const int _MM_PERM_CADA = 140;
  static const int _MM_PERM_CADB = 141;
  static const int _MM_PERM_CADC = 142;
  static const int _MM_PERM_CADD = 143;
  static const int _MM_PERM_CBAA = 144;
  static const int _MM_PERM_CBAB = 145;
  static const int _MM_PERM_CBAC = 146;
  static const int _MM_PERM_CBAD = 147;
  static const int _MM_PERM_CBBA = 148;
  static const int _MM_PERM_CBBB = 149;
  static const int _MM_PERM_CBBC = 150;
  static const int _MM_PERM_CBBD = 151;
  static const int _MM_PERM_CBCA = 152;
  static const int _MM_PERM_CBCB = 153;
  static const int _MM_PERM_CBCC = 154;
  static const int _MM_PERM_CBCD = 155;
  static const int _MM_PERM_CBDA = 156;
  static const int _MM_PERM_CBDB = 157;
  static const int _MM_PERM_CBDC = 158;
  static const int _MM_PERM_CBDD = 159;
  static const int _MM_PERM_CCAA = 160;
  static const int _MM_PERM_CCAB = 161;
  static const int _MM_PERM_CCAC = 162;
  static const int _MM_PERM_CCAD = 163;
  static const int _MM_PERM_CCBA = 164;
  static const int _MM_PERM_CCBB = 165;
  static const int _MM_PERM_CCBC = 166;
  static const int _MM_PERM_CCBD = 167;
  static const int _MM_PERM_CCCA = 168;
  static const int _MM_PERM_CCCB = 169;
  static const int _MM_PERM_CCCC = 170;
  static const int _MM_PERM_CCCD = 171;
  static const int _MM_PERM_CCDA = 172;
  static const int _MM_PERM_CCDB = 173;
  static const int _MM_PERM_CCDC = 174;
  static const int _MM_PERM_CCDD = 175;
  static const int _MM_PERM_CDAA = 176;
  static const int _MM_PERM_CDAB = 177;
  static const int _MM_PERM_CDAC = 178;
  static const int _MM_PERM_CDAD = 179;
  static const int _MM_PERM_CDBA = 180;
  static const int _MM_PERM_CDBB = 181;
  static const int _MM_PERM_CDBC = 182;
  static const int _MM_PERM_CDBD = 183;
  static const int _MM_PERM_CDCA = 184;
  static const int _MM_PERM_CDCB = 185;
  static const int _MM_PERM_CDCC = 186;
  static const int _MM_PERM_CDCD = 187;
  static const int _MM_PERM_CDDA = 188;
  static const int _MM_PERM_CDDB = 189;
  static const int _MM_PERM_CDDC = 190;
  static const int _MM_PERM_CDDD = 191;
  static const int _MM_PERM_DAAA = 192;
  static const int _MM_PERM_DAAB = 193;
  static const int _MM_PERM_DAAC = 194;
  static const int _MM_PERM_DAAD = 195;
  static const int _MM_PERM_DABA = 196;
  static const int _MM_PERM_DABB = 197;
  static const int _MM_PERM_DABC = 198;
  static const int _MM_PERM_DABD = 199;
  static const int _MM_PERM_DACA = 200;
  static const int _MM_PERM_DACB = 201;
  static const int _MM_PERM_DACC = 202;
  static const int _MM_PERM_DACD = 203;
  static const int _MM_PERM_DADA = 204;
  static const int _MM_PERM_DADB = 205;
  static const int _MM_PERM_DADC = 206;
  static const int _MM_PERM_DADD = 207;
  static const int _MM_PERM_DBAA = 208;
  static const int _MM_PERM_DBAB = 209;
  static const int _MM_PERM_DBAC = 210;
  static const int _MM_PERM_DBAD = 211;
  static const int _MM_PERM_DBBA = 212;
  static const int _MM_PERM_DBBB = 213;
  static const int _MM_PERM_DBBC = 214;
  static const int _MM_PERM_DBBD = 215;
  static const int _MM_PERM_DBCA = 216;
  static const int _MM_PERM_DBCB = 217;
  static const int _MM_PERM_DBCC = 218;
  static const int _MM_PERM_DBCD = 219;
  static const int _MM_PERM_DBDA = 220;
  static const int _MM_PERM_DBDB = 221;
  static const int _MM_PERM_DBDC = 222;
  static const int _MM_PERM_DBDD = 223;
  static const int _MM_PERM_DCAA = 224;
  static const int _MM_PERM_DCAB = 225;
  static const int _MM_PERM_DCAC = 226;
  static const int _MM_PERM_DCAD = 227;
  static const int _MM_PERM_DCBA = 228;
  static const int _MM_PERM_DCBB = 229;
  static const int _MM_PERM_DCBC = 230;
  static const int _MM_PERM_DCBD = 231;
  static const int _MM_PERM_DCCA = 232;
  static const int _MM_PERM_DCCB = 233;
  static const int _MM_PERM_DCCC = 234;
  static const int _MM_PERM_DCCD = 235;
  static const int _MM_PERM_DCDA = 236;
  static const int _MM_PERM_DCDB = 237;
  static const int _MM_PERM_DCDC = 238;
  static const int _MM_PERM_DCDD = 239;
  static const int _MM_PERM_DDAA = 240;
  static const int _MM_PERM_DDAB = 241;
  static const int _MM_PERM_DDAC = 242;
  static const int _MM_PERM_DDAD = 243;
  static const int _MM_PERM_DDBA = 244;
  static const int _MM_PERM_DDBB = 245;
  static const int _MM_PERM_DDBC = 246;
  static const int _MM_PERM_DDBD = 247;
  static const int _MM_PERM_DDCA = 248;
  static const int _MM_PERM_DDCB = 249;
  static const int _MM_PERM_DDCC = 250;
  static const int _MM_PERM_DDCD = 251;
  static const int _MM_PERM_DDDA = 252;
  static const int _MM_PERM_DDDB = 253;
  static const int _MM_PERM_DDDC = 254;
  static const int _MM_PERM_DDDD = 255;
}

abstract class _MM_FIXUPRESULT_ENUM {
  static const int _MM_FIXUP_NO_CHANGE = 0;
  static const int _MM_FIXUP_NEG_INF = 1;
  static const int _MM_FIXUP_NEG_ZERO = 2;
  static const int _MM_FIXUP_POS_ZERO = 3;
  static const int _MM_FIXUP_POS_INF = 4;
  static const int _MM_FIXUP_NAN = 5;
  static const int _MM_FIXUP_MAX_FLOAT = 6;
  static const int _MM_FIXUP_MIN_FLOAT = 7;
}

abstract class _MM_MANTISSA_NORM_ENUM {
  static const int _MM_MANT_NORM_1_2 = 0;
  static const int _MM_MANT_NORM_p5_2 = 1;
  static const int _MM_MANT_NORM_p5_1 = 2;
  static const int _MM_MANT_NORM_p75_1p5 = 3;
}

abstract class _MM_MANTISSA_SIGN_ENUM {
  static const int _MM_MANT_SIGN_src = 0;
  static const int _MM_MANT_SIGN_zero = 1;
  static const int _MM_MANT_SIGN_nan = 2;
}

abstract class _MM_CMPINT_ENUM {
  static const int _MM_CMPINT_EQ = 0;
  static const int _MM_CMPINT_LT = 1;
  static const int _MM_CMPINT_LE = 2;
  static const int _MM_CMPINT_UNUSED = 3;
  static const int _MM_CMPINT_NE = 4;
  static const int _MM_CMPINT_NLT = 5;
  static const int _MM_CMPINT_NLE = 6;
}

class rmp_seg extends ffi.Struct {
  @ffi.Uint64()
  external int rmp_gpa;

  @ffi.Int8()
  external int rmp_entry;

  @ffi.Int8()
  external int rmp_pageSize;

  @ffi.Int8()
  external int rmp_pageMark;

  @ffi.Int8()
  external int rmp_reserved;

  @ffi.Int32()
  external int rmp_ASID;
}

const int _Thrd_success = 0;

const int _Thrd_nomem = 1;

const int _Thrd_timedout = 2;

const int _Thrd_busy = 3;

const int _Thrd_error = 4;

const int _Mtx_plain = 1;

const int _Mtx_try = 2;

const int _Mtx_timed = 4;

const int _Mtx_recursive = 256;

const int _STL_COMPILER_PREPROCESSOR = 1;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_NODISCARD = 1;

const int _STL_WARNING_LEVEL = 3;

const int _HAS_IF_CONSTEXPR = 1;

const int _HAS_CONDITIONAL_EXPLICIT = 1;

const int _STL_DISABLED_WARNING_C4984 = 4984;

const int _STL_DISABLED_WARNING_C5053 = 5053;

const int _STL_DISABLED_WARNINGS = 4180;

const int _CPPLIB_VER = 650;

const int _MSVC_STL_VERSION = 142;

const int _MSVC_STL_UPDATE = 202011;

const int _HAS_STATIC_RTTI = 1;

const int _HAS_AUTO_PTR_ETC = 1;

const int _HAS_UNEXPECTED = 1;

const int _HAS_OLD_IOSTREAMS_MEMBERS = 1;

const int _HAS_STD_BYTE = 0;

const int _HAS_FUNCTION_ALLOCATOR_SUPPORT = 1;

const int _HAS_TR1_NAMESPACE = 1;

const int _ENFORCE_MATCHING_ALLOCATORS = 0;

const int _ENFORCE_FACET_SPECIALIZATIONS = 0;

const String _FACET_SPECIALIZATION_MESSAGE =
    'Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 to suppress this diagnostic.';

const int _STL_OPTIMIZE_SYSTEM_ERROR_OPERATORS = 1;

const int _STD_VECTORIZE_WITH_FLOAT_CONTROL = 1;

const int _HAS_FEATURES_REMOVED_IN_CXX20 = 1;

const int _HAS_DEPRECATED_ADAPTOR_TYPEDEFS = 1;

const int _HAS_DEPRECATED_IS_LITERAL_TYPE = 1;

const int _HAS_DEPRECATED_NEGATORS = 1;

const int _HAS_DEPRECATED_RAW_STORAGE_ITERATOR = 1;

const int _HAS_DEPRECATED_RESULT_OF = 1;

const int _HAS_DEPRECATED_SHARED_PTR_UNIQUE = 1;

const int _HAS_DEPRECATED_TEMPORARY_BUFFER = 1;

const int _HAS_DEPRECATED_UNCAUGHT_EXCEPTION = 1;

const int _HAS_STREAM_INSERTION_OPERATORS_DELETED_IN_CXX20 = 1;

const int __cpp_lib_chrono_udls = 201304;

const int __cpp_lib_complex_udls = 201309;

const int __cpp_lib_exchange_function = 201304;

const int __cpp_lib_generic_associative_lookup = 201304;

const int __cpp_lib_integer_sequence = 201304;

const int __cpp_lib_integral_constant_callable = 201304;

const int __cpp_lib_is_final = 201402;

const int __cpp_lib_is_null_pointer = 201309;

const int __cpp_lib_make_reverse_iterator = 201402;

const int __cpp_lib_make_unique = 201304;

const int __cpp_lib_null_iterators = 201304;

const int __cpp_lib_quoted_string_io = 201304;

const int __cpp_lib_result_of_sfinae = 201210;

const int __cpp_lib_robust_nonmodifying_seq_ops = 201304;

const int __cpp_lib_shared_timed_mutex = 201402;

const int __cpp_lib_string_udls = 201304;

const int __cpp_lib_transformation_trait_aliases = 201304;

const int __cpp_lib_tuple_element_t = 201402;

const int __cpp_lib_tuples_by_type = 201304;

const int __cpp_lib_addressof_constexpr = 201603;

const int __cpp_lib_allocator_traits_is_always_equal = 201411;

const int __cpp_lib_as_const = 201510;

const int __cpp_lib_bool_constant = 201505;

const int __cpp_lib_enable_shared_from_this = 201603;

const int __cpp_lib_incomplete_container_elements = 201505;

const int __cpp_lib_invoke = 201411;

const int __cpp_lib_logical_traits = 201510;

const int __cpp_lib_map_try_emplace = 201411;

const int __cpp_lib_nonmember_container_access = 201411;

const int __cpp_lib_shared_mutex = 201505;

const int __cpp_lib_transparent_operators = 201510;

const int __cpp_lib_type_trait_variable_templates = 201510;

const int __cpp_lib_uncaught_exceptions = 201411;

const int __cpp_lib_unordered_map_try_emplace = 201411;

const int __cpp_lib_void_t = 201411;

const int __cpp_lib_chrono = 201510;

const int __cpp_lib_atomic_value_initialization = 201911;

const int __cpp_lib_shared_ptr_arrays = 201611;

const int __cpp_lib_experimental_erase_if = 201411;

const int __cpp_lib_experimental_filesystem = 201406;

const int _STL_WIN32_WINNT_WINXP = 1281;

const int _STL_WIN32_WINNT_VISTA = 1536;

const int _STL_WIN32_WINNT_WIN8 = 1538;

const int _STL_WIN32_WINNT_WINBLUE = 1539;

const int _STL_WIN32_WINNT_WIN10 = 2560;

const int _STL_WIN32_WINNT = 1536;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 't';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int _CRT_WARN = 0;

const int _CRT_ERROR = 1;

const int _CRT_ASSERT = 2;

const int _CRT_ERRCNT = 3;

const int _CRTDBG_MODE_FILE = 1;

const int _CRTDBG_MODE_DEBUG = 2;

const int _CRTDBG_MODE_WNDW = 4;

const int _CRTDBG_REPORT_MODE = -1;

const int _CRT_RPTHOOK_INSTALL = 0;

const int _CRT_RPTHOOK_REMOVE = 1;

const int _HOOK_ALLOC = 1;

const int _HOOK_REALLOC = 2;

const int _HOOK_FREE = 3;

const int _CRTDBG_ALLOC_MEM_DF = 1;

const int _CRTDBG_DELAY_FREE_MEM_DF = 2;

const int _CRTDBG_CHECK_ALWAYS_DF = 4;

const int _CRTDBG_RESERVED_DF = 8;

const int _CRTDBG_CHECK_CRT_DF = 16;

const int _CRTDBG_LEAK_CHECK_DF = 32;

const int _CRTDBG_CHECK_EVERY_16_DF = 1048576;

const int _CRTDBG_CHECK_EVERY_128_DF = 8388608;

const int _CRTDBG_CHECK_EVERY_1024_DF = 67108864;

const int _CRTDBG_CHECK_DEFAULT_DF = 0;

const int _CRTDBG_REPORT_FLAG = -1;

const int _FREE_BLOCK = 0;

const int _NORMAL_BLOCK = 1;

const int _CRT_BLOCK = 2;

const int _IGNORE_BLOCK = 3;

const int _CLIENT_BLOCK = 4;

const int _MAX_BLOCKS = 5;

const int _UNKNOWN_BLOCK = -1;

const String _CRT_MSVCP_CURRENT = 'msvcp140.dll';

const int _HAS_ITERATOR_DEBUGGING = 0;

const int _SECURE_SCL = 0;

const int _ITERATOR_DEBUG_LEVEL = 0;

const int _CONTAINER_DEBUG_LEVEL = 0;

const int _ENABLE_ATOMIC_REF_ALIGNMENT_CHECK = 0;

const int _MAX_EXP_DIG = 8;

const int _MAX_INT_DIG = 32;

const int _MAX_SIG_DIG_V1 = 36;

const int _MAX_SIG_DIG_V2 = 768;

const int _LOCK_LOCALE = 0;

const int _LOCK_MALLOC = 1;

const int _LOCK_STREAM = 2;

const int _LOCK_DEBUG = 3;

const int _LOCK_AT_THREAD_EXIT = 4;

const int _STD_ATOMIC_ALWAYS_USE_CMPXCHG16B = 0;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int _DOMAIN = 1;

const int _SING = 2;

const int _OVERFLOW = 3;

const int _UNDERFLOW = 4;

const int _TLOSS = 5;

const int _PLOSS = 6;

const double _HUGE_ENUF = 1e+300;

const double INFINITY = double.infinity;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double NAN = double.nan;

const int _DENORM = -2;

const int _FINITE = -1;

const int _INFCODE = 1;

const int _NANCODE = 2;

const int FP_INFINITE = 1;

const int FP_NAN = 2;

const int FP_NORMAL = -1;

const int FP_SUBNORMAL = -2;

const int FP_ZERO = 0;

const int _C2 = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = 2147483647;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const int _FE_DIVBYZERO = 4;

const int _FE_INEXACT = 32;

const int _FE_INVALID = 1;

const int _FE_OVERFLOW = 8;

const int _FE_UNDERFLOW = 16;

const int _D0_C = 3;

const int _D1_C = 2;

const int _D2_C = 1;

const int _D3_C = 0;

const int _DBIAS = 1022;

const int _DOFF = 4;

const int _F0_C = 1;

const int _F1_C = 0;

const int _FBIAS = 126;

const int _FOFF = 7;

const int _FRND = 1;

const int _L0_C = 3;

const int _L1_C = 2;

const int _L2_C = 1;

const int _L3_C = 0;

const int _LBIAS = 1022;

const int _LOFF = 4;

const int _DFRAC = 15;

const int _DMASK = 32752;

const int _DMAX = 2047;

const int _DSIGN = 32768;

const int _FFRAC = 127;

const int _FMASK = 32640;

const int _FMAX = 255;

const int _FSIGN = 32768;

const int _LFRAC = 65535;

const int _LMASK = 32767;

const int _LMAX = 32767;

const int _LSIGN = 32768;

const int _DHUGE_EXP = 1842;

const int _FHUGE_EXP = 229;

const int _LHUGE_EXP = 29490;

const int _FP_LT = 1;

const int _FP_EQ = 2;

const int _FP_GT = 4;

const int DOMAIN = 1;

const int SING = 2;

const int OVERFLOW = 3;

const int UNDERFLOW = 4;

const int TLOSS = 5;

const int PLOSS = 6;

const int _MAX_ITOSTR_BASE16_COUNT = 9;

const int _MAX_ITOSTR_BASE10_COUNT = 12;

const int _MAX_ITOSTR_BASE8_COUNT = 12;

const int _MAX_ITOSTR_BASE2_COUNT = 33;

const int _MAX_LTOSTR_BASE16_COUNT = 9;

const int _MAX_LTOSTR_BASE10_COUNT = 12;

const int _MAX_LTOSTR_BASE8_COUNT = 12;

const int _MAX_LTOSTR_BASE2_COUNT = 33;

const int _MAX_ULTOSTR_BASE16_COUNT = 9;

const int _MAX_ULTOSTR_BASE10_COUNT = 11;

const int _MAX_ULTOSTR_BASE8_COUNT = 12;

const int _MAX_ULTOSTR_BASE2_COUNT = 33;

const int _MAX_I64TOSTR_BASE16_COUNT = 17;

const int _MAX_I64TOSTR_BASE10_COUNT = 21;

const int _MAX_I64TOSTR_BASE8_COUNT = 23;

const int _MAX_I64TOSTR_BASE2_COUNT = 65;

const int _MAX_U64TOSTR_BASE16_COUNT = 17;

const int _MAX_U64TOSTR_BASE10_COUNT = 21;

const int _MAX_U64TOSTR_BASE8_COUNT = 23;

const int _MAX_U64TOSTR_BASE2_COUNT = 65;

const int CHAR_BIT = 8;

const int SCHAR_MIN = -128;

const int SCHAR_MAX = 127;

const int UCHAR_MAX = 255;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int MB_LEN_MAX = 5;

const int SHRT_MIN = -32768;

const int SHRT_MAX = 32767;

const int USHRT_MAX = 65535;

const int INT_MIN = -2147483648;

const int INT_MAX = 2147483647;

const int UINT_MAX = 4294967295;

const int LONG_MIN = -2147483648;

const int LONG_MAX = 2147483647;

const int ULONG_MAX = 4294967295;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int _I8_MIN = -128;

const int _I8_MAX = 127;

const int _UI8_MAX = 255;

const int _I16_MIN = -32768;

const int _I16_MAX = 32767;

const int _UI16_MAX = 65535;

const int _I32_MIN = -2147483648;

const int _I32_MAX = 2147483647;

const int _UI32_MAX = 4294967295;

const int _I64_MIN = -9223372036854775808;

const int _I64_MAX = 9223372036854775807;

const int _UI64_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int EXIT_SUCCESS = 0;

const int EXIT_FAILURE = 1;

const int _WRITE_ABORT_MSG = 1;

const int _CALL_REPORTFAULT = 2;

const int _OUT_TO_DEFAULT = 0;

const int _OUT_TO_STDERR = 1;

const int _OUT_TO_MSGBOX = 2;

const int _REPORT_ERRMODE = 3;

const int RAND_MAX = 32767;

const int _CVTBUFSIZE = 349;

const int _MAX_PATH = 260;

const int _MAX_DRIVE = 3;

const int _MAX_DIR = 256;

const int _MAX_FNAME = 256;

const int _MAX_EXT = 256;

const int _MAX_ENV = 32767;

const int _HEAP_MAXREQ = -32;

const int _HEAPEMPTY = -1;

const int _HEAPOK = -2;

const int _HEAPBADBEGIN = -3;

const int _HEAPBADNODE = -4;

const int _HEAPEND = -5;

const int _HEAPBADPTR = -6;

const int _FREEENTRY = 0;

const int _USEDENTRY = 1;

const int _ALLOCA_S_THRESHOLD = 1024;

const int _ALLOCA_S_STACK_MARKER = 52428;

const int _ALLOCA_S_HEAP_MARKER = 56797;

const int _ALLOCA_S_MARKER_SIZE = 16;

const String _CRT_INTERNAL_STDIO_SYMBOL_PREFIX = '';

const int _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION = 1;

const int _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR = 2;

const int _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS = 4;

const int _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY = 8;

const int _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS = 16;

const int _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING = 32;

const int _CRT_INTERNAL_SCANF_SECURECRT = 1;

const int _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS = 2;

const int _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY = 4;

const int WEOF = 65535;

const int BUFSIZ = 512;

const int _NFILE = 512;

const int _NSTREAM_ = 512;

const int _IOB_ENTRIES = 3;

const int EOF = -1;

const int _IOFBF = 0;

const int _IOLBF = 64;

const int _IONBF = 4;

const int L_tmpnam = 260;

const int L_tmpnam_s = 260;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_SET = 0;

const int FILENAME_MAX = 260;

const int FOPEN_MAX = 20;

const int _SYS_OPEN = 20;

const int TMP_MAX = 2147483647;

const int TMP_MAX_S = 2147483647;

const int _TMP_MAX_S = 2147483647;

const int SYS_OPEN = 20;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int EDEADLK = 36;

const int ENAMETOOLONG = 38;

const int ENOLCK = 39;

const int ENOSYS = 40;

const int ENOTEMPTY = 41;

const int EINVAL = 22;

const int ERANGE = 34;

const int EILSEQ = 42;

const int STRUNCATE = 80;

const int EDEADLOCK = 36;

const int EADDRINUSE = 100;

const int EADDRNOTAVAIL = 101;

const int EAFNOSUPPORT = 102;

const int EALREADY = 103;

const int EBADMSG = 104;

const int ECANCELED = 105;

const int ECONNABORTED = 106;

const int ECONNREFUSED = 107;

const int ECONNRESET = 108;

const int EDESTADDRREQ = 109;

const int EHOSTUNREACH = 110;

const int EIDRM = 111;

const int EINPROGRESS = 112;

const int EISCONN = 113;

const int ELOOP = 114;

const int EMSGSIZE = 115;

const int ENETDOWN = 116;

const int ENETRESET = 117;

const int ENETUNREACH = 118;

const int ENOBUFS = 119;

const int ENODATA = 120;

const int ENOLINK = 121;

const int ENOMSG = 122;

const int ENOPROTOOPT = 123;

const int ENOSR = 124;

const int ENOSTR = 125;

const int ENOTCONN = 126;

const int ENOTRECOVERABLE = 127;

const int ENOTSOCK = 128;

const int ENOTSUP = 129;

const int EOPNOTSUPP = 130;

const int EOTHER = 131;

const int EOVERFLOW = 132;

const int EOWNERDEAD = 133;

const int EPROTO = 134;

const int EPROTONOSUPPORT = 135;

const int EPROTOTYPE = 136;

const int ETIME = 137;

const int ETIMEDOUT = 138;

const int ETXTBSY = 139;

const int EWOULDBLOCK = 140;

const int _NLSCMPERROR = 2147483647;

const int _UPPER = 1;

const int _LOWER = 2;

const int _DIGIT = 4;

const int _SPACE = 8;

const int _PUNCT = 16;

const int _CONTROL = 32;

const int _BLANK = 64;

const int _HEX = 128;

const int _LEADBYTE = 32768;

const int _ALPHA = 259;

const int _SH_DENYRW = 16;

const int _SH_DENYWR = 32;

const int _SH_DENYRD = 48;

const int _SH_DENYNO = 64;

const int _SH_SECURE = 128;

const int SH_DENYRW = 16;

const int SH_DENYWR = 32;

const int SH_DENYRD = 48;

const int SH_DENYNO = 64;

const int _S_IFMT = 61440;

const int _S_IFDIR = 16384;

const int _S_IFCHR = 8192;

const int _S_IFIFO = 4096;

const int _S_IFREG = 32768;

const int _S_IREAD = 256;

const int _S_IWRITE = 128;

const int _S_IEXEC = 64;

const int S_IFMT = 61440;

const int S_IFDIR = 16384;

const int S_IFCHR = 8192;

const int S_IFREG = 32768;

const int S_IREAD = 256;

const int S_IWRITE = 128;

const int S_IEXEC = 64;

const int FLT_EVAL_METHOD = 0;

const int DBL_DECIMAL_DIG = 17;

const int DBL_DIG = 15;

const double DBL_EPSILON = 2.220446049250313e-16;

const int DBL_HAS_SUBNORM = 1;

const int DBL_MANT_DIG = 53;

const double DBL_MAX = 1.7976931348623157e+308;

const int DBL_MAX_10_EXP = 308;

const int DBL_MAX_EXP = 1024;

const double DBL_MIN = 2.2250738585072014e-308;

const int DBL_MIN_10_EXP = -307;

const int DBL_MIN_EXP = -1021;

const int _DBL_RADIX = 2;

const double DBL_TRUE_MIN = 5e-324;

const int FLT_DECIMAL_DIG = 9;

const int FLT_DIG = 6;

const double FLT_EPSILON = 1.1920928955078125e-7;

const int FLT_HAS_SUBNORM = 1;

const int FLT_GUARD = 0;

const int FLT_MANT_DIG = 24;

const double FLT_MAX = 3.4028234663852886e+38;

const int FLT_MAX_10_EXP = 38;

const int FLT_MAX_EXP = 128;

const double FLT_MIN = 1.1754943508222875e-38;

const int FLT_MIN_10_EXP = -37;

const int FLT_MIN_EXP = -125;

const int FLT_NORMALIZE = 0;

const int FLT_RADIX = 2;

const double FLT_TRUE_MIN = 1.401298464324817e-45;

const int LDBL_DIG = 15;

const double LDBL_EPSILON = 2.220446049250313e-16;

const int LDBL_HAS_SUBNORM = 1;

const int LDBL_MANT_DIG = 53;

const double LDBL_MAX = 1.7976931348623157e+308;

const int LDBL_MAX_10_EXP = 308;

const int LDBL_MAX_EXP = 1024;

const double LDBL_MIN = 2.2250738585072014e-308;

const int LDBL_MIN_10_EXP = -307;

const int LDBL_MIN_EXP = -1021;

const int _LDBL_RADIX = 2;

const double LDBL_TRUE_MIN = 5e-324;

const int DECIMAL_DIG = 17;

const int _SW_INEXACT = 1;

const int _SW_UNDERFLOW = 2;

const int _SW_OVERFLOW = 4;

const int _SW_ZERODIVIDE = 8;

const int _SW_INVALID = 16;

const int _SW_DENORMAL = 524288;

const int _EM_AMBIGUIOUS = 2147483648;

const int _EM_AMBIGUOUS = 2147483648;

const int _MCW_EM = 524319;

const int _EM_INEXACT = 1;

const int _EM_UNDERFLOW = 2;

const int _EM_OVERFLOW = 4;

const int _EM_ZERODIVIDE = 8;

const int _EM_INVALID = 16;

const int _EM_DENORMAL = 524288;

const int _MCW_RC = 768;

const int _RC_NEAR = 0;

const int _RC_DOWN = 256;

const int _RC_UP = 512;

const int _RC_CHOP = 768;

const int _MCW_PC = 196608;

const int _PC_64 = 0;

const int _PC_53 = 65536;

const int _PC_24 = 131072;

const int _MCW_IC = 262144;

const int _IC_AFFINE = 262144;

const int _IC_PROJECTIVE = 0;

const int _MCW_DN = 50331648;

const int _DN_SAVE = 0;

const int _DN_FLUSH = 16777216;

const int _DN_FLUSH_OPERANDS_SAVE_RESULTS = 33554432;

const int _DN_SAVE_OPERANDS_FLUSH_RESULTS = 50331648;

const int _SW_UNEMULATED = 64;

const int _SW_SQRTNEG = 128;

const int _SW_STACKOVERFLOW = 512;

const int _SW_STACKUNDERFLOW = 1024;

const int _FPE_INVALID = 129;

const int _FPE_DENORMAL = 130;

const int _FPE_ZERODIVIDE = 131;

const int _FPE_OVERFLOW = 132;

const int _FPE_UNDERFLOW = 133;

const int _FPE_INEXACT = 134;

const int _FPE_UNEMULATED = 135;

const int _FPE_SQRTNEG = 136;

const int _FPE_STACKOVERFLOW = 138;

const int _FPE_STACKUNDERFLOW = 139;

const int _FPE_EXPLICITGEN = 140;

const int _FPE_MULTIPLE_TRAPS = 141;

const int _FPE_MULTIPLE_FAULTS = 142;

const int _FPCLASS_SNAN = 1;

const int _FPCLASS_QNAN = 2;

const int _FPCLASS_NINF = 4;

const int _FPCLASS_NN = 8;

const int _FPCLASS_ND = 16;

const int _FPCLASS_NZ = 32;

const int _FPCLASS_PZ = 64;

const int _FPCLASS_PD = 128;

const int _FPCLASS_PN = 256;

const int _FPCLASS_PINF = 512;

const int _CW_DEFAULT = 524319;

const int DBL_RADIX = 2;

const int LDBL_RADIX = 2;

const int EM_AMBIGUIOUS = 2147483648;

const int EM_AMBIGUOUS = 2147483648;

const int MCW_EM = 524319;

const int EM_INVALID = 16;

const int EM_DENORMAL = 524288;

const int EM_ZERODIVIDE = 8;

const int EM_OVERFLOW = 4;

const int EM_UNDERFLOW = 2;

const int EM_INEXACT = 1;

const int MCW_IC = 262144;

const int IC_AFFINE = 262144;

const int IC_PROJECTIVE = 0;

const int MCW_RC = 768;

const int RC_CHOP = 768;

const int RC_UP = 512;

const int RC_DOWN = 256;

const int RC_NEAR = 0;

const int MCW_PC = 196608;

const int PC_24 = 131072;

const int PC_53 = 65536;

const int PC_64 = 0;

const int CW_DEFAULT = 524319;

const int SW_INVALID = 16;

const int SW_DENORMAL = 524288;

const int SW_ZERODIVIDE = 8;

const int SW_OVERFLOW = 4;

const int SW_UNDERFLOW = 2;

const int SW_INEXACT = 1;

const int SW_UNEMULATED = 64;

const int SW_SQRTNEG = 128;

const int SW_STACKOVERFLOW = 512;

const int SW_STACKUNDERFLOW = 1024;

const int FPE_INVALID = 129;

const int FPE_DENORMAL = 130;

const int FPE_ZERODIVIDE = 131;

const int FPE_OVERFLOW = 132;

const int FPE_UNDERFLOW = 133;

const int FPE_INEXACT = 134;

const int FPE_UNEMULATED = 135;

const int FPE_SQRTNEG = 136;

const int FPE_STACKOVERFLOW = 138;

const int FPE_STACKUNDERFLOW = 139;

const int FPE_EXPLICITGEN = 140;

const int __FAVOR_ATOM = 0;

const int __FAVOR_ENFSTRG = 1;

const int _USE_STD_VECTOR_ALGORITHMS = 1;

const int CLOCKS_PER_SEC = 1000;

const int TIME_UTC = 1;

const int CLK_TCK = 1000;

const int _Mtx_internal_imp_size = 80;

const int _Mtx_internal_imp_alignment = 8;

const int _Cnd_internal_imp_size = 72;

const int _Cnd_internal_imp_alignment = 8;

const int ATOMIC_BOOL_LOCK_FREE = 2;

const int ATOMIC_CHAR_LOCK_FREE = 2;

const int ATOMIC_CHAR16_T_LOCK_FREE = 2;

const int ATOMIC_CHAR32_T_LOCK_FREE = 2;

const int ATOMIC_WCHAR_T_LOCK_FREE = 2;

const int ATOMIC_SHORT_LOCK_FREE = 2;

const int ATOMIC_INT_LOCK_FREE = 2;

const int ATOMIC_LONG_LOCK_FREE = 2;

const int ATOMIC_LLONG_LOCK_FREE = 2;

const int ATOMIC_POINTER_LOCK_FREE = 2;

const int LC_ALL = 0;

const int LC_COLLATE = 1;

const int LC_CTYPE = 2;

const int LC_MONETARY = 3;

const int LC_NUMERIC = 4;

const int LC_TIME = 5;

const int LC_MIN = 0;

const int LC_MAX = 5;

const int _ENABLE_PER_THREAD_LOCALE = 1;

const int _DISABLE_PER_THREAD_LOCALE = 2;

const int _ENABLE_PER_THREAD_LOCALE_GLOBAL = 16;

const int _DISABLE_PER_THREAD_LOCALE_GLOBAL = 32;

const int _ENABLE_PER_THREAD_LOCALE_NEW = 256;

const int _DISABLE_PER_THREAD_LOCALE_NEW = 512;

const int _X_ALL = 0;

const int _X_COLLATE = 1;

const int _X_CTYPE = 2;

const int _X_MONETARY = 3;

const int _X_NUMERIC = 4;

const int _X_TIME = 5;

const int _X_MAX = 5;

const int _X_MESSAGES = 6;

const int _NCAT = 7;

const int _M_COLLATE = 1;

const int _M_CTYPE = 2;

const int _M_MONETARY = 4;

const int _M_NUMERIC = 8;

const int _M_TIME = 16;

const int _M_MESSAGES = 32;

const int _M_ALL = 63;

const int _P_WAIT = 0;

const int _P_NOWAIT = 1;

const int _OLD_P_OVERLAY = 2;

const int _P_NOWAITO = 3;

const int _P_DETACH = 4;

const int _P_OVERLAY = 2;

const int _WAIT_CHILD = 0;

const int _WAIT_GRANDCHILD = 1;

const int P_WAIT = 0;

const int P_NOWAIT = 1;

const int P_OVERLAY = 2;

const int OLD_P_OVERLAY = 2;

const int P_NOWAITO = 3;

const int P_DETACH = 4;

const int WAIT_CHILD = 0;

const int WAIT_GRANDCHILD = 1;

const int _USE_FUNCTION_INT_0_SFINAE = 1;

const int _JBLEN = 16;

const int _MM_HINT_NTA = 0;

const int _MM_HINT_T0 = 1;

const int _MM_HINT_T1 = 2;

const int _MM_HINT_T2 = 3;

const int _MM_HINT_ENTA = 4;

const int _MM_EXCEPT_MASK = 63;

const int _MM_EXCEPT_INVALID = 1;

const int _MM_EXCEPT_DENORM = 2;

const int _MM_EXCEPT_DIV_ZERO = 4;

const int _MM_EXCEPT_OVERFLOW = 8;

const int _MM_EXCEPT_UNDERFLOW = 16;

const int _MM_EXCEPT_INEXACT = 32;

const int _MM_MASK_MASK = 8064;

const int _MM_MASK_INVALID = 128;

const int _MM_MASK_DENORM = 256;

const int _MM_MASK_DIV_ZERO = 512;

const int _MM_MASK_OVERFLOW = 1024;

const int _MM_MASK_UNDERFLOW = 2048;

const int _MM_MASK_INEXACT = 4096;

const int _MM_ROUND_MASK = 24576;

const int _MM_ROUND_NEAREST = 0;

const int _MM_ROUND_DOWN = 8192;

const int _MM_ROUND_UP = 16384;

const int _MM_ROUND_TOWARD_ZERO = 24576;

const int _MM_FLUSH_ZERO_MASK = 32768;

const int _MM_FLUSH_ZERO_ON = 32768;

const int _MM_FLUSH_ZERO_OFF = 0;

const int _MM_DENORMALS_ZERO_MASK = 64;

const int _MM_DENORMALS_ZERO_ON = 64;

const int _MM_DENORMALS_ZERO_OFF = 0;

const int _MM_FROUND_TO_NEAREST_INT = 0;

const int _MM_FROUND_TO_NEG_INF = 1;

const int _MM_FROUND_TO_POS_INF = 2;

const int _MM_FROUND_TO_ZERO = 3;

const int _MM_FROUND_CUR_DIRECTION = 4;

const int _MM_FROUND_RAISE_EXC = 0;

const int _MM_FROUND_NO_EXC = 8;

const int _MM_FROUND_NINT = 0;

const int _MM_FROUND_FLOOR = 1;

const int _MM_FROUND_CEIL = 2;

const int _MM_FROUND_TRUNC = 3;

const int _MM_FROUND_RINT = 4;

const int _MM_FROUND_NEARBYINT = 12;

const int _SIDD_UBYTE_OPS = 0;

const int _SIDD_UWORD_OPS = 1;

const int _SIDD_SBYTE_OPS = 2;

const int _SIDD_SWORD_OPS = 3;

const int _SIDD_CMP_EQUAL_ANY = 0;

const int _SIDD_CMP_RANGES = 4;

const int _SIDD_CMP_EQUAL_EACH = 8;

const int _SIDD_CMP_EQUAL_ORDERED = 12;

const int _SIDD_POSITIVE_POLARITY = 0;

const int _SIDD_NEGATIVE_POLARITY = 16;

const int _SIDD_MASKED_POSITIVE_POLARITY = 32;

const int _SIDD_MASKED_NEGATIVE_POLARITY = 48;

const int _SIDD_LEAST_SIGNIFICANT = 0;

const int _SIDD_MOST_SIGNIFICANT = 64;

const int _SIDD_BIT_MASK = 0;

const int _SIDD_UNIT_MASK = 64;

const int _CMP_EQ_OQ = 0;

const int _CMP_LT_OS = 1;

const int _CMP_LE_OS = 2;

const int _CMP_UNORD_Q = 3;

const int _CMP_NEQ_UQ = 4;

const int _CMP_NLT_US = 5;

const int _CMP_NLE_US = 6;

const int _CMP_ORD_Q = 7;

const int _CMP_EQ_UQ = 8;

const int _CMP_NGE_US = 9;

const int _CMP_NGT_US = 10;

const int _CMP_FALSE_OQ = 11;

const int _CMP_NEQ_OQ = 12;

const int _CMP_GE_OS = 13;

const int _CMP_GT_OS = 14;

const int _CMP_TRUE_UQ = 15;

const int _CMP_EQ_OS = 16;

const int _CMP_LT_OQ = 17;

const int _CMP_LE_OQ = 18;

const int _CMP_UNORD_S = 19;

const int _CMP_NEQ_US = 20;

const int _CMP_NLT_UQ = 21;

const int _CMP_NLE_UQ = 22;

const int _CMP_ORD_S = 23;

const int _CMP_EQ_US = 24;

const int _CMP_NGE_UQ = 25;

const int _CMP_NGT_UQ = 26;

const int _CMP_FALSE_OS = 27;

const int _CMP_NEQ_OS = 28;

const int _CMP_GE_OQ = 29;

const int _CMP_GT_OQ = 30;

const int _CMP_TRUE_US = 31;

const int _XCR_XFEATURE_ENABLED_MASK = 0;

const int _XBEGIN_STARTED = 4294967295;

const int _XABORT_EXPLICIT = 1;

const int _XABORT_RETRY = 2;

const int _XABORT_CONFLICT = 4;

const int _XABORT_CAPACITY = 8;

const int _XABORT_DEBUG = 16;

const int _XABORT_NESTED = 32;

const int _MM_K0_REG8 = 255;

const int _MM_K0_REG16 = 65535;

const int _MM_K0_REG32 = 4294967295;

const int _MM_K0_REG64 = -1;

const int _MM_BROADCAST_16X16 = 0;

const int _MM_BROADCAST_8X8 = 0;

const int _MM_CMPINT_GE = 5;

const int _MM_CMPINT_GT = 6;

const int _MM_PCOMCTRL_LT = 0;

const int _MM_PCOMCTRL_LE = 1;

const int _MM_PCOMCTRL_GT = 2;

const int _MM_PCOMCTRL_GE = 3;

const int _MM_PCOMCTRL_EQ = 4;

const int _MM_PCOMCTRL_NEQ = 5;

const int _MM_PCOMCTRL_FALSE = 6;

const int _MM_PCOMCTRL_TRUE = 7;

const int _MM_PERMUTE2_COPY = 0;

const int _MM_PERMUTE2_ZEROIF1 = 2;

const int _MM_PERMUTE2_ZEROIF0 = 3;

const int _PPLTASK_ASYNC_LOGGING = 1;

const int _PPL_TASK_CONTEXT_CONTROL_ENABLED = 0;

const int _PPL_TASK_ERROR_REPORT_ENABLED = 0;

const int PPL_TASK_SAVE_FRAME_COUNT = 1;

typedef Native___va_start = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart___va_start = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef Native___security_init_cookie = ffi.Void Function();

typedef _dart___security_init_cookie = void Function();

typedef Native___security_check_cookie = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___security_check_cookie = void Function(
  int _StackCookie,
);

typedef Native___report_gsfailure = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___report_gsfailure = void Function(
  int _StackCookie,
);

typedef Native__invalid_parameter_noinfo = ffi.Void Function();

typedef _dart__invalid_parameter_noinfo = void Function();

typedef Native__invalid_parameter_noinfo_noreturn = ffi.Void Function();

typedef _dart__invalid_parameter_noinfo_noreturn = void Function();

typedef Native__invoke_watson = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> _Expression,
  ffi.Pointer<ffi.Uint16> _FunctionName,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Uint32 _LineNo,
  ffi.Uint64 _Reserved,
);

typedef _dart__invoke_watson = void Function(
  ffi.Pointer<ffi.Uint16> _Expression,
  ffi.Pointer<ffi.Uint16> _FunctionName,
  ffi.Pointer<ffi.Uint16> _FileName,
  int _LineNo,
  int _Reserved,
);

typedef Native__set_errno = ffi.Int32 Function(
  ffi.Int32 _Value,
);

typedef _dart__set_errno = int Function(
  int _Value,
);

typedef Native__get_errno = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Value,
);

typedef _dart__get_errno = int Function(
  ffi.Pointer<ffi.Int32> _Value,
);

typedef Native___threadid = ffi.Uint64 Function();

typedef _dart___threadid = int Function();

typedef Native___threadhandle = ffi.Uint64 Function();

typedef _dart___threadhandle = int Function();

typedef Native__fperrraise = ffi.Void Function(
  ffi.Int32 _Except,
);

typedef _dart__fperrraise = void Function(
  int _Except,
);

typedef Native__dclass = ffi.Int16 Function(
  ffi.Double _X,
);

typedef _dart__dclass = int Function(
  double _X,
);

typedef Native__fdclass = ffi.Int16 Function(
  ffi.Float _X,
);

typedef _dart__fdclass = int Function(
  double _X,
);

typedef Native__dsign = ffi.Int32 Function(
  ffi.Double _X,
);

typedef _dart__dsign = int Function(
  double _X,
);

typedef Native__fdsign = ffi.Int32 Function(
  ffi.Float _X,
);

typedef _dart__fdsign = int Function(
  double _X,
);

typedef Native__dpcomp = ffi.Int32 Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart__dpcomp = int Function(
  double _X,
  double _Y,
);

typedef Native__fdpcomp = ffi.Int32 Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart__fdpcomp = int Function(
  double _X,
  double _Y,
);

typedef Native__dtest = ffi.Int16 Function(
  ffi.Pointer<ffi.Double> _Px,
);

typedef _dart__dtest = int Function(
  ffi.Pointer<ffi.Double> _Px,
);

typedef Native__fdtest = ffi.Int16 Function(
  ffi.Pointer<ffi.Float> _Px,
);

typedef _dart__fdtest = int Function(
  ffi.Pointer<ffi.Float> _Px,
);

typedef Native__d_int = ffi.Int16 Function(
  ffi.Pointer<ffi.Double> _Px,
  ffi.Int16 _Xexp,
);

typedef _dart__d_int = int Function(
  ffi.Pointer<ffi.Double> _Px,
  int _Xexp,
);

typedef Native__fd_int = ffi.Int16 Function(
  ffi.Pointer<ffi.Float> _Px,
  ffi.Int16 _Xexp,
);

typedef _dart__fd_int = int Function(
  ffi.Pointer<ffi.Float> _Px,
  int _Xexp,
);

typedef Native__dscale = ffi.Int16 Function(
  ffi.Pointer<ffi.Double> _Px,
  ffi.Int64 _Lexp,
);

typedef _dart__dscale = int Function(
  ffi.Pointer<ffi.Double> _Px,
  int _Lexp,
);

typedef Native__fdscale = ffi.Int16 Function(
  ffi.Pointer<ffi.Float> _Px,
  ffi.Int64 _Lexp,
);

typedef _dart__fdscale = int Function(
  ffi.Pointer<ffi.Float> _Px,
  int _Lexp,
);

typedef Native__dunscale = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Pex,
  ffi.Pointer<ffi.Double> _Px,
);

typedef _dart__dunscale = int Function(
  ffi.Pointer<ffi.Int16> _Pex,
  ffi.Pointer<ffi.Double> _Px,
);

typedef Native__fdunscale = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Pex,
  ffi.Pointer<ffi.Float> _Px,
);

typedef _dart__fdunscale = int Function(
  ffi.Pointer<ffi.Int16> _Pex,
  ffi.Pointer<ffi.Float> _Px,
);

typedef Native__dexp = ffi.Int16 Function(
  ffi.Pointer<ffi.Double> _Px,
  ffi.Double _Y,
  ffi.Int64 _Eoff,
);

typedef _dart__dexp = int Function(
  ffi.Pointer<ffi.Double> _Px,
  double _Y,
  int _Eoff,
);

typedef Native__fdexp = ffi.Int16 Function(
  ffi.Pointer<ffi.Float> _Px,
  ffi.Float _Y,
  ffi.Int64 _Eoff,
);

typedef _dart__fdexp = int Function(
  ffi.Pointer<ffi.Float> _Px,
  double _Y,
  int _Eoff,
);

typedef Native__dnorm = ffi.Int16 Function(
  ffi.Pointer<ffi.Uint16> _Ps,
);

typedef _dart__dnorm = int Function(
  ffi.Pointer<ffi.Uint16> _Ps,
);

typedef Native__fdnorm = ffi.Int16 Function(
  ffi.Pointer<ffi.Uint16> _Ps,
);

typedef _dart__fdnorm = int Function(
  ffi.Pointer<ffi.Uint16> _Ps,
);

typedef Native__dpoly = ffi.Double Function(
  ffi.Double _X,
  ffi.Pointer<ffi.Double> _Tab,
  ffi.Int32 _N,
);

typedef _dart__dpoly = double Function(
  double _X,
  ffi.Pointer<ffi.Double> _Tab,
  int _N,
);

typedef Native__fdpoly = ffi.Float Function(
  ffi.Float _X,
  ffi.Pointer<ffi.Float> _Tab,
  ffi.Int32 _N,
);

typedef _dart__fdpoly = double Function(
  double _X,
  ffi.Pointer<ffi.Float> _Tab,
  int _N,
);

typedef Native__dlog = ffi.Double Function(
  ffi.Double _X,
  ffi.Int32 _Baseflag,
);

typedef _dart__dlog = double Function(
  double _X,
  int _Baseflag,
);

typedef Native__fdlog = ffi.Float Function(
  ffi.Float _X,
  ffi.Int32 _Baseflag,
);

typedef _dart__fdlog = double Function(
  double _X,
  int _Baseflag,
);

typedef Native__dsin = ffi.Double Function(
  ffi.Double _X,
  ffi.Uint32 _Qoff,
);

typedef _dart__dsin = double Function(
  double _X,
  int _Qoff,
);

typedef Native__fdsin = ffi.Float Function(
  ffi.Float _X,
  ffi.Uint32 _Qoff,
);

typedef _dart__fdsin = double Function(
  double _X,
  int _Qoff,
);

typedef Native_abs = ffi.Int32 Function(
  ffi.Int32 _X,
);

typedef _dart_abs = int Function(
  int _X,
);

typedef Native_labs = ffi.Int64 Function(
  ffi.Int64 _X,
);

typedef _dart_labs = int Function(
  int _X,
);

typedef Native_llabs = ffi.Int64 Function(
  ffi.Int64 _X,
);

typedef _dart_llabs = int Function(
  int _X,
);

typedef Native_acos = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_acos = double Function(
  double _X,
);

typedef Native_asin = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_asin = double Function(
  double _X,
);

typedef Native_atan = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_atan = double Function(
  double _X,
);

typedef Native_atan2 = ffi.Double Function(
  ffi.Double _Y,
  ffi.Double _X,
);

typedef _dart_atan2 = double Function(
  double _Y,
  double _X,
);

typedef Native_cos = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_cos = double Function(
  double _X,
);

typedef Native_cosh = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_cosh = double Function(
  double _X,
);

typedef Native_exp = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_exp = double Function(
  double _X,
);

typedef Native_fabs = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_fabs = double Function(
  double _X,
);

typedef Native_fmod = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_fmod = double Function(
  double _X,
  double _Y,
);

typedef Native_log = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_log = double Function(
  double _X,
);

typedef Native_log10 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_log10 = double Function(
  double _X,
);

typedef Native_pow = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_pow = double Function(
  double _X,
  double _Y,
);

typedef Native_sin = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_sin = double Function(
  double _X,
);

typedef Native_sinh = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_sinh = double Function(
  double _X,
);

typedef Native_sqrt = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_sqrt = double Function(
  double _X,
);

typedef Native_tan = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_tan = double Function(
  double _X,
);

typedef Native_tanh = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_tanh = double Function(
  double _X,
);

typedef Native_acosh = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_acosh = double Function(
  double _X,
);

typedef Native_asinh = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_asinh = double Function(
  double _X,
);

typedef Native_atanh = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_atanh = double Function(
  double _X,
);

typedef Native_atof = ffi.Double Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_atof = double Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef Native__atof_l = ffi.Double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atof_l = double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__cabs = ffi.Double Function(
  _complex _Complex_value,
);

typedef _dart__cabs = double Function(
  _complex _Complex_value,
);

typedef Native_cbrt = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_cbrt = double Function(
  double _X,
);

typedef Native_ceil = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_ceil = double Function(
  double _X,
);

typedef Native__chgsign = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart__chgsign = double Function(
  double _X,
);

typedef Native_copysign = ffi.Double Function(
  ffi.Double _Number,
  ffi.Double _Sign,
);

typedef _dart_copysign = double Function(
  double _Number,
  double _Sign,
);

typedef Native__copysign = ffi.Double Function(
  ffi.Double _Number,
  ffi.Double _Sign,
);

typedef _dart__copysign = double Function(
  double _Number,
  double _Sign,
);

typedef Native_erf = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_erf = double Function(
  double _X,
);

typedef Native_erfc = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_erfc = double Function(
  double _X,
);

typedef Native_exp2 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_exp2 = double Function(
  double _X,
);

typedef Native_expm1 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_expm1 = double Function(
  double _X,
);

typedef Native_fdim = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_fdim = double Function(
  double _X,
  double _Y,
);

typedef Native_floor = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_floor = double Function(
  double _X,
);

typedef Native_fma = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
  ffi.Double _Z,
);

typedef _dart_fma = double Function(
  double _X,
  double _Y,
  double _Z,
);

typedef Native_fmax = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_fmax = double Function(
  double _X,
  double _Y,
);

typedef Native_fmin = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_fmin = double Function(
  double _X,
  double _Y,
);

typedef Native_frexp = ffi.Double Function(
  ffi.Double _X,
  ffi.Pointer<ffi.Int32> _Y,
);

typedef _dart_frexp = double Function(
  double _X,
  ffi.Pointer<ffi.Int32> _Y,
);

typedef Native_hypot = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_hypot = double Function(
  double _X,
  double _Y,
);

typedef Native__hypot = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart__hypot = double Function(
  double _X,
  double _Y,
);

typedef Native_ilogb = ffi.Int32 Function(
  ffi.Double _X,
);

typedef _dart_ilogb = int Function(
  double _X,
);

typedef Native_ldexp = ffi.Double Function(
  ffi.Double _X,
  ffi.Int32 _Y,
);

typedef _dart_ldexp = double Function(
  double _X,
  int _Y,
);

typedef Native_lgamma = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_lgamma = double Function(
  double _X,
);

typedef Native_llrint = ffi.Int64 Function(
  ffi.Double _X,
);

typedef _dart_llrint = int Function(
  double _X,
);

typedef Native_llround = ffi.Int64 Function(
  ffi.Double _X,
);

typedef _dart_llround = int Function(
  double _X,
);

typedef Native_log1p = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_log1p = double Function(
  double _X,
);

typedef Native_log2 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_log2 = double Function(
  double _X,
);

typedef Native_logb = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_logb = double Function(
  double _X,
);

typedef Native_lrint = ffi.Int64 Function(
  ffi.Double _X,
);

typedef _dart_lrint = int Function(
  double _X,
);

typedef Native_lround = ffi.Int64 Function(
  ffi.Double _X,
);

typedef _dart_lround = int Function(
  double _X,
);

typedef Native__matherr = ffi.Int32 Function(
  ffi.Pointer<_exception> _Except,
);

typedef _dart__matherr = int Function(
  ffi.Pointer<_exception> _Except,
);

typedef Native_modf = ffi.Double Function(
  ffi.Double _X,
  ffi.Pointer<ffi.Double> _Y,
);

typedef _dart_modf = double Function(
  double _X,
  ffi.Pointer<ffi.Double> _Y,
);

typedef Native_nan = ffi.Double Function(
  ffi.Pointer<ffi.Int8> _X,
);

typedef _dart_nan = double Function(
  ffi.Pointer<ffi.Int8> _X,
);

typedef Native_nearbyint = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_nearbyint = double Function(
  double _X,
);

typedef Native_nextafter = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_nextafter = double Function(
  double _X,
  double _Y,
);

typedef Native_remainder = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_remainder = double Function(
  double _X,
  double _Y,
);

typedef Native_remquo = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
  ffi.Pointer<ffi.Int32> _Z,
);

typedef _dart_remquo = double Function(
  double _X,
  double _Y,
  ffi.Pointer<ffi.Int32> _Z,
);

typedef Native_rint = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_rint = double Function(
  double _X,
);

typedef Native_round = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_round = double Function(
  double _X,
);

typedef Native_scalbln = ffi.Double Function(
  ffi.Double _X,
  ffi.Int64 _Y,
);

typedef _dart_scalbln = double Function(
  double _X,
  int _Y,
);

typedef Native_scalbn = ffi.Double Function(
  ffi.Double _X,
  ffi.Int32 _Y,
);

typedef _dart_scalbn = double Function(
  double _X,
  int _Y,
);

typedef Native_tgamma = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_tgamma = double Function(
  double _X,
);

typedef Native_trunc = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_trunc = double Function(
  double _X,
);

typedef Native__j0 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart__j0 = double Function(
  double _X,
);

typedef Native__j1 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart__j1 = double Function(
  double _X,
);

typedef Native__jn = ffi.Double Function(
  ffi.Int32 _X,
  ffi.Double _Y,
);

typedef _dart__jn = double Function(
  int _X,
  double _Y,
);

typedef Native__y0 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart__y0 = double Function(
  double _X,
);

typedef Native__y1 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart__y1 = double Function(
  double _X,
);

typedef Native__yn = ffi.Double Function(
  ffi.Int32 _X,
  ffi.Double _Y,
);

typedef _dart__yn = double Function(
  int _X,
  double _Y,
);

typedef Native_acoshf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_acoshf = double Function(
  double _X,
);

typedef Native_asinhf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_asinhf = double Function(
  double _X,
);

typedef Native_atanhf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_atanhf = double Function(
  double _X,
);

typedef Native_cbrtf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_cbrtf = double Function(
  double _X,
);

typedef Native__chgsignf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart__chgsignf = double Function(
  double _X,
);

typedef Native_copysignf = ffi.Float Function(
  ffi.Float _Number,
  ffi.Float _Sign,
);

typedef _dart_copysignf = double Function(
  double _Number,
  double _Sign,
);

typedef Native__copysignf = ffi.Float Function(
  ffi.Float _Number,
  ffi.Float _Sign,
);

typedef _dart__copysignf = double Function(
  double _Number,
  double _Sign,
);

typedef Native_erff = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_erff = double Function(
  double _X,
);

typedef Native_erfcf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_erfcf = double Function(
  double _X,
);

typedef Native_expm1f = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_expm1f = double Function(
  double _X,
);

typedef Native_exp2f = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_exp2f = double Function(
  double _X,
);

typedef Native_fdimf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart_fdimf = double Function(
  double _X,
  double _Y,
);

typedef Native_fmaf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
  ffi.Float _Z,
);

typedef _dart_fmaf = double Function(
  double _X,
  double _Y,
  double _Z,
);

typedef Native_fmaxf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart_fmaxf = double Function(
  double _X,
  double _Y,
);

typedef Native_fminf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart_fminf = double Function(
  double _X,
  double _Y,
);

typedef Native__hypotf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart__hypotf = double Function(
  double _X,
  double _Y,
);

typedef Native_ilogbf = ffi.Int32 Function(
  ffi.Float _X,
);

typedef _dart_ilogbf = int Function(
  double _X,
);

typedef Native_lgammaf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_lgammaf = double Function(
  double _X,
);

typedef Native_llrintf = ffi.Int64 Function(
  ffi.Float _X,
);

typedef _dart_llrintf = int Function(
  double _X,
);

typedef Native_llroundf = ffi.Int64 Function(
  ffi.Float _X,
);

typedef _dart_llroundf = int Function(
  double _X,
);

typedef Native_log1pf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_log1pf = double Function(
  double _X,
);

typedef Native_log2f = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_log2f = double Function(
  double _X,
);

typedef Native_logbf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_logbf = double Function(
  double _X,
);

typedef Native_lrintf = ffi.Int64 Function(
  ffi.Float _X,
);

typedef _dart_lrintf = int Function(
  double _X,
);

typedef Native_lroundf = ffi.Int64 Function(
  ffi.Float _X,
);

typedef _dart_lroundf = int Function(
  double _X,
);

typedef Native_nanf = ffi.Float Function(
  ffi.Pointer<ffi.Int8> _X,
);

typedef _dart_nanf = double Function(
  ffi.Pointer<ffi.Int8> _X,
);

typedef Native_nearbyintf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_nearbyintf = double Function(
  double _X,
);

typedef Native_nextafterf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart_nextafterf = double Function(
  double _X,
  double _Y,
);

typedef Native_remainderf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart_remainderf = double Function(
  double _X,
  double _Y,
);

typedef Native_remquof = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
  ffi.Pointer<ffi.Int32> _Z,
);

typedef _dart_remquof = double Function(
  double _X,
  double _Y,
  ffi.Pointer<ffi.Int32> _Z,
);

typedef Native_rintf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_rintf = double Function(
  double _X,
);

typedef Native_roundf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_roundf = double Function(
  double _X,
);

typedef Native_scalblnf = ffi.Float Function(
  ffi.Float _X,
  ffi.Int64 _Y,
);

typedef _dart_scalblnf = double Function(
  double _X,
  int _Y,
);

typedef Native_scalbnf = ffi.Float Function(
  ffi.Float _X,
  ffi.Int32 _Y,
);

typedef _dart_scalbnf = double Function(
  double _X,
  int _Y,
);

typedef Native_tgammaf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_tgammaf = double Function(
  double _X,
);

typedef Native_truncf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_truncf = double Function(
  double _X,
);

typedef Native__logbf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart__logbf = double Function(
  double _X,
);

typedef Native__nextafterf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart__nextafterf = double Function(
  double _X,
  double _Y,
);

typedef Native__finitef = ffi.Int32 Function(
  ffi.Float _X,
);

typedef _dart__finitef = int Function(
  double _X,
);

typedef Native__isnanf = ffi.Int32 Function(
  ffi.Float _X,
);

typedef _dart__isnanf = int Function(
  double _X,
);

typedef Native__fpclassf = ffi.Int32 Function(
  ffi.Float _X,
);

typedef _dart__fpclassf = int Function(
  double _X,
);

typedef Native__set_FMA3_enable = ffi.Int32 Function(
  ffi.Int32 _Flag,
);

typedef _dart__set_FMA3_enable = int Function(
  int _Flag,
);

typedef Native__get_FMA3_enable = ffi.Int32 Function();

typedef _dart__get_FMA3_enable = int Function();

typedef Native_acosf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_acosf = double Function(
  double _X,
);

typedef Native_asinf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_asinf = double Function(
  double _X,
);

typedef Native_atan2f = ffi.Float Function(
  ffi.Float _Y,
  ffi.Float _X,
);

typedef _dart_atan2f = double Function(
  double _Y,
  double _X,
);

typedef Native_atanf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_atanf = double Function(
  double _X,
);

typedef Native_ceilf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_ceilf = double Function(
  double _X,
);

typedef Native_cosf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_cosf = double Function(
  double _X,
);

typedef Native_coshf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_coshf = double Function(
  double _X,
);

typedef Native_expf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_expf = double Function(
  double _X,
);

typedef Native_floorf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_floorf = double Function(
  double _X,
);

typedef Native_fmodf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart_fmodf = double Function(
  double _X,
  double _Y,
);

typedef Native_log10f = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_log10f = double Function(
  double _X,
);

typedef Native_logf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_logf = double Function(
  double _X,
);

typedef Native_modff = ffi.Float Function(
  ffi.Float _X,
  ffi.Pointer<ffi.Float> _Y,
);

typedef _dart_modff = double Function(
  double _X,
  ffi.Pointer<ffi.Float> _Y,
);

typedef Native_powf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart_powf = double Function(
  double _X,
  double _Y,
);

typedef Native_sinf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_sinf = double Function(
  double _X,
);

typedef Native_sinhf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_sinhf = double Function(
  double _X,
);

typedef Native_sqrtf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_sqrtf = double Function(
  double _X,
);

typedef Native_tanf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_tanf = double Function(
  double _X,
);

typedef Native_tanhf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_tanhf = double Function(
  double _X,
);

typedef Native_j0 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_j0 = double Function(
  double _X,
);

typedef Native_j1 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_j1 = double Function(
  double _X,
);

typedef Native_jn = ffi.Double Function(
  ffi.Int32 _X,
  ffi.Double _Y,
);

typedef _dart_jn = double Function(
  int _X,
  double _Y,
);

typedef Native_y0 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_y0 = double Function(
  double _X,
);

typedef Native_y1 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_y1 = double Function(
  double _X,
);

typedef Native_yn = ffi.Double Function(
  ffi.Int32 _X,
  ffi.Double _Y,
);

typedef _dart_yn = double Function(
  int _X,
  double _Y,
);

typedef Native__calloc_base = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 _Count,
  ffi.Uint64 _Size,
);

typedef _dart__calloc_base = ffi.Pointer<ffi.Void> Function(
  int _Count,
  int _Size,
);

typedef Native_calloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 _Count,
  ffi.Uint64 _Size,
);

typedef _dart_calloc = ffi.Pointer<ffi.Void> Function(
  int _Count,
  int _Size,
);

typedef Native__callnewh = ffi.Int32 Function(
  ffi.Uint64 _Size,
);

typedef _dart__callnewh = int Function(
  int _Size,
);

typedef Native__expand = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Size,
);

typedef _dart__expand = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Size,
);

typedef Native__free_base = ffi.Void Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef _dart__free_base = void Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef Native_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef _dart_free = void Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef Native__malloc_base = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 _Size,
);

typedef _dart__malloc_base = ffi.Pointer<ffi.Void> Function(
  int _Size,
);

typedef Native_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 _Size,
);

typedef _dart_malloc = ffi.Pointer<ffi.Void> Function(
  int _Size,
);

typedef Native__msize_base = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef _dart__msize_base = int Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef Native__msize = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef _dart__msize = int Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef Native__realloc_base = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Size,
);

typedef _dart__realloc_base = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Size,
);

typedef Native_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Size,
);

typedef _dart_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Size,
);

typedef Native__recalloc_base = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Count,
  ffi.Uint64 _Size,
);

typedef _dart__recalloc_base = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Count,
  int _Size,
);

typedef Native__recalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Count,
  ffi.Uint64 _Size,
);

typedef _dart__recalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Count,
  int _Size,
);

typedef Native__aligned_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef _dart__aligned_free = void Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef Native__aligned_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 _Size,
  ffi.Uint64 _Alignment,
);

typedef _dart__aligned_malloc = ffi.Pointer<ffi.Void> Function(
  int _Size,
  int _Alignment,
);

typedef Native__aligned_offset_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 _Size,
  ffi.Uint64 _Alignment,
  ffi.Uint64 _Offset,
);

typedef _dart__aligned_offset_malloc = ffi.Pointer<ffi.Void> Function(
  int _Size,
  int _Alignment,
  int _Offset,
);

typedef Native__aligned_msize = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Alignment,
  ffi.Uint64 _Offset,
);

typedef _dart__aligned_msize = int Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Alignment,
  int _Offset,
);

typedef Native__aligned_offset_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Size,
  ffi.Uint64 _Alignment,
  ffi.Uint64 _Offset,
);

typedef _dart__aligned_offset_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Size,
  int _Alignment,
  int _Offset,
);

typedef Native__aligned_offset_recalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Count,
  ffi.Uint64 _Size,
  ffi.Uint64 _Alignment,
  ffi.Uint64 _Offset,
);

typedef _dart__aligned_offset_recalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Count,
  int _Size,
  int _Alignment,
  int _Offset,
);

typedef Native__aligned_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Size,
  ffi.Uint64 _Alignment,
);

typedef _dart__aligned_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Size,
  int _Alignment,
);

typedef Native__aligned_recalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Count,
  ffi.Uint64 _Size,
  ffi.Uint64 _Alignment,
);

typedef _dart__aligned_recalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Count,
  int _Size,
  int _Alignment,
);

typedef _CoreCrtSecureSearchSortCompareFunction = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef Native_bsearch_s = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Uint64 _NumOfElements,
  ffi.Uint64 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef _dart_bsearch_s = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  int _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef Native_qsort_s = ffi.Void Function(
  ffi.Pointer<ffi.Void> _Base,
  ffi.Uint64 _NumOfElements,
  ffi.Uint64 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef _dart_qsort_s = void Function(
  ffi.Pointer<ffi.Void> _Base,
  int _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef _CoreCrtNonSecureSearchSortCompareFunction = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef Native_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Uint64 _NumOfElements,
  ffi.Uint64 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _dart_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  int _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef Native_qsort = ffi.Void Function(
  ffi.Pointer<ffi.Void> _Base,
  ffi.Uint64 _NumOfElements,
  ffi.Uint64 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _dart_qsort = void Function(
  ffi.Pointer<ffi.Void> _Base,
  int _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef Native__lfind_s = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  ffi.Uint64 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef _dart__lfind_s = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef Native__lfind = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  ffi.Uint32 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _dart__lfind = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef Native__lsearch_s = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  ffi.Uint64 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef _dart__lsearch_s = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef Native__lsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  ffi.Uint32 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _dart__lsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef Native_lfind = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  ffi.Uint32 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _dart_lfind = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef Native_lsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  ffi.Uint32 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _dart_lsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef Native__itow_s = ffi.Int32 Function(
  ffi.Int32 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__itow_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef Native__itow = ffi.Pointer<ffi.Uint16> Function(
  ffi.Int32 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__itow = ffi.Pointer<ffi.Uint16> Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _Radix,
);

typedef Native__ltow_s = ffi.Int32 Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__ltow_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef Native__ltow = ffi.Pointer<ffi.Uint16> Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__ltow = ffi.Pointer<ffi.Uint16> Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _Radix,
);

typedef Native__ultow_s = ffi.Int32 Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__ultow_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef Native__ultow = ffi.Pointer<ffi.Uint16> Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__ultow = ffi.Pointer<ffi.Uint16> Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _Radix,
);

typedef Native_wcstod = ffi.Double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
);

typedef _dart_wcstod = double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
);

typedef Native__wcstod_l = ffi.Double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstod_l = double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_wcstol = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_wcstol = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
);

typedef Native__wcstol_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstol_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_wcstoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_wcstoll = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
);

typedef Native__wcstoll_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_wcstoul = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_wcstoul = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
);

typedef Native__wcstoul_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstoul_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_wcstoull = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_wcstoull = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
);

typedef Native__wcstoull_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstoull_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_wcstof = ffi.Float Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
);

typedef _dart_wcstof = double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
);

typedef Native__wcstof_l = ffi.Float Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstof_l = double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wtof = ffi.Double Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wtof = double Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef Native__wtof_l = ffi.Double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wtof_l = double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wtoi = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wtoi = int Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef Native__wtoi_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wtoi_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wtol = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wtol = int Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef Native__wtol_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wtol_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wtoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wtoll = int Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef Native__wtoll_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wtoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__i64tow_s = ffi.Int32 Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__i64tow_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef Native__i64tow = ffi.Pointer<ffi.Uint16> Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__i64tow = ffi.Pointer<ffi.Uint16> Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _Radix,
);

typedef Native__ui64tow_s = ffi.Int32 Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__ui64tow_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef Native__ui64tow = ffi.Pointer<ffi.Uint16> Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__ui64tow = ffi.Pointer<ffi.Uint16> Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _Radix,
);

typedef Native__wtoi64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wtoi64 = int Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef Native__wtoi64_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wtoi64_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wcstoi64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart__wcstoi64 = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
);

typedef Native__wcstoi64_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstoi64_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wcstoui64 = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart__wcstoui64 = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
);

typedef Native__wcstoui64_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstoui64_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wfullpath = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Pointer<ffi.Uint16> _Path,
  ffi.Uint64 _BufferCount,
);

typedef _dart__wfullpath = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Pointer<ffi.Uint16> _Path,
  int _BufferCount,
);

typedef Native__wmakepath_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Uint16> _Drive,
  ffi.Pointer<ffi.Uint16> _Dir,
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _Ext,
);

typedef _dart__wmakepath_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Uint16> _Drive,
  ffi.Pointer<ffi.Uint16> _Dir,
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _Ext,
);

typedef Native__wmakepath = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Pointer<ffi.Uint16> _Drive,
  ffi.Pointer<ffi.Uint16> _Dir,
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _Ext,
);

typedef _dart__wmakepath = void Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Pointer<ffi.Uint16> _Drive,
  ffi.Pointer<ffi.Uint16> _Dir,
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _Ext,
);

typedef Native__wperror = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> _ErrorMessage,
);

typedef _dart__wperror = void Function(
  ffi.Pointer<ffi.Uint16> _ErrorMessage,
);

typedef Native__wsplitpath = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> _FullPath,
  ffi.Pointer<ffi.Uint16> _Drive,
  ffi.Pointer<ffi.Uint16> _Dir,
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _Ext,
);

typedef _dart__wsplitpath = void Function(
  ffi.Pointer<ffi.Uint16> _FullPath,
  ffi.Pointer<ffi.Uint16> _Drive,
  ffi.Pointer<ffi.Uint16> _Dir,
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _Ext,
);

typedef Native__wsplitpath_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _FullPath,
  ffi.Pointer<ffi.Uint16> _Drive,
  ffi.Uint64 _DriveCount,
  ffi.Pointer<ffi.Uint16> _Dir,
  ffi.Uint64 _DirCount,
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Uint64 _FilenameCount,
  ffi.Pointer<ffi.Uint16> _Ext,
  ffi.Uint64 _ExtCount,
);

typedef _dart__wsplitpath_s = int Function(
  ffi.Pointer<ffi.Uint16> _FullPath,
  ffi.Pointer<ffi.Uint16> _Drive,
  int _DriveCount,
  ffi.Pointer<ffi.Uint16> _Dir,
  int _DirCount,
  ffi.Pointer<ffi.Uint16> _Filename,
  int _FilenameCount,
  ffi.Pointer<ffi.Uint16> _Ext,
  int _ExtCount,
);

typedef Native__wdupenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Buffer,
  ffi.Pointer<ffi.Uint64> _BufferCount,
  ffi.Pointer<ffi.Uint16> _VarName,
);

typedef _dart__wdupenv_s = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Buffer,
  ffi.Pointer<ffi.Uint64> _BufferCount,
  ffi.Pointer<ffi.Uint16> _VarName,
);

typedef Native__wgetenv = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _VarName,
);

typedef _dart__wgetenv = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _VarName,
);

typedef Native__wgetenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _RequiredCount,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Uint16> _VarName,
);

typedef _dart__wgetenv_s = int Function(
  ffi.Pointer<ffi.Uint64> _RequiredCount,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Uint16> _VarName,
);

typedef Native__wputenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _EnvString,
);

typedef _dart__wputenv = int Function(
  ffi.Pointer<ffi.Uint16> _EnvString,
);

typedef Native__wputenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Name,
  ffi.Pointer<ffi.Uint16> _Value,
);

typedef _dart__wputenv_s = int Function(
  ffi.Pointer<ffi.Uint16> _Name,
  ffi.Pointer<ffi.Uint16> _Value,
);

typedef Native__wsearchenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _VarName,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
);

typedef _dart__wsearchenv_s = int Function(
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _VarName,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
);

typedef Native__wsearchenv = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _VarName,
  ffi.Pointer<ffi.Uint16> _ResultPath,
);

typedef _dart__wsearchenv = void Function(
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _VarName,
  ffi.Pointer<ffi.Uint16> _ResultPath,
);

typedef Native__wsystem = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Command,
);

typedef _dart__wsystem = int Function(
  ffi.Pointer<ffi.Uint16> _Command,
);

typedef Native__swab = ffi.Void Function(
  ffi.Pointer<ffi.Int8> _Buf1,
  ffi.Pointer<ffi.Int8> _Buf2,
  ffi.Int32 _SizeInBytes,
);

typedef _dart__swab = void Function(
  ffi.Pointer<ffi.Int8> _Buf1,
  ffi.Pointer<ffi.Int8> _Buf2,
  int _SizeInBytes,
);

typedef Native_exit = ffi.Void Function(
  ffi.Int32 _Code,
);

typedef _dart_exit = void Function(
  int _Code,
);

typedef Native__exit = ffi.Void Function(
  ffi.Int32 _Code,
);

typedef _dart__exit = void Function(
  int _Code,
);

typedef Native__Exit = ffi.Void Function(
  ffi.Int32 _Code,
);

typedef _dart__Exit = void Function(
  int _Code,
);

typedef Native_quick_exit = ffi.Void Function(
  ffi.Int32 _Code,
);

typedef _dart_quick_exit = void Function(
  int _Code,
);

typedef Native_abort = ffi.Void Function();

typedef _dart_abort = void Function();

typedef Native__set_abort_behavior = ffi.Uint32 Function(
  ffi.Uint32 _Flags,
  ffi.Uint32 _Mask,
);

typedef _dart__set_abort_behavior = int Function(
  int _Flags,
  int _Mask,
);

typedef _typedefC_1 = ffi.Void Function();

typedef Native_atexit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> arg0,
);

typedef _dart_atexit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> arg0,
);

typedef _onexit_t = ffi.Int32 Function();

typedef Native__onexit = ffi.Pointer<ffi.NativeFunction<_onexit_t>> Function(
  ffi.Pointer<ffi.NativeFunction<_onexit_t>> _Func,
);

typedef _dart__onexit = ffi.Pointer<ffi.NativeFunction<_onexit_t>> Function(
  ffi.Pointer<ffi.NativeFunction<_onexit_t>> _Func,
);

typedef _typedefC_2 = ffi.Void Function();

typedef Native_at_quick_exit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> arg0,
);

typedef _dart_at_quick_exit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> arg0,
);

typedef _purecall_handler = ffi.Void Function();

typedef Native__set_purecall_handler
    = ffi.Pointer<ffi.NativeFunction<_purecall_handler>> Function(
  ffi.Pointer<ffi.NativeFunction<_purecall_handler>> _Handler,
);

typedef _dart__set_purecall_handler
    = ffi.Pointer<ffi.NativeFunction<_purecall_handler>> Function(
  ffi.Pointer<ffi.NativeFunction<_purecall_handler>> _Handler,
);

typedef Native__get_purecall_handler
    = ffi.Pointer<ffi.NativeFunction<_purecall_handler>> Function();

typedef _dart__get_purecall_handler
    = ffi.Pointer<ffi.NativeFunction<_purecall_handler>> Function();

typedef _invalid_parameter_handler = ffi.Void Function(
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Uint32,
  ffi.Uint64,
);

typedef Native__set_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function(
  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> _Handler,
);

typedef _dart__set_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function(
  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> _Handler,
);

typedef Native__get_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function();

typedef _dart__get_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function();

typedef Native__set_thread_local_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function(
  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> _Handler,
);

typedef _dart__set_thread_local_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function(
  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> _Handler,
);

typedef Native__get_thread_local_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function();

typedef _dart__get_thread_local_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function();

typedef Native__set_error_mode = ffi.Int32 Function(
  ffi.Int32 _Mode,
);

typedef _dart__set_error_mode = int Function(
  int _Mode,
);

typedef Native__errno = ffi.Pointer<ffi.Int32> Function();

typedef _dart__errno = ffi.Pointer<ffi.Int32> Function();

typedef Native___doserrno = ffi.Pointer<ffi.Uint64> Function();

typedef _dart___doserrno = ffi.Pointer<ffi.Uint64> Function();

typedef Native__set_doserrno = ffi.Int32 Function(
  ffi.Uint64 _Value,
);

typedef _dart__set_doserrno = int Function(
  int _Value,
);

typedef Native__get_doserrno = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _Value,
);

typedef _dart__get_doserrno = int Function(
  ffi.Pointer<ffi.Uint64> _Value,
);

typedef Native___sys_errlist = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef _dart___sys_errlist = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef Native___sys_nerr = ffi.Pointer<ffi.Int32> Function();

typedef _dart___sys_nerr = ffi.Pointer<ffi.Int32> Function();

typedef Native_perror = ffi.Void Function(
  ffi.Pointer<ffi.Int8> _ErrMsg,
);

typedef _dart_perror = void Function(
  ffi.Pointer<ffi.Int8> _ErrMsg,
);

typedef Native___p__pgmptr = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef _dart___p__pgmptr = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef Native___p__wpgmptr = ffi.Pointer<ffi.Pointer<ffi.Uint16>> Function();

typedef _dart___p__wpgmptr = ffi.Pointer<ffi.Pointer<ffi.Uint16>> Function();

typedef Native___p__fmode = ffi.Pointer<ffi.Int32> Function();

typedef _dart___p__fmode = ffi.Pointer<ffi.Int32> Function();

typedef Native__get_pgmptr = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Value,
);

typedef _dart__get_pgmptr = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Value,
);

typedef Native__get_wpgmptr = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Value,
);

typedef _dart__get_wpgmptr = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Value,
);

typedef Native__set_fmode = ffi.Int32 Function(
  ffi.Int32 _Mode,
);

typedef _dart__set_fmode = int Function(
  int _Mode,
);

typedef Native__get_fmode = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _PMode,
);

typedef _dart__get_fmode = int Function(
  ffi.Pointer<ffi.Int32> _PMode,
);

typedef Native__abs64 = ffi.Int64 Function(
  ffi.Int64 _Number,
);

typedef _dart__abs64 = int Function(
  int _Number,
);

typedef Native__byteswap_ushort = ffi.Uint16 Function(
  ffi.Uint16 _Number,
);

typedef _dart__byteswap_ushort = int Function(
  int _Number,
);

typedef Native__byteswap_ulong = ffi.Uint64 Function(
  ffi.Uint64 _Number,
);

typedef _dart__byteswap_ulong = int Function(
  int _Number,
);

typedef Native__byteswap_uint64 = ffi.Uint64 Function(
  ffi.Uint64 _Number,
);

typedef _dart__byteswap_uint64 = int Function(
  int _Number,
);

typedef Native_div = div_t Function(
  ffi.Int32 _Numerator,
  ffi.Int32 _Denominator,
);

typedef _dart_div = div_t Function(
  int _Numerator,
  int _Denominator,
);

typedef Native_ldiv = ldiv_t Function(
  ffi.Int64 _Numerator,
  ffi.Int64 _Denominator,
);

typedef _dart_ldiv = ldiv_t Function(
  int _Numerator,
  int _Denominator,
);

typedef Native_lldiv = lldiv_t Function(
  ffi.Int64 _Numerator,
  ffi.Int64 _Denominator,
);

typedef _dart_lldiv = lldiv_t Function(
  int _Numerator,
  int _Denominator,
);

typedef Native__rotl = ffi.Uint32 Function(
  ffi.Uint32 _Value,
  ffi.Int32 _Shift,
);

typedef _dart__rotl = int Function(
  int _Value,
  int _Shift,
);

typedef Native__lrotl = ffi.Uint64 Function(
  ffi.Uint64 _Value,
  ffi.Int32 _Shift,
);

typedef _dart__lrotl = int Function(
  int _Value,
  int _Shift,
);

typedef Native__rotl64 = ffi.Uint64 Function(
  ffi.Uint64 _Value,
  ffi.Int32 _Shift,
);

typedef _dart__rotl64 = int Function(
  int _Value,
  int _Shift,
);

typedef Native__rotr = ffi.Uint32 Function(
  ffi.Uint32 _Value,
  ffi.Int32 _Shift,
);

typedef _dart__rotr = int Function(
  int _Value,
  int _Shift,
);

typedef Native__lrotr = ffi.Uint64 Function(
  ffi.Uint64 _Value,
  ffi.Int32 _Shift,
);

typedef _dart__lrotr = int Function(
  int _Value,
  int _Shift,
);

typedef Native__rotr64 = ffi.Uint64 Function(
  ffi.Uint64 _Value,
  ffi.Int32 _Shift,
);

typedef _dart__rotr64 = int Function(
  int _Value,
  int _Shift,
);

typedef Native_srand = ffi.Void Function(
  ffi.Uint32 _Seed,
);

typedef _dart_srand = void Function(
  int _Seed,
);

typedef Native_rand = ffi.Int32 Function();

typedef _dart_rand = int Function();

typedef Native_atoi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_atoi = int Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef Native_atol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_atol = int Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef Native_atoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_atoll = int Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef Native__atoi64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__atoi64 = int Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef Native__atoi_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atoi_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__atol_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atol_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__atoll_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__atoi64_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atoi64_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__atoflt = ffi.Int32 Function(
  ffi.Pointer<_CRT_FLOAT> _Result,
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__atoflt = int Function(
  ffi.Pointer<_CRT_FLOAT> _Result,
  ffi.Pointer<ffi.Int8> _String,
);

typedef Native__atodbl = ffi.Int32 Function(
  ffi.Pointer<_CRT_DOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__atodbl = int Function(
  ffi.Pointer<_CRT_DOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
);

typedef Native__atoldbl = ffi.Int32 Function(
  ffi.Pointer<_LDOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__atoldbl = int Function(
  ffi.Pointer<_LDOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
);

typedef Native__atoflt_l = ffi.Int32 Function(
  ffi.Pointer<_CRT_FLOAT> _Result,
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atoflt_l = int Function(
  ffi.Pointer<_CRT_FLOAT> _Result,
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__atodbl_l = ffi.Int32 Function(
  ffi.Pointer<_CRT_DOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atodbl_l = int Function(
  ffi.Pointer<_CRT_DOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__atoldbl_l = ffi.Int32 Function(
  ffi.Pointer<_LDOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atoldbl_l = int Function(
  ffi.Pointer<_LDOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_strtof = ffi.Float Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
);

typedef _dart_strtof = double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
);

typedef Native__strtof_l = ffi.Float Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtof_l = double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_strtod = ffi.Double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
);

typedef _dart_strtod = double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
);

typedef Native__strtod_l = ffi.Double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtod_l = double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_strtol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_strtol = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
);

typedef Native__strtol_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtol_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_strtoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_strtoll = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
);

typedef Native__strtoll_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_strtoul = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_strtoul = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
);

typedef Native__strtoul_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtoul_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_strtoull = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_strtoull = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
);

typedef Native__strtoull_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtoull_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__strtoi64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart__strtoi64 = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
);

typedef Native__strtoi64_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtoi64_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__strtoui64 = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart__strtoui64 = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
);

typedef Native__strtoui64_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtoui64_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__itoa_s = ffi.Int32 Function(
  ffi.Int32 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__itoa_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef Native__itoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__itoa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef Native__ltoa_s = ffi.Int32 Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__ltoa_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef Native__ltoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__ltoa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef Native__ultoa_s = ffi.Int32 Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__ultoa_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef Native__ultoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__ultoa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef Native__i64toa_s = ffi.Int32 Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__i64toa_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef Native__i64toa = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__i64toa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef Native__ui64toa_s = ffi.Int32 Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__ui64toa_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef Native__ui64toa = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__ui64toa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef Native__ecvt_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Double _Value,
  ffi.Int32 _DigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _dart__ecvt_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  double _Value,
  int _DigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef Native__ecvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double _Value,
  ffi.Int32 _DigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _dart__ecvt = ffi.Pointer<ffi.Int8> Function(
  double _Value,
  int _DigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef Native__fcvt_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Double _Value,
  ffi.Int32 _FractionalDigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _dart__fcvt_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  double _Value,
  int _FractionalDigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef Native__fcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double _Value,
  ffi.Int32 _FractionalDigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _dart__fcvt = ffi.Pointer<ffi.Int8> Function(
  double _Value,
  int _FractionalDigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef Native__gcvt_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Double _Value,
  ffi.Int32 _DigitCount,
);

typedef _dart__gcvt_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  double _Value,
  int _DigitCount,
);

typedef Native__gcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double _Value,
  ffi.Int32 _DigitCount,
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef _dart__gcvt = ffi.Pointer<ffi.Int8> Function(
  double _Value,
  int _DigitCount,
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef Native____mb_cur_max_func = ffi.Int32 Function();

typedef _dart____mb_cur_max_func = int Function();

typedef Native____mb_cur_max_l_func = ffi.Int32 Function(
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart____mb_cur_max_l_func = int Function(
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_mblen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Ch,
  ffi.Uint64 _MaxCount,
);

typedef _dart_mblen = int Function(
  ffi.Pointer<ffi.Int8> _Ch,
  int _MaxCount,
);

typedef Native__mblen_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Ch,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__mblen_l = int Function(
  ffi.Pointer<ffi.Int8> _Ch,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__mbstrlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__mbstrlen = int Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef Native__mbstrlen_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__mbstrlen_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__mbstrnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _MaxCount,
);

typedef _dart__mbstrnlen = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _MaxCount,
);

typedef Native__mbstrnlen_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__mbstrnlen_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_mbtowc = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _DstCh,
  ffi.Pointer<ffi.Int8> _SrcCh,
  ffi.Uint64 _SrcSizeInBytes,
);

typedef _dart_mbtowc = int Function(
  ffi.Pointer<ffi.Uint16> _DstCh,
  ffi.Pointer<ffi.Int8> _SrcCh,
  int _SrcSizeInBytes,
);

typedef Native__mbtowc_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _DstCh,
  ffi.Pointer<ffi.Int8> _SrcCh,
  ffi.Uint64 _SrcSizeInBytes,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__mbtowc_l = int Function(
  ffi.Pointer<ffi.Uint16> _DstCh,
  ffi.Pointer<ffi.Int8> _SrcCh,
  int _SrcSizeInBytes,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_mbstowcs_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Uint16> _DstBuf,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Int8> _SrcBuf,
  ffi.Uint64 _MaxCount,
);

typedef _dart_mbstowcs_s = int Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Uint16> _DstBuf,
  int _SizeInWords,
  ffi.Pointer<ffi.Int8> _SrcBuf,
  int _MaxCount,
);

typedef Native_mbstowcs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Dest,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_mbstowcs = int Function(
  ffi.Pointer<ffi.Uint16> _Dest,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
);

typedef Native__mbstowcs_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Uint16> _DstBuf,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Int8> _SrcBuf,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__mbstowcs_s_l = int Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Uint16> _DstBuf,
  int _SizeInWords,
  ffi.Pointer<ffi.Int8> _SrcBuf,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__mbstowcs_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Dest,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__mbstowcs_l = int Function(
  ffi.Pointer<ffi.Uint16> _Dest,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_wctomb = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _MbCh,
  ffi.Uint16 _WCh,
);

typedef _dart_wctomb = int Function(
  ffi.Pointer<ffi.Int8> _MbCh,
  int _WCh,
);

typedef Native__wctomb_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _MbCh,
  ffi.Uint16 _WCh,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wctomb_l = int Function(
  ffi.Pointer<ffi.Int8> _MbCh,
  int _WCh,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_wctomb_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _SizeConverted,
  ffi.Pointer<ffi.Int8> _MbCh,
  ffi.Uint64 _SizeInBytes,
  ffi.Uint16 _WCh,
);

typedef _dart_wctomb_s = int Function(
  ffi.Pointer<ffi.Int32> _SizeConverted,
  ffi.Pointer<ffi.Int8> _MbCh,
  int _SizeInBytes,
  int _WCh,
);

typedef Native__wctomb_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _SizeConverted,
  ffi.Pointer<ffi.Int8> _MbCh,
  ffi.Uint64 _SizeInBytes,
  ffi.Uint16 _WCh,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wctomb_s_l = int Function(
  ffi.Pointer<ffi.Int32> _SizeConverted,
  ffi.Pointer<ffi.Int8> _MbCh,
  int _SizeInBytes,
  int _WCh,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_wcstombs_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Int8> _Dst,
  ffi.Uint64 _DstSizeInBytes,
  ffi.Pointer<ffi.Uint16> _Src,
  ffi.Uint64 _MaxCountInBytes,
);

typedef _dart_wcstombs_s = int Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Int8> _Dst,
  int _DstSizeInBytes,
  ffi.Pointer<ffi.Uint16> _Src,
  int _MaxCountInBytes,
);

typedef Native_wcstombs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Dest,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcstombs = int Function(
  ffi.Pointer<ffi.Int8> _Dest,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
);

typedef Native__wcstombs_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Int8> _Dst,
  ffi.Uint64 _DstSizeInBytes,
  ffi.Pointer<ffi.Uint16> _Src,
  ffi.Uint64 _MaxCountInBytes,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstombs_s_l = int Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Int8> _Dst,
  int _DstSizeInBytes,
  ffi.Pointer<ffi.Uint16> _Src,
  int _MaxCountInBytes,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wcstombs_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Dest,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstombs_l = int Function(
  ffi.Pointer<ffi.Int8> _Dest,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__fullpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Pointer<ffi.Int8> _Path,
  ffi.Uint64 _BufferCount,
);

typedef _dart__fullpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Pointer<ffi.Int8> _Path,
  int _BufferCount,
);

typedef Native__makepath_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Int8> _Drive,
  ffi.Pointer<ffi.Int8> _Dir,
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _Ext,
);

typedef _dart__makepath_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Int8> _Drive,
  ffi.Pointer<ffi.Int8> _Dir,
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _Ext,
);

typedef Native__makepath = ffi.Void Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Pointer<ffi.Int8> _Drive,
  ffi.Pointer<ffi.Int8> _Dir,
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _Ext,
);

typedef _dart__makepath = void Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Pointer<ffi.Int8> _Drive,
  ffi.Pointer<ffi.Int8> _Dir,
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _Ext,
);

typedef Native__splitpath = ffi.Void Function(
  ffi.Pointer<ffi.Int8> _FullPath,
  ffi.Pointer<ffi.Int8> _Drive,
  ffi.Pointer<ffi.Int8> _Dir,
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _Ext,
);

typedef _dart__splitpath = void Function(
  ffi.Pointer<ffi.Int8> _FullPath,
  ffi.Pointer<ffi.Int8> _Drive,
  ffi.Pointer<ffi.Int8> _Dir,
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _Ext,
);

typedef Native__splitpath_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _FullPath,
  ffi.Pointer<ffi.Int8> _Drive,
  ffi.Uint64 _DriveCount,
  ffi.Pointer<ffi.Int8> _Dir,
  ffi.Uint64 _DirCount,
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Uint64 _FilenameCount,
  ffi.Pointer<ffi.Int8> _Ext,
  ffi.Uint64 _ExtCount,
);

typedef _dart__splitpath_s = int Function(
  ffi.Pointer<ffi.Int8> _FullPath,
  ffi.Pointer<ffi.Int8> _Drive,
  int _DriveCount,
  ffi.Pointer<ffi.Int8> _Dir,
  int _DirCount,
  ffi.Pointer<ffi.Int8> _Filename,
  int _FilenameCount,
  ffi.Pointer<ffi.Int8> _Ext,
  int _ExtCount,
);

typedef Native_getenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _RequiredCount,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Int8> _VarName,
);

typedef _dart_getenv_s = int Function(
  ffi.Pointer<ffi.Uint64> _RequiredCount,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Int8> _VarName,
);

typedef Native___p___argc = ffi.Pointer<ffi.Int32> Function();

typedef _dart___p___argc = ffi.Pointer<ffi.Int32> Function();

typedef Native___p___argv = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>
    Function();

typedef _dart___p___argv = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>
    Function();

typedef Native___p___wargv = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Uint16>>>
    Function();

typedef _dart___p___wargv = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Uint16>>>
    Function();

typedef Native___p__environ = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>
    Function();

typedef _dart___p__environ = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>
    Function();

typedef Native___p__wenviron = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Uint16>>>
    Function();

typedef _dart___p__wenviron = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Uint16>>>
    Function();

typedef Native_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _VarName,
);

typedef _dart_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _VarName,
);

typedef Native__dupenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Buffer,
  ffi.Pointer<ffi.Uint64> _BufferCount,
  ffi.Pointer<ffi.Int8> _VarName,
);

typedef _dart__dupenv_s = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Buffer,
  ffi.Pointer<ffi.Uint64> _BufferCount,
  ffi.Pointer<ffi.Int8> _VarName,
);

typedef Native_system = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Command,
);

typedef _dart_system = int Function(
  ffi.Pointer<ffi.Int8> _Command,
);

typedef Native__putenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _EnvString,
);

typedef _dart__putenv = int Function(
  ffi.Pointer<ffi.Int8> _EnvString,
);

typedef Native__putenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Name,
  ffi.Pointer<ffi.Int8> _Value,
);

typedef _dart__putenv_s = int Function(
  ffi.Pointer<ffi.Int8> _Name,
  ffi.Pointer<ffi.Int8> _Value,
);

typedef Native__searchenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _VarName,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
);

typedef _dart__searchenv_s = int Function(
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _VarName,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
);

typedef Native__searchenv = ffi.Void Function(
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _VarName,
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef _dart__searchenv = void Function(
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _VarName,
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef Native__seterrormode = ffi.Void Function(
  ffi.Int32 _Mode,
);

typedef _dart__seterrormode = void Function(
  int _Mode,
);

typedef Native__beep = ffi.Void Function(
  ffi.Uint32 _Frequency,
  ffi.Uint32 _Duration,
);

typedef _dart__beep = void Function(
  int _Frequency,
  int _Duration,
);

typedef Native__sleep = ffi.Void Function(
  ffi.Uint64 _Duration,
);

typedef _dart__sleep = void Function(
  int _Duration,
);

typedef Native_ecvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double _Value,
  ffi.Int32 _DigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _dart_ecvt = ffi.Pointer<ffi.Int8> Function(
  double _Value,
  int _DigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef Native_fcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double _Value,
  ffi.Int32 _FractionalDigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _dart_fcvt = ffi.Pointer<ffi.Int8> Function(
  double _Value,
  int _FractionalDigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef Native_gcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double _Value,
  ffi.Int32 _DigitCount,
  ffi.Pointer<ffi.Int8> _DstBuf,
);

typedef _dart_gcvt = ffi.Pointer<ffi.Int8> Function(
  double _Value,
  int _DigitCount,
  ffi.Pointer<ffi.Int8> _DstBuf,
);

typedef Native_itoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart_itoa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef Native_ltoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart_ltoa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef Native_swab = ffi.Void Function(
  ffi.Pointer<ffi.Int8> _Buf1,
  ffi.Pointer<ffi.Int8> _Buf2,
  ffi.Int32 _SizeInBytes,
);

typedef _dart_swab = void Function(
  ffi.Pointer<ffi.Int8> _Buf1,
  ffi.Pointer<ffi.Int8> _Buf2,
  int _SizeInBytes,
);

typedef Native_ultoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart_ultoa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef Native_putenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _EnvString,
);

typedef _dart_putenv = int Function(
  ffi.Pointer<ffi.Int8> _EnvString,
);

typedef Native_onexit = ffi.Pointer<ffi.NativeFunction<_onexit_t>> Function(
  ffi.Pointer<ffi.NativeFunction<_onexit_t>> _Func,
);

typedef _dart_onexit = ffi.Pointer<ffi.NativeFunction<_onexit_t>> Function(
  ffi.Pointer<ffi.NativeFunction<_onexit_t>> _Func,
);

typedef Native__alloca = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 _Size,
);

typedef _dart__alloca = ffi.Pointer<ffi.Void> Function(
  int _Size,
);

typedef Native__get_heap_handle = ffi.IntPtr Function();

typedef _dart__get_heap_handle = int Function();

typedef Native__heapmin = ffi.Int32 Function();

typedef _dart__heapmin = int Function();

typedef Native__heapwalk = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _EntryInfo,
);

typedef _dart__heapwalk = int Function(
  ffi.Pointer<ffi.Int32> _EntryInfo,
);

typedef Native__heapchk = ffi.Int32 Function();

typedef _dart__heapchk = int Function();

typedef Native__resetstkoflw = ffi.Int32 Function();

typedef _dart__resetstkoflw = int Function();

typedef Native___std_exception_copy = ffi.Void Function(
  ffi.Pointer<__std_exception_data> _From,
  ffi.Pointer<__std_exception_data> _To,
);

typedef _dart___std_exception_copy = void Function(
  ffi.Pointer<__std_exception_data> _From,
  ffi.Pointer<__std_exception_data> _To,
);

typedef Native___std_exception_destroy = ffi.Void Function(
  ffi.Pointer<__std_exception_data> _Data,
);

typedef _dart___std_exception_destroy = void Function(
  ffi.Pointer<__std_exception_data> _Data,
);

typedef Native___ExceptionPtrRethrow = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart___ExceptionPtrRethrow = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native___acrt_iob_func = ffi.Pointer<ffi.Int32> Function(
  ffi.Uint32 _Ix,
);

typedef _dart___acrt_iob_func = ffi.Pointer<ffi.Int32> Function(
  int _Ix,
);

typedef Native_fgetwc = ffi.Uint16 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_fgetwc = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fgetwchar = ffi.Uint16 Function();

typedef _dart__fgetwchar = int Function();

typedef Native_fputwc = ffi.Uint16 Function(
  ffi.Uint16 _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_fputwc = int Function(
  int _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fputwchar = ffi.Uint16 Function(
  ffi.Uint16 _Character,
);

typedef _dart__fputwchar = int Function(
  int _Character,
);

typedef Native_getwc = ffi.Uint16 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_getwc = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_getwchar = ffi.Uint16 Function();

typedef _dart_getwchar = int Function();

typedef Native_fgetws = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Int32 _BufferCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_fgetws = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_fputws = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_fputws = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__getws_s = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
);

typedef _dart__getws_s = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
);

typedef Native_putwc = ffi.Uint16 Function(
  ffi.Uint16 _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_putwc = int Function(
  int _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_putwchar = ffi.Uint16 Function(
  ffi.Uint16 _Character,
);

typedef _dart_putwchar = int Function(
  int _Character,
);

typedef Native__putws = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
);

typedef _dart__putws = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
);

typedef Native_ungetwc = ffi.Uint16 Function(
  ffi.Uint16 _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_ungetwc = int Function(
  int _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__wfdopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Int32 _FileHandle,
  ffi.Pointer<ffi.Uint16> _Mode,
);

typedef _dart__wfdopen = ffi.Pointer<ffi.Int32> Function(
  int _FileHandle,
  ffi.Pointer<ffi.Uint16> _Mode,
);

typedef Native__wfopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _Mode,
);

typedef _dart__wfopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _Mode,
);

typedef Native__wfopen_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> _Stream,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _Mode,
);

typedef _dart__wfopen_s = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> _Stream,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _Mode,
);

typedef Native__wfreopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _Mode,
  ffi.Pointer<ffi.Int32> _OldStream,
);

typedef _dart__wfreopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _Mode,
  ffi.Pointer<ffi.Int32> _OldStream,
);

typedef Native__wfreopen_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> _Stream,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _Mode,
  ffi.Pointer<ffi.Int32> _OldStream,
);

typedef _dart__wfreopen_s = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> _Stream,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _Mode,
  ffi.Pointer<ffi.Int32> _OldStream,
);

typedef Native__wfsopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _Mode,
  ffi.Int32 _ShFlag,
);

typedef _dart__wfsopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _Mode,
  int _ShFlag,
);

typedef Native__wpopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Uint16> _Command,
  ffi.Pointer<ffi.Uint16> _Mode,
);

typedef _dart__wpopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Uint16> _Command,
  ffi.Pointer<ffi.Uint16> _Mode,
);

typedef Native__wremove = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _FileName,
);

typedef _dart__wremove = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
);

typedef Native__wtempnam = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Directory,
  ffi.Pointer<ffi.Uint16> _FilePrefix,
);

typedef _dart__wtempnam = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Directory,
  ffi.Pointer<ffi.Uint16> _FilePrefix,
);

typedef Native__wtmpnam_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
);

typedef _dart__wtmpnam_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
);

typedef Native__wtmpnam = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
);

typedef _dart__wtmpnam = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
);

typedef Native__fgetwc_nolock = ffi.Uint16 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__fgetwc_nolock = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fputwc_nolock = ffi.Uint16 Function(
  ffi.Uint16 _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__fputwc_nolock = int Function(
  int _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__getwc_nolock = ffi.Uint16 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__getwc_nolock = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__putwc_nolock = ffi.Uint16 Function(
  ffi.Uint16 _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__putwc_nolock = int Function(
  int _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__ungetwc_nolock = ffi.Uint16 Function(
  ffi.Uint16 _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__ungetwc_nolock = int Function(
  int _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native___stdio_common_vfwprintf = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vfwprintf = int Function(
  int _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___stdio_common_vfwprintf_s = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vfwprintf_s = int Function(
  int _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___stdio_common_vfwprintf_p = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vfwprintf_p = int Function(
  int _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___stdio_common_vfwscanf = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vfwscanf = int Function(
  int _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___stdio_common_vswprintf = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vswprintf = int Function(
  int _Options,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___stdio_common_vswprintf_s = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vswprintf_s = int Function(
  int _Options,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___stdio_common_vsnwprintf_s = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vsnwprintf_s = int Function(
  int _Options,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  int _MaxCount,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___stdio_common_vswprintf_p = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vswprintf_p = int Function(
  int _Options,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___stdio_common_vswscanf = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vswscanf = int Function(
  int _Options,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native__get_stream_buffer_pointers = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _Base,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _Pointer,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> _Count,
);

typedef _dart__get_stream_buffer_pointers = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _Base,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _Pointer,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> _Count,
);

typedef Native_clearerr_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_clearerr_s = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_fopen_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> _Stream,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Mode,
);

typedef _dart_fopen_s = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> _Stream,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Mode,
);

typedef Native_fread_s = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> _Buffer,
  ffi.Uint64 _BufferSize,
  ffi.Uint64 _ElementSize,
  ffi.Uint64 _ElementCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_fread_s = int Function(
  ffi.Pointer<ffi.Void> _Buffer,
  int _BufferSize,
  int _ElementSize,
  int _ElementCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_freopen_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> _Stream,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Mode,
  ffi.Pointer<ffi.Int32> _OldStream,
);

typedef _dart_freopen_s = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> _Stream,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Mode,
  ffi.Pointer<ffi.Int32> _OldStream,
);

typedef Native_gets_s = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _Size,
);

typedef _dart_gets_s = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Size,
);

typedef Native_tmpfile_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> _Stream,
);

typedef _dart_tmpfile_s = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> _Stream,
);

typedef Native_tmpnam_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _Size,
);

typedef _dart_tmpnam_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Size,
);

typedef Native_clearerr = ffi.Void Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_clearerr = void Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_fclose = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_fclose = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fcloseall = ffi.Int32 Function();

typedef _dart__fcloseall = int Function();

typedef Native__fdopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Int32 _FileHandle,
  ffi.Pointer<ffi.Int8> _Mode,
);

typedef _dart__fdopen = ffi.Pointer<ffi.Int32> Function(
  int _FileHandle,
  ffi.Pointer<ffi.Int8> _Mode,
);

typedef Native_feof = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_feof = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_ferror = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_ferror = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_fflush = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_fflush = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_fgetc = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_fgetc = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fgetchar = ffi.Int32 Function();

typedef _dart__fgetchar = int Function();

typedef Native_fgetpos = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int64> _Position,
);

typedef _dart_fgetpos = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int64> _Position,
);

typedef Native_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _MaxCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _MaxCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fileno = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__fileno = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__flushall = ffi.Int32 Function();

typedef _dart__flushall = int Function();

typedef Native_fopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Mode,
);

typedef _dart_fopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Mode,
);

typedef Native_fputc = ffi.Int32 Function(
  ffi.Int32 _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_fputc = int Function(
  int _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fputchar = ffi.Int32 Function(
  ffi.Int32 _Character,
);

typedef _dart__fputchar = int Function(
  int _Character,
);

typedef Native_fputs = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_fputs = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_fread = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> _Buffer,
  ffi.Uint64 _ElementSize,
  ffi.Uint64 _ElementCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_fread = int Function(
  ffi.Pointer<ffi.Void> _Buffer,
  int _ElementSize,
  int _ElementCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_freopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Mode,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_freopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Mode,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fsopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Mode,
  ffi.Int32 _ShFlag,
);

typedef _dart__fsopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Mode,
  int _ShFlag,
);

typedef Native_fsetpos = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int64> _Position,
);

typedef _dart_fsetpos = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int64> _Position,
);

typedef Native_fseek = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Int64 _Offset,
  ffi.Int32 _Origin,
);

typedef _dart_fseek = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
  int _Offset,
  int _Origin,
);

typedef Native__fseeki64 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Int64 _Offset,
  ffi.Int32 _Origin,
);

typedef _dart__fseeki64 = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
  int _Offset,
  int _Origin,
);

typedef Native_ftell = ffi.Int64 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_ftell = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__ftelli64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__ftelli64 = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_fwrite = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> _Buffer,
  ffi.Uint64 _ElementSize,
  ffi.Uint64 _ElementCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_fwrite = int Function(
  ffi.Pointer<ffi.Void> _Buffer,
  int _ElementSize,
  int _ElementCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_getc = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_getc = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_getchar = ffi.Int32 Function();

typedef _dart_getchar = int Function();

typedef Native__getmaxstdio = ffi.Int32 Function();

typedef _dart__getmaxstdio = int Function();

typedef Native__getw = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__getw = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__pclose = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__pclose = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__popen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int8> _Command,
  ffi.Pointer<ffi.Int8> _Mode,
);

typedef _dart__popen = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int8> _Command,
  ffi.Pointer<ffi.Int8> _Mode,
);

typedef Native_putc = ffi.Int32 Function(
  ffi.Int32 _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_putc = int Function(
  int _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_putchar = ffi.Int32 Function(
  ffi.Int32 _Character,
);

typedef _dart_putchar = int Function(
  int _Character,
);

typedef Native_puts = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef _dart_puts = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef Native__putw = ffi.Int32 Function(
  ffi.Int32 _Word,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__putw = int Function(
  int _Word,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_remove = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _FileName,
);

typedef _dart_remove = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
);

typedef Native_rename = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _OldFileName,
  ffi.Pointer<ffi.Int8> _NewFileName,
);

typedef _dart_rename = int Function(
  ffi.Pointer<ffi.Int8> _OldFileName,
  ffi.Pointer<ffi.Int8> _NewFileName,
);

typedef Native__unlink = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _FileName,
);

typedef _dart__unlink = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
);

typedef Native_unlink = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _FileName,
);

typedef _dart_unlink = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
);

typedef Native_rewind = ffi.Void Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_rewind = void Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__rmtmp = ffi.Int32 Function();

typedef _dart__rmtmp = int Function();

typedef Native_setbuf = ffi.Void Function(
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef _dart_setbuf = void Function(
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef Native__setmaxstdio = ffi.Int32 Function(
  ffi.Int32 _Maximum,
);

typedef _dart__setmaxstdio = int Function(
  int _Maximum,
);

typedef Native_setvbuf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Mode,
  ffi.Uint64 _Size,
);

typedef _dart_setvbuf = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Mode,
  int _Size,
);

typedef Native__tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _DirectoryName,
  ffi.Pointer<ffi.Int8> _FilePrefix,
);

typedef _dart__tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _DirectoryName,
  ffi.Pointer<ffi.Int8> _FilePrefix,
);

typedef Native_tmpfile = ffi.Pointer<ffi.Int32> Function();

typedef _dart_tmpfile = ffi.Pointer<ffi.Int32> Function();

typedef Native_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef _dart_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef Native_ungetc = ffi.Int32 Function(
  ffi.Int32 _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_ungetc = int Function(
  int _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__lock_file = ffi.Void Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__lock_file = void Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__unlock_file = ffi.Void Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__unlock_file = void Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fclose_nolock = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__fclose_nolock = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fflush_nolock = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__fflush_nolock = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fgetc_nolock = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__fgetc_nolock = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fputc_nolock = ffi.Int32 Function(
  ffi.Int32 _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__fputc_nolock = int Function(
  int _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fread_nolock = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> _Buffer,
  ffi.Uint64 _ElementSize,
  ffi.Uint64 _ElementCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__fread_nolock = int Function(
  ffi.Pointer<ffi.Void> _Buffer,
  int _ElementSize,
  int _ElementCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fread_nolock_s = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> _Buffer,
  ffi.Uint64 _BufferSize,
  ffi.Uint64 _ElementSize,
  ffi.Uint64 _ElementCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__fread_nolock_s = int Function(
  ffi.Pointer<ffi.Void> _Buffer,
  int _BufferSize,
  int _ElementSize,
  int _ElementCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fseek_nolock = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Int64 _Offset,
  ffi.Int32 _Origin,
);

typedef _dart__fseek_nolock = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
  int _Offset,
  int _Origin,
);

typedef Native__fseeki64_nolock = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Int64 _Offset,
  ffi.Int32 _Origin,
);

typedef _dart__fseeki64_nolock = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
  int _Offset,
  int _Origin,
);

typedef Native__ftell_nolock = ffi.Int64 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__ftell_nolock = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__ftelli64_nolock = ffi.Int64 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__ftelli64_nolock = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__fwrite_nolock = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> _Buffer,
  ffi.Uint64 _ElementSize,
  ffi.Uint64 _ElementCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__fwrite_nolock = int Function(
  ffi.Pointer<ffi.Void> _Buffer,
  int _ElementSize,
  int _ElementCount,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__getc_nolock = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__getc_nolock = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__putc_nolock = ffi.Int32 Function(
  ffi.Int32 _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__putc_nolock = int Function(
  int _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native__ungetc_nolock = ffi.Int32 Function(
  ffi.Int32 _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart__ungetc_nolock = int Function(
  int _Character,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native___p__commode = ffi.Pointer<ffi.Int32> Function();

typedef _dart___p__commode = ffi.Pointer<ffi.Int32> Function();

typedef Native___stdio_common_vfprintf = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vfprintf = int Function(
  int _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___stdio_common_vfprintf_s = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vfprintf_s = int Function(
  int _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___stdio_common_vfprintf_p = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vfprintf_p = int Function(
  int _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native__set_printf_count_output = ffi.Int32 Function(
  ffi.Int32 _Value,
);

typedef _dart__set_printf_count_output = int Function(
  int _Value,
);

typedef Native__get_printf_count_output = ffi.Int32 Function();

typedef _dart__get_printf_count_output = int Function();

typedef Native___stdio_common_vfscanf = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _Arglist,
);

typedef _dart___stdio_common_vfscanf = int Function(
  int _Options,
  ffi.Pointer<ffi.Int32> _Stream,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _Arglist,
);

typedef Native___stdio_common_vsprintf = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vsprintf = int Function(
  int _Options,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___stdio_common_vsprintf_s = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vsprintf_s = int Function(
  int _Options,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___stdio_common_vsnprintf_s = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vsnprintf_s = int Function(
  int _Options,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  int _MaxCount,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___stdio_common_vsprintf_p = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vsprintf_p = int Function(
  int _Options,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___stdio_common_vsscanf = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___stdio_common_vsscanf = int Function(
  int _Options,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Directory,
  ffi.Pointer<ffi.Int8> _FilePrefix,
);

typedef _dart_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Directory,
  ffi.Pointer<ffi.Int8> _FilePrefix,
);

typedef Native_fcloseall = ffi.Int32 Function();

typedef _dart_fcloseall = int Function();

typedef Native_fdopen = ffi.Pointer<ffi.Int32> Function(
  ffi.Int32 _FileHandle,
  ffi.Pointer<ffi.Int8> _Format,
);

typedef _dart_fdopen = ffi.Pointer<ffi.Int32> Function(
  int _FileHandle,
  ffi.Pointer<ffi.Int8> _Format,
);

typedef Native_fgetchar = ffi.Int32 Function();

typedef _dart_fgetchar = int Function();

typedef Native_fileno = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_fileno = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_flushall = ffi.Int32 Function();

typedef _dart_flushall = int Function();

typedef Native_fputchar = ffi.Int32 Function(
  ffi.Int32 _Ch,
);

typedef _dart_fputchar = int Function(
  int _Ch,
);

typedef Native_getw = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_getw = int Function(
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_putw = ffi.Int32 Function(
  ffi.Int32 _Ch,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef _dart_putw = int Function(
  int _Ch,
  ffi.Pointer<ffi.Int32> _Stream,
);

typedef Native_rmtmp = ffi.Int32 Function();

typedef _dart_rmtmp = int Function();

typedef Native_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Buf,
  ffi.Int32 _Val,
  ffi.Uint64 _MaxCount,
);

typedef _dart_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Buf,
  int _Val,
  int _MaxCount,
);

typedef Native_memcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  ffi.Uint64 _Size,
);

typedef _dart_memcmp = int Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  int _Size,
);

typedef Native_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  ffi.Uint64 _Size,
);

typedef _dart_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  int _Size,
);

typedef Native_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  ffi.Uint64 _Size,
);

typedef _dart_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  int _Size,
);

typedef Native_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Int32 _Val,
  ffi.Uint64 _Size,
);

typedef _dart_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  int _Val,
  int _Size,
);

typedef Native_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Int32 _Val,
);

typedef _dart_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  int _Val,
);

typedef Native_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Int32 _Ch,
);

typedef _dart_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  int _Ch,
);

typedef Native_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _SubStr,
);

typedef _dart_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _SubStr,
);

typedef Native_wcschr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  ffi.Uint16 _Ch,
);

typedef _dart_wcschr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  int _Ch,
);

typedef Native_wcsrchr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  ffi.Uint16 _Ch,
);

typedef _dart_wcsrchr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  int _Ch,
);

typedef Native_wcsstr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  ffi.Pointer<ffi.Uint16> _SubStr,
);

typedef _dart_wcsstr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  ffi.Pointer<ffi.Uint16> _SubStr,
);

typedef Native__memicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  ffi.Uint64 _Size,
);

typedef _dart__memicmp = int Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  int _Size,
);

typedef Native__memicmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  ffi.Uint64 _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__memicmp_l = int Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  int _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  ffi.Int32 _Val,
  ffi.Uint64 _Size,
);

typedef _dart_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  int _Val,
  int _Size,
);

typedef Native_memicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  ffi.Uint64 _Size,
);

typedef _dart_memicmp = int Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  int _Size,
);

typedef Native_wcscat_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _dart_wcscat_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef Native_wcscpy_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _dart_wcscpy_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef Native_wcsncat_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsncat_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
);

typedef Native_wcsncpy_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsncpy_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
);

typedef Native_wcstok_s = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
);

typedef _dart_wcstok_s = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
);

typedef Native__wcsdup = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wcsdup = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef Native_wcscat = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _dart_wcscat = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef Native_wcscmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart_wcscmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef Native_wcscpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _dart_wcscpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef Native_wcscspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef _dart_wcscspn = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef Native_wcslen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart_wcslen = int Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef Native_wcsnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsnlen = int Function(
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
);

typedef Native_wcsncat = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _Count,
);

typedef _dart_wcsncat = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  int _Count,
);

typedef Native_wcsncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsncmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
);

typedef Native_wcsncpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _Count,
);

typedef _dart_wcsncpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  int _Count,
);

typedef Native_wcspbrk = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef _dart_wcspbrk = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef Native_wcsspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef _dart_wcsspn = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef Native_wcstok = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
);

typedef _dart_wcstok = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
);

typedef Native__wcserror = ffi.Pointer<ffi.Uint16> Function(
  ffi.Int32 _ErrorNumber,
);

typedef _dart__wcserror = ffi.Pointer<ffi.Uint16> Function(
  int _ErrorNumber,
);

typedef Native__wcserror_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Int32 _ErrorNumber,
);

typedef _dart__wcserror_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  int _ErrorNumber,
);

typedef Native___wcserror = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart___wcserror = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef Native___wcserror_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _ErrorMessage,
);

typedef _dart___wcserror_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _ErrorMessage,
);

typedef Native__wcsicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart__wcsicmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef Native__wcsicmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsicmp_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wcsnicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__wcsnicmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
);

typedef Native__wcsnicmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsnicmp_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wcsnset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Uint16 _Value,
  ffi.Uint64 _MaxCount,
);

typedef _dart__wcsnset_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  int _Value,
  int _MaxCount,
);

typedef Native__wcsnset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint16 _Value,
  ffi.Uint64 _MaxCount,
);

typedef _dart__wcsnset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Value,
  int _MaxCount,
);

typedef Native__wcsrev = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wcsrev = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef Native__wcsset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Uint16 _Value,
);

typedef _dart__wcsset_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  int _Value,
);

typedef Native__wcsset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint16 _Value,
);

typedef _dart__wcsset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Value,
);

typedef Native__wcslwr_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint64 _SizeInWords,
);

typedef _dart__wcslwr_s = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _SizeInWords,
);

typedef Native__wcslwr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wcslwr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef Native__wcslwr_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcslwr_s_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _SizeInWords,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wcslwr_l = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcslwr_l = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wcsupr_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint64 _Size,
);

typedef _dart__wcsupr_s = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Size,
);

typedef Native__wcsupr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wcsupr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef Native__wcsupr_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint64 _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsupr_s_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wcsupr_l = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsupr_l = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_wcsxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsxfrm = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
);

typedef Native__wcsxfrm_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsxfrm_l = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_wcscoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart_wcscoll = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef Native__wcscoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcscoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wcsicoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart__wcsicoll = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef Native__wcsicoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsicoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wcsncoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__wcsncoll = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
);

typedef Native__wcsncoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsncoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wcsnicoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__wcsnicoll = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
);

typedef Native__wcsnicoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsnicoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_wcsdup = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart_wcsdup = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef Native_wcsicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart_wcsicmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef Native_wcsnicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsnicmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
);

typedef Native_wcsnset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint16 _Value,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsnset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Value,
  int _MaxCount,
);

typedef Native_wcsrev = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart_wcsrev = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef Native_wcsset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint16 _Value,
);

typedef _dart_wcsset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Value,
);

typedef Native_wcslwr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart_wcslwr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef Native_wcsupr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart_wcsupr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef Native_wcsicoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart_wcsicoll = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef Native_strcpy_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _dart_strcpy_s = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef Native_strcat_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _dart_strcat_s = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef Native_strerror_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Int32 _ErrorNumber,
);

typedef _dart_strerror_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  int _ErrorNumber,
);

typedef Native_strncat_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strncat_s = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
);

typedef Native_strncpy_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strncpy_s = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
);

typedef Native_strtok_s = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Int8> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Context,
);

typedef _dart_strtok_s = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Int8> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Context,
);

typedef Native__memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  ffi.Int32 _Val,
  ffi.Uint64 _MaxCount,
);

typedef _dart__memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  int _Val,
  int _MaxCount,
);

typedef Native_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _dart_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef Native_strcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Str1,
  ffi.Pointer<ffi.Int8> _Str2,
);

typedef _dart_strcmp = int Function(
  ffi.Pointer<ffi.Int8> _Str1,
  ffi.Pointer<ffi.Int8> _Str2,
);

typedef Native__strcmpi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart__strcmpi = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef Native_strcoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart_strcoll = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef Native__strcoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strcoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _dart_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef Native_strcspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef _dart_strcspn = int Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef Native__strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _dart__strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Source,
);

typedef Native__strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _ErrorMessage,
);

typedef _dart__strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _ErrorMessage,
);

typedef Native__strerror_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _ErrorMessage,
);

typedef _dart__strerror_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _ErrorMessage,
);

typedef Native_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 _ErrorMessage,
);

typedef _dart_strerror = ffi.Pointer<ffi.Int8> Function(
  int _ErrorMessage,
);

typedef Native__stricmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart__stricmp = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef Native__stricoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart__stricoll = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef Native__stricoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__stricoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__stricmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__stricmp_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_strlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Str,
);

typedef _dart_strlen = int Function(
  ffi.Pointer<ffi.Int8> _Str,
);

typedef Native__strlwr_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _Size,
);

typedef _dart__strlwr_s = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Size,
);

typedef Native__strlwr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__strlwr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef Native__strlwr_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strlwr_s_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__strlwr_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strlwr_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _Count,
);

typedef _dart_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  int _Count,
);

typedef Native_strncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Str1,
  ffi.Pointer<ffi.Int8> _Str2,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strncmp = int Function(
  ffi.Pointer<ffi.Int8> _Str1,
  ffi.Pointer<ffi.Int8> _Str2,
  int _MaxCount,
);

typedef Native__strnicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__strnicmp = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
);

typedef Native__strnicmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strnicmp_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__strnicoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__strnicoll = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
);

typedef Native__strnicoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strnicoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__strncoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__strncoll = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
);

typedef Native__strncoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strncoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native___strncnt = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _Count,
);

typedef _dart___strncnt = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Count,
);

typedef Native_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _Count,
);

typedef _dart_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  int _Count,
);

typedef Native_strnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strnlen = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _MaxCount,
);

typedef Native__strnset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _SizeInBytes,
  ffi.Int32 _Value,
  ffi.Uint64 _MaxCount,
);

typedef _dart__strnset_s = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _SizeInBytes,
  int _Value,
  int _MaxCount,
);

typedef Native__strnset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Int32 _Value,
  ffi.Uint64 _Count,
);

typedef _dart__strnset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _Value,
  int _Count,
);

typedef Native_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef _dart_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef Native__strrev = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
);

typedef _dart__strrev = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
);

typedef Native__strset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Uint64 _DestinationSize,
  ffi.Int32 _Value,
);

typedef _dart__strset_s = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _DestinationSize,
  int _Value,
);

typedef Native__strset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Int32 _Value,
);

typedef _dart__strset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _Value,
);

typedef Native_strspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef _dart_strspn = int Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef Native_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Int8> _Delimiter,
);

typedef _dart_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Int8> _Delimiter,
);

typedef Native__strupr_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _Size,
);

typedef _dart__strupr_s = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Size,
);

typedef Native__strupr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__strupr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef Native__strupr_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strupr_s_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__strupr_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strupr_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_strxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strxfrm = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
);

typedef Native__strxfrm_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strxfrm_l = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef Native_strcmpi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart_strcmpi = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef Native_stricmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart_stricmp = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef Native_strlwr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_strlwr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef Native_strnicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strnicmp = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
);

typedef Native_strnset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Int32 _Value,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strnset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Value,
  int _MaxCount,
);

typedef Native_strrev = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_strrev = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef Native_strset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Int32 _Value,
);

typedef _dart_strset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Value,
);

typedef Native_strupr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_strupr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef Native__cputws = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
);

typedef _dart__cputws = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
);

typedef Native__getwch = ffi.Uint16 Function();

typedef _dart__getwch = int Function();

typedef Native__getwche = ffi.Uint16 Function();

typedef _dart__getwche = int Function();

typedef Native__putwch = ffi.Uint16 Function(
  ffi.Uint16 _Character,
);

typedef _dart__putwch = int Function(
  int _Character,
);

typedef Native__ungetwch = ffi.Uint16 Function(
  ffi.Uint16 _Character,
);

typedef _dart__ungetwch = int Function(
  int _Character,
);

typedef Native__getwch_nolock = ffi.Uint16 Function();

typedef _dart__getwch_nolock = int Function();

typedef Native__getwche_nolock = ffi.Uint16 Function();

typedef _dart__getwche_nolock = int Function();

typedef Native__putwch_nolock = ffi.Uint16 Function(
  ffi.Uint16 _Character,
);

typedef _dart__putwch_nolock = int Function(
  int _Character,
);

typedef Native__ungetwch_nolock = ffi.Uint16 Function(
  ffi.Uint16 _Character,
);

typedef _dart__ungetwch_nolock = int Function(
  int _Character,
);

typedef Native___conio_common_vcwprintf = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___conio_common_vcwprintf = int Function(
  int _Options,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___conio_common_vcwprintf_s = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___conio_common_vcwprintf_s = int Function(
  int _Options,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___conio_common_vcwprintf_p = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___conio_common_vcwprintf_p = int Function(
  int _Options,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___conio_common_vcwscanf = ffi.Int32 Function(
  ffi.Uint64 _Options,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef _dart___conio_common_vcwscanf = int Function(
  int _Options,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<__crt_locale_pointers> _Locale,
  ffi.Pointer<ffi.Int8> _ArgList,
);

typedef Native___pctype_func = ffi.Pointer<ffi.Uint16> Function();

typedef _dart___pctype_func = ffi.Pointer<ffi.Uint16> Function();

typedef Native___pwctype_func = ffi.Pointer<ffi.Uint16> Function();

typedef _dart___pwctype_func = ffi.Pointer<ffi.Uint16> Function();

typedef Native_iswalnum = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswalnum = int Function(
  int _C,
);

typedef Native_iswalpha = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswalpha = int Function(
  int _C,
);

typedef Native_iswascii = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswascii = int Function(
  int _C,
);

typedef Native_iswblank = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswblank = int Function(
  int _C,
);

typedef Native_iswcntrl = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswcntrl = int Function(
  int _C,
);

typedef Native_iswdigit = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswdigit = int Function(
  int _C,
);

typedef Native_iswgraph = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswgraph = int Function(
  int _C,
);

typedef Native_iswlower = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswlower = int Function(
  int _C,
);

typedef Native_iswprint = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswprint = int Function(
  int _C,
);

typedef Native_iswpunct = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswpunct = int Function(
  int _C,
);

typedef Native_iswspace = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswspace = int Function(
  int _C,
);

typedef Native_iswupper = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswupper = int Function(
  int _C,
);

typedef Native_iswxdigit = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswxdigit = int Function(
  int _C,
);

typedef Native___iswcsymf = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart___iswcsymf = int Function(
  int _C,
);

typedef Native___iswcsym = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart___iswcsym = int Function(
  int _C,
);

typedef Native__iswalnum_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswalnum_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__iswalpha_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswalpha_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__iswblank_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswblank_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__iswcntrl_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswcntrl_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__iswdigit_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswdigit_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__iswgraph_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswgraph_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__iswlower_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswlower_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__iswprint_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswprint_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__iswpunct_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswpunct_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__iswspace_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswspace_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__iswupper_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswupper_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__iswxdigit_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswxdigit_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__iswcsymf_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswcsymf_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__iswcsym_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswcsym_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_towupper = ffi.Uint16 Function(
  ffi.Uint16 _C,
);

typedef _dart_towupper = int Function(
  int _C,
);

typedef Native_towlower = ffi.Uint16 Function(
  ffi.Uint16 _C,
);

typedef _dart_towlower = int Function(
  int _C,
);

typedef Native_iswctype = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Uint16 _Type,
);

typedef _dart_iswctype = int Function(
  int _C,
  int _Type,
);

typedef Native__towupper_l = ffi.Uint16 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__towupper_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__towlower_l = ffi.Uint16 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__towlower_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__iswctype_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Uint16 _Type,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswctype_l = int Function(
  int _C,
  int _Type,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_isleadbyte = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isleadbyte = int Function(
  int _C,
);

typedef Native__isleadbyte_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isleadbyte_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_is_wctype = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Uint16 _Type,
);

typedef _dart_is_wctype = int Function(
  int _C,
  int _Type,
);

typedef Native__wgetcwd = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _DstBuf,
  ffi.Int32 _SizeInWords,
);

typedef _dart__wgetcwd = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _DstBuf,
  int _SizeInWords,
);

typedef Native__wgetdcwd = ffi.Pointer<ffi.Uint16> Function(
  ffi.Int32 _Drive,
  ffi.Pointer<ffi.Uint16> _DstBuf,
  ffi.Int32 _SizeInWords,
);

typedef _dart__wgetdcwd = ffi.Pointer<ffi.Uint16> Function(
  int _Drive,
  ffi.Pointer<ffi.Uint16> _DstBuf,
  int _SizeInWords,
);

typedef Native__wchdir = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Path,
);

typedef _dart__wchdir = int Function(
  ffi.Pointer<ffi.Uint16> _Path,
);

typedef Native__wmkdir = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Path,
);

typedef _dart__wmkdir = int Function(
  ffi.Pointer<ffi.Uint16> _Path,
);

typedef Native__wrmdir = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Path,
);

typedef _dart__wrmdir = int Function(
  ffi.Pointer<ffi.Uint16> _Path,
);

typedef Native__waccess = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Int32 _AccessMode,
);

typedef _dart__waccess = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  int _AccessMode,
);

typedef Native__waccess_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Int32 _AccessMode,
);

typedef _dart__waccess_s = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  int _AccessMode,
);

typedef Native__wchmod = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Int32 _Mode,
);

typedef _dart__wchmod = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  int _Mode,
);

typedef Native__wcreat = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Int32 _PermissionMode,
);

typedef _dart__wcreat = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  int _PermissionMode,
);

typedef Native__wfindfirst32 = ffi.IntPtr Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_wfinddata32_t> _FindData,
);

typedef _dart__wfindfirst32 = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_wfinddata32_t> _FindData,
);

typedef Native__wfindnext32 = ffi.Int32 Function(
  ffi.IntPtr _FindHandle,
  ffi.Pointer<_wfinddata32_t> _FindData,
);

typedef _dart__wfindnext32 = int Function(
  int _FindHandle,
  ffi.Pointer<_wfinddata32_t> _FindData,
);

typedef Native__wunlink = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _FileName,
);

typedef _dart__wunlink = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
);

typedef Native__wrename = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _OldFileName,
  ffi.Pointer<ffi.Uint16> _NewFileName,
);

typedef _dart__wrename = int Function(
  ffi.Pointer<ffi.Uint16> _OldFileName,
  ffi.Pointer<ffi.Uint16> _NewFileName,
);

typedef Native__wmktemp_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _TemplateName,
  ffi.Uint64 _SizeInWords,
);

typedef _dart__wmktemp_s = int Function(
  ffi.Pointer<ffi.Uint16> _TemplateName,
  int _SizeInWords,
);

typedef Native__wmktemp = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _TemplateName,
);

typedef _dart__wmktemp = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _TemplateName,
);

typedef Native__wfindfirst32i64 = ffi.IntPtr Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_wfinddata32i64_t> _FindData,
);

typedef _dart__wfindfirst32i64 = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_wfinddata32i64_t> _FindData,
);

typedef Native__wfindfirst64i32 = ffi.IntPtr Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_wfinddata64i32_t> _FindData,
);

typedef _dart__wfindfirst64i32 = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_wfinddata64i32_t> _FindData,
);

typedef Native__wfindfirst64 = ffi.IntPtr Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_wfinddata64_t> _FindData,
);

typedef _dart__wfindfirst64 = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_wfinddata64_t> _FindData,
);

typedef Native__wfindnext32i64 = ffi.Int32 Function(
  ffi.IntPtr _FindHandle,
  ffi.Pointer<_wfinddata32i64_t> _FindData,
);

typedef _dart__wfindnext32i64 = int Function(
  int _FindHandle,
  ffi.Pointer<_wfinddata32i64_t> _FindData,
);

typedef Native__wfindnext64i32 = ffi.Int32 Function(
  ffi.IntPtr _FindHandle,
  ffi.Pointer<_wfinddata64i32_t> _FindData,
);

typedef _dart__wfindnext64i32 = int Function(
  int _FindHandle,
  ffi.Pointer<_wfinddata64i32_t> _FindData,
);

typedef Native__wfindnext64 = ffi.Int32 Function(
  ffi.IntPtr _FindHandle,
  ffi.Pointer<_wfinddata64_t> _FindData,
);

typedef _dart__wfindnext64 = int Function(
  int _FindHandle,
  ffi.Pointer<_wfinddata64_t> _FindData,
);

typedef Native__wsopen_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _FileHandle,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Int32 _OpenFlag,
  ffi.Int32 _ShareFlag,
  ffi.Int32 _PermissionFlag,
);

typedef _dart__wsopen_s = int Function(
  ffi.Pointer<ffi.Int32> _FileHandle,
  ffi.Pointer<ffi.Uint16> _FileName,
  int _OpenFlag,
  int _ShareFlag,
  int _PermissionFlag,
);

typedef Native__wsopen_dispatch = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Int32 _OFlag,
  ffi.Int32 _ShFlag,
  ffi.Int32 _PMode,
  ffi.Pointer<ffi.Int32> _PFileHandle,
  ffi.Int32 _BSecure,
);

typedef _dart__wsopen_dispatch = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  int _OFlag,
  int _ShFlag,
  int _PMode,
  ffi.Pointer<ffi.Int32> _PFileHandle,
  int _BSecure,
);

typedef Native__wopen = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Int32 _OpenFlag,
);

typedef _dart__wopen = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  int _OpenFlag,
);

typedef Native__wsopen = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Int32 _OpenFlag,
  ffi.Int32 _ShareFlag,
);

typedef _dart__wsopen = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  int _OpenFlag,
  int _ShareFlag,
);

typedef Native__wexecl = ffi.IntPtr Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef _dart__wexecl = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef Native__wexecle = ffi.IntPtr Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef _dart__wexecle = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef Native__wexeclp = ffi.IntPtr Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef _dart__wexeclp = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef Native__wexeclpe = ffi.IntPtr Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef _dart__wexeclpe = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef Native__wexecv = ffi.IntPtr Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
);

typedef _dart__wexecv = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
);

typedef Native__wexecve = ffi.IntPtr Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Env,
);

typedef _dart__wexecve = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Env,
);

typedef Native__wexecvp = ffi.IntPtr Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
);

typedef _dart__wexecvp = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
);

typedef Native__wexecvpe = ffi.IntPtr Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Env,
);

typedef _dart__wexecvpe = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Env,
);

typedef Native__wspawnl = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef _dart__wspawnl = int Function(
  int _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef Native__wspawnle = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef _dart__wspawnle = int Function(
  int _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef Native__wspawnlp = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef _dart__wspawnlp = int Function(
  int _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef Native__wspawnlpe = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef _dart__wspawnlpe = int Function(
  int _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Uint16> _ArgList,
);

typedef Native__wspawnv = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
);

typedef _dart__wspawnv = int Function(
  int _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
);

typedef Native__wspawnve = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Env,
);

typedef _dart__wspawnve = int Function(
  int _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Env,
);

typedef Native__wspawnvp = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
);

typedef _dart__wspawnvp = int Function(
  int _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
);

typedef Native__wspawnvpe = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Env,
);

typedef _dart__wspawnvpe = int Function(
  int _Mode,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _ArgList,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Env,
);

typedef Native__wasctime = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart__wasctime = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<tm> _Tm,
);

typedef Native__wasctime_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<tm> _Tm,
);

typedef _dart__wasctime_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  ffi.Pointer<tm> _Tm,
);

typedef Native_wcsftime = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<tm> _Tm,
);

typedef _dart_wcsftime = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<tm> _Tm,
);

typedef Native__wcsftime_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsftime_l = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__wctime32 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__wctime32 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__wctime32_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__wctime32_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__wctime64 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__wctime64 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__wctime64_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__wctime64_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__wstrdate_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
);

typedef _dart__wstrdate_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
);

typedef Native__wstrdate = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
);

typedef _dart__wstrdate = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
);

typedef Native__wstrtime_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
);

typedef _dart__wstrtime_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
);

typedef Native__wstrtime = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
);

typedef _dart__wstrtime = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
);

typedef Native__fstat32 = ffi.Int32 Function(
  ffi.Int32 _FileHandle,
  ffi.Pointer<_stat32> _Stat,
);

typedef _dart__fstat32 = int Function(
  int _FileHandle,
  ffi.Pointer<_stat32> _Stat,
);

typedef Native__fstat32i64 = ffi.Int32 Function(
  ffi.Int32 _FileHandle,
  ffi.Pointer<_stat32i64> _Stat,
);

typedef _dart__fstat32i64 = int Function(
  int _FileHandle,
  ffi.Pointer<_stat32i64> _Stat,
);

typedef Native__fstat64i32 = ffi.Int32 Function(
  ffi.Int32 _FileHandle,
  ffi.Pointer<_stat64i32> _Stat,
);

typedef _dart__fstat64i32 = int Function(
  int _FileHandle,
  ffi.Pointer<_stat64i32> _Stat,
);

typedef Native__fstat64 = ffi.Int32 Function(
  ffi.Int32 _FileHandle,
  ffi.Pointer<_stat64> _Stat,
);

typedef _dart__fstat64 = int Function(
  int _FileHandle,
  ffi.Pointer<_stat64> _Stat,
);

typedef Native__stat32_1 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<_stat32> _Stat,
);

typedef _dart__stat32_1 = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<_stat32> _Stat,
);

typedef Native__stat32i64_1 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<_stat32i64> _Stat,
);

typedef _dart__stat32i64_1 = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<_stat32i64> _Stat,
);

typedef Native__stat64i32_1 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<_stat64i32> _Stat,
);

typedef _dart__stat64i32_1 = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<_stat64i32> _Stat,
);

typedef Native__stat64_1 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<_stat64> _Stat,
);

typedef _dart__stat64_1 = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<_stat64> _Stat,
);

typedef Native__wstat32 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_stat32> _Stat,
);

typedef _dart__wstat32 = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_stat32> _Stat,
);

typedef Native__wstat32i64 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_stat32i64> _Stat,
);

typedef _dart__wstat32i64 = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_stat32i64> _Stat,
);

typedef Native__wstat64i32 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_stat64i32> _Stat,
);

typedef _dart__wstat64i32 = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_stat64i32> _Stat,
);

typedef Native__wstat64 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_stat64> _Stat,
);

typedef _dart__wstat64 = int Function(
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Pointer<_stat64> _Stat,
);

typedef Native__wsetlocale = ffi.Pointer<ffi.Uint16> Function(
  ffi.Int32 _Category,
  ffi.Pointer<ffi.Uint16> _Locale,
);

typedef _dart__wsetlocale = ffi.Pointer<ffi.Uint16> Function(
  int _Category,
  ffi.Pointer<ffi.Uint16> _Locale,
);

typedef Native__wcreate_locale = ffi.Pointer<__crt_locale_pointers> Function(
  ffi.Int32 _Category,
  ffi.Pointer<ffi.Uint16> _Locale,
);

typedef _dart__wcreate_locale = ffi.Pointer<__crt_locale_pointers> Function(
  int _Category,
  ffi.Pointer<ffi.Uint16> _Locale,
);

typedef Native_btowc = ffi.Uint16 Function(
  ffi.Int32 _Ch,
);

typedef _dart_btowc = int Function(
  int _Ch,
);

typedef Native_mbrlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Ch,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<_Mbstatet> _State,
);

typedef _dart_mbrlen = int Function(
  ffi.Pointer<ffi.Int8> _Ch,
  int _SizeInBytes,
  ffi.Pointer<_Mbstatet> _State,
);

typedef Native_mbrtowc = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _DstCh,
  ffi.Pointer<ffi.Int8> _SrcCh,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<_Mbstatet> _State,
);

typedef _dart_mbrtowc = int Function(
  ffi.Pointer<ffi.Uint16> _DstCh,
  ffi.Pointer<ffi.Int8> _SrcCh,
  int _SizeInBytes,
  ffi.Pointer<_Mbstatet> _State,
);

typedef Native_mbsrtowcs_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _Retval,
  ffi.Pointer<ffi.Uint16> _Dst,
  ffi.Uint64 _Size,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _PSrc,
  ffi.Uint64 _N,
  ffi.Pointer<_Mbstatet> _State,
);

typedef _dart_mbsrtowcs_s = int Function(
  ffi.Pointer<ffi.Uint64> _Retval,
  ffi.Pointer<ffi.Uint16> _Dst,
  int _Size,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _PSrc,
  int _N,
  ffi.Pointer<_Mbstatet> _State,
);

typedef Native_mbsrtowcs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Dest,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _PSrc,
  ffi.Uint64 _Count,
  ffi.Pointer<_Mbstatet> _State,
);

typedef _dart_mbsrtowcs = int Function(
  ffi.Pointer<ffi.Uint16> _Dest,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _PSrc,
  int _Count,
  ffi.Pointer<_Mbstatet> _State,
);

typedef Native_wcrtomb_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _Retval,
  ffi.Pointer<ffi.Int8> _Dst,
  ffi.Uint64 _SizeInBytes,
  ffi.Uint16 _Ch,
  ffi.Pointer<_Mbstatet> _State,
);

typedef _dart_wcrtomb_s = int Function(
  ffi.Pointer<ffi.Uint64> _Retval,
  ffi.Pointer<ffi.Int8> _Dst,
  int _SizeInBytes,
  int _Ch,
  ffi.Pointer<_Mbstatet> _State,
);

typedef Native_wcrtomb = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Dest,
  ffi.Uint16 _Source,
  ffi.Pointer<_Mbstatet> _State,
);

typedef _dart_wcrtomb = int Function(
  ffi.Pointer<ffi.Int8> _Dest,
  int _Source,
  ffi.Pointer<_Mbstatet> _State,
);

typedef Native_wcsrtombs_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _Retval,
  ffi.Pointer<ffi.Int8> _Dst,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Src,
  ffi.Uint64 _Size,
  ffi.Pointer<_Mbstatet> _State,
);

typedef _dart_wcsrtombs_s = int Function(
  ffi.Pointer<ffi.Uint64> _Retval,
  ffi.Pointer<ffi.Int8> _Dst,
  int _SizeInBytes,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Src,
  int _Size,
  ffi.Pointer<_Mbstatet> _State,
);

typedef Native_wcsrtombs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Dest,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _PSource,
  ffi.Uint64 _Count,
  ffi.Pointer<_Mbstatet> _State,
);

typedef _dart_wcsrtombs = int Function(
  ffi.Pointer<ffi.Int8> _Dest,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _PSource,
  int _Count,
  ffi.Pointer<_Mbstatet> _State,
);

typedef Native_wctob = ffi.Int32 Function(
  ffi.Uint16 _WCh,
);

typedef _dart_wctob = int Function(
  int _WCh,
);

typedef Native_wmemcpy_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _S1,
  ffi.Uint64 _N1,
  ffi.Pointer<ffi.Uint16> _S2,
  ffi.Uint64 _N,
);

typedef _dart_wmemcpy_s = int Function(
  ffi.Pointer<ffi.Uint16> _S1,
  int _N1,
  ffi.Pointer<ffi.Uint16> _S2,
  int _N,
);

typedef Native_wmemmove_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _S1,
  ffi.Uint64 _N1,
  ffi.Pointer<ffi.Uint16> _S2,
  ffi.Uint64 _N,
);

typedef _dart_wmemmove_s = int Function(
  ffi.Pointer<ffi.Uint16> _S1,
  int _N1,
  ffi.Pointer<ffi.Uint16> _S2,
  int _N,
);

typedef Native___std_type_info_compare = ffi.Int32 Function(
  ffi.Pointer<__std_type_info_data> _Lhs,
  ffi.Pointer<__std_type_info_data> _Rhs,
);

typedef _dart___std_type_info_compare = int Function(
  ffi.Pointer<__std_type_info_data> _Lhs,
  ffi.Pointer<__std_type_info_data> _Rhs,
);

typedef Native___std_type_info_hash = ffi.Uint64 Function(
  ffi.Pointer<__std_type_info_data> _Data,
);

typedef _dart___std_type_info_hash = int Function(
  ffi.Pointer<__std_type_info_data> _Data,
);

typedef Native___std_type_info_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<__std_type_info_data> _Data,
  ffi.Pointer<ffi.Int32> _RootNode,
);

typedef _dart___std_type_info_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<__std_type_info_data> _Data,
  ffi.Pointer<ffi.Int32> _RootNode,
);

typedef Native__controlfp = ffi.Uint32 Function(
  ffi.Uint32 _NewValue,
  ffi.Uint32 _Mask,
);

typedef _dart__controlfp = int Function(
  int _NewValue,
  int _Mask,
);

typedef Native__set_controlfp = ffi.Void Function(
  ffi.Uint32 _NewValue,
  ffi.Uint32 _Mask,
);

typedef _dart__set_controlfp = void Function(
  int _NewValue,
  int _Mask,
);

typedef Native__controlfp_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> _CurrentState,
  ffi.Uint32 _NewValue,
  ffi.Uint32 _Mask,
);

typedef _dart__controlfp_s = int Function(
  ffi.Pointer<ffi.Uint32> _CurrentState,
  int _NewValue,
  int _Mask,
);

typedef Native__statusfp = ffi.Uint32 Function();

typedef _dart__statusfp = int Function();

typedef Native__fpreset = ffi.Void Function();

typedef _dart__fpreset = void Function();

typedef Native__control87 = ffi.Uint32 Function(
  ffi.Uint32 _NewValue,
  ffi.Uint32 _Mask,
);

typedef _dart__control87 = int Function(
  int _NewValue,
  int _Mask,
);

typedef Native___fpecode = ffi.Pointer<ffi.Int32> Function();

typedef _dart___fpecode = ffi.Pointer<ffi.Int32> Function();

typedef Native___fpe_flt_rounds = ffi.Int32 Function();

typedef _dart___fpe_flt_rounds = int Function();

typedef Native__scalb = ffi.Double Function(
  ffi.Double _X,
  ffi.Int64 _Y,
);

typedef _dart__scalb = double Function(
  double _X,
  int _Y,
);

typedef Native__logb = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart__logb = double Function(
  double _X,
);

typedef Native__nextafter = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart__nextafter = double Function(
  double _X,
  double _Y,
);

typedef Native__finite = ffi.Int32 Function(
  ffi.Double _X,
);

typedef _dart__finite = int Function(
  double _X,
);

typedef Native__isnan = ffi.Int32 Function(
  ffi.Double _X,
);

typedef _dart__isnan = int Function(
  double _X,
);

typedef Native__fpclass = ffi.Int32 Function(
  ffi.Double _X,
);

typedef _dart__fpclass = int Function(
  double _X,
);

typedef Native__scalbf = ffi.Float Function(
  ffi.Float _X,
  ffi.Int64 _Y,
);

typedef _dart__scalbf = double Function(
  double _X,
  int _Y,
);

typedef Native_fpreset = ffi.Void Function();

typedef _dart_fpreset = void Function();

typedef Native__BitScanForward = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint64> _Index,
  ffi.Uint64 _Mask,
);

typedef _dart__BitScanForward = int Function(
  ffi.Pointer<ffi.Uint64> _Index,
  int _Mask,
);

typedef Native__BitScanForward64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint64> _Index,
  ffi.Uint64 _Mask,
);

typedef _dart__BitScanForward64 = int Function(
  ffi.Pointer<ffi.Uint64> _Index,
  int _Mask,
);

typedef Native__BitScanReverse = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint64> _Index,
  ffi.Uint64 _Mask,
);

typedef _dart__BitScanReverse = int Function(
  ffi.Pointer<ffi.Uint64> _Index,
  int _Mask,
);

typedef Native__BitScanReverse64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint64> _Index,
  ffi.Uint64 _Mask,
);

typedef _dart__BitScanReverse64 = int Function(
  ffi.Pointer<ffi.Uint64> _Index,
  int _Mask,
);

typedef Native__bittest = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__bittest = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedAnd = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Value,
  ffi.Int64 _Mask,
);

typedef _dart__InterlockedAnd = int Function(
  ffi.Pointer<ffi.Int64> _Value,
  int _Mask,
);

typedef Native__InterlockedAnd16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Value,
  ffi.Int16 _Mask,
);

typedef _dart__InterlockedAnd16 = int Function(
  ffi.Pointer<ffi.Int16> _Value,
  int _Mask,
);

typedef Native__InterlockedAnd64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Value,
  ffi.Int64 _Mask,
);

typedef _dart__InterlockedAnd64 = int Function(
  ffi.Pointer<ffi.Int64> _Value,
  int _Mask,
);

typedef Native__InterlockedAnd8 = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> _Value,
  ffi.Int8 _Mask,
);

typedef _dart__InterlockedAnd8 = int Function(
  ffi.Pointer<ffi.Int8> _Value,
  int _Mask,
);

typedef Native__InterlockedCompareExchange = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Destination,
  ffi.Int64 _Exchange,
  ffi.Int64 _Comparand,
);

typedef _dart__InterlockedCompareExchange = int Function(
  ffi.Pointer<ffi.Int64> _Destination,
  int _Exchange,
  int _Comparand,
);

typedef Native__InterlockedCompareExchange16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Destination,
  ffi.Int16 _Exchange,
  ffi.Int16 _Comparand,
);

typedef _dart__InterlockedCompareExchange16 = int Function(
  ffi.Pointer<ffi.Int16> _Destination,
  int _Exchange,
  int _Comparand,
);

typedef Native__InterlockedCompareExchange64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Destination,
  ffi.Int64 _Exchange,
  ffi.Int64 _Comparand,
);

typedef _dart__InterlockedCompareExchange64 = int Function(
  ffi.Pointer<ffi.Int64> _Destination,
  int _Exchange,
  int _Comparand,
);

typedef Native__InterlockedCompareExchange8 = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Int8 _Exchange,
  ffi.Int8 _Comparand,
);

typedef _dart__InterlockedCompareExchange8 = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _Exchange,
  int _Comparand,
);

typedef Native__InterlockedCompareExchange128 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> _Destination,
  ffi.Int64 _ExchangeHigh,
  ffi.Int64 _ExchangeLow,
  ffi.Pointer<ffi.Int64> _ComparandResult,
);

typedef _dart__InterlockedCompareExchange128 = int Function(
  ffi.Pointer<ffi.Int64> _Destination,
  int _ExchangeHigh,
  int _ExchangeLow,
  ffi.Pointer<ffi.Int64> _ComparandResult,
);

typedef Native__InterlockedDecrement = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Addend,
);

typedef _dart__InterlockedDecrement = int Function(
  ffi.Pointer<ffi.Int64> _Addend,
);

typedef Native__InterlockedDecrement16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Addend,
);

typedef _dart__InterlockedDecrement16 = int Function(
  ffi.Pointer<ffi.Int16> _Addend,
);

typedef Native__InterlockedDecrement64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Addend,
);

typedef _dart__InterlockedDecrement64 = int Function(
  ffi.Pointer<ffi.Int64> _Addend,
);

typedef Native__InterlockedExchange = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Target,
  ffi.Int64 _Value,
);

typedef _dart__InterlockedExchange = int Function(
  ffi.Pointer<ffi.Int64> _Target,
  int _Value,
);

typedef Native__InterlockedExchange16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Target,
  ffi.Int16 _Value,
);

typedef _dart__InterlockedExchange16 = int Function(
  ffi.Pointer<ffi.Int16> _Target,
  int _Value,
);

typedef Native__InterlockedExchange64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Target,
  ffi.Int64 _Value,
);

typedef _dart__InterlockedExchange64 = int Function(
  ffi.Pointer<ffi.Int64> _Target,
  int _Value,
);

typedef Native__InterlockedExchange8 = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> _Target,
  ffi.Int8 _Value,
);

typedef _dart__InterlockedExchange8 = int Function(
  ffi.Pointer<ffi.Int8> _Target,
  int _Value,
);

typedef Native__InterlockedExchangeAdd = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Addend,
  ffi.Int64 _Value,
);

typedef _dart__InterlockedExchangeAdd = int Function(
  ffi.Pointer<ffi.Int64> _Addend,
  int _Value,
);

typedef Native__InterlockedExchangeAdd16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Addend,
  ffi.Int16 _Value,
);

typedef _dart__InterlockedExchangeAdd16 = int Function(
  ffi.Pointer<ffi.Int16> _Addend,
  int _Value,
);

typedef Native__InterlockedExchangeAdd64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Addend,
  ffi.Int64 _Value,
);

typedef _dart__InterlockedExchangeAdd64 = int Function(
  ffi.Pointer<ffi.Int64> _Addend,
  int _Value,
);

typedef Native__InterlockedExchangeAdd8 = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> _Addend,
  ffi.Int8 _Value,
);

typedef _dart__InterlockedExchangeAdd8 = int Function(
  ffi.Pointer<ffi.Int8> _Addend,
  int _Value,
);

typedef Native__InterlockedIncrement = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Addend,
);

typedef _dart__InterlockedIncrement = int Function(
  ffi.Pointer<ffi.Int64> _Addend,
);

typedef Native__InterlockedIncrement16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Addend,
);

typedef _dart__InterlockedIncrement16 = int Function(
  ffi.Pointer<ffi.Int16> _Addend,
);

typedef Native__InterlockedIncrement64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Addend,
);

typedef _dart__InterlockedIncrement64 = int Function(
  ffi.Pointer<ffi.Int64> _Addend,
);

typedef Native__InterlockedOr = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Value,
  ffi.Int64 _Mask,
);

typedef _dart__InterlockedOr = int Function(
  ffi.Pointer<ffi.Int64> _Value,
  int _Mask,
);

typedef Native__InterlockedOr16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Value,
  ffi.Int16 _Mask,
);

typedef _dart__InterlockedOr16 = int Function(
  ffi.Pointer<ffi.Int16> _Value,
  int _Mask,
);

typedef Native__InterlockedOr64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Value,
  ffi.Int64 _Mask,
);

typedef _dart__InterlockedOr64 = int Function(
  ffi.Pointer<ffi.Int64> _Value,
  int _Mask,
);

typedef Native__InterlockedOr8 = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> _Value,
  ffi.Int8 _Mask,
);

typedef _dart__InterlockedOr8 = int Function(
  ffi.Pointer<ffi.Int8> _Value,
  int _Mask,
);

typedef Native__InterlockedXor = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Value,
  ffi.Int64 _Mask,
);

typedef _dart__InterlockedXor = int Function(
  ffi.Pointer<ffi.Int64> _Value,
  int _Mask,
);

typedef Native__InterlockedXor16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Value,
  ffi.Int16 _Mask,
);

typedef _dart__InterlockedXor16 = int Function(
  ffi.Pointer<ffi.Int16> _Value,
  int _Mask,
);

typedef Native__InterlockedXor64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Value,
  ffi.Int64 _Mask,
);

typedef _dart__InterlockedXor64 = int Function(
  ffi.Pointer<ffi.Int64> _Value,
  int _Mask,
);

typedef Native__InterlockedXor8 = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> _Value,
  ffi.Int8 _Mask,
);

typedef _dart__InterlockedXor8 = int Function(
  ffi.Pointer<ffi.Int8> _Value,
  int _Mask,
);

typedef Native__ReadWriteBarrier = ffi.Void Function();

typedef _dart__ReadWriteBarrier = void Function();

typedef Native___iso_volatile_load16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> arg0,
);

typedef _dart___iso_volatile_load16 = int Function(
  ffi.Pointer<ffi.Int16> arg0,
);

typedef Native___iso_volatile_load32 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart___iso_volatile_load32 = int Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef Native___iso_volatile_load64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _dart___iso_volatile_load64 = int Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef Native___iso_volatile_load8 = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart___iso_volatile_load8 = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef Native___iso_volatile_store16 = ffi.Void Function(
  ffi.Pointer<ffi.Int16> arg0,
  ffi.Int16 arg1,
);

typedef _dart___iso_volatile_store16 = void Function(
  ffi.Pointer<ffi.Int16> arg0,
  int arg1,
);

typedef Native___iso_volatile_store32 = ffi.Void Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Int32 arg1,
);

typedef _dart___iso_volatile_store32 = void Function(
  ffi.Pointer<ffi.Int32> arg0,
  int arg1,
);

typedef Native___iso_volatile_store64 = ffi.Void Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart___iso_volatile_store64 = void Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native___iso_volatile_store8 = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int8 arg1,
);

typedef _dart___iso_volatile_store8 = void Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef Native__interlockedbittestandset = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__interlockedbittestandset = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native___lzcnt = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart___lzcnt = int Function(
  int arg0,
);

typedef Native___lzcnt16 = ffi.Uint16 Function(
  ffi.Uint16 arg0,
);

typedef _dart___lzcnt16 = int Function(
  int arg0,
);

typedef Native___lzcnt64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart___lzcnt64 = int Function(
  int arg0,
);

typedef Native___popcnt = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart___popcnt = int Function(
  int arg0,
);

typedef Native___popcnt16 = ffi.Uint16 Function(
  ffi.Uint16 arg0,
);

typedef _dart___popcnt16 = int Function(
  int arg0,
);

typedef Native___popcnt64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart___popcnt64 = int Function(
  int arg0,
);

typedef Native___shiftright128 = ffi.Uint64 Function(
  ffi.Uint64 _LowPart,
  ffi.Uint64 _HighPart,
  ffi.Uint8 _Shift,
);

typedef _dart___shiftright128 = int Function(
  int _LowPart,
  int _HighPart,
  int _Shift,
);

typedef Native__umul128 = ffi.Uint64 Function(
  ffi.Uint64 _Multiplier,
  ffi.Uint64 _Multiplicand,
  ffi.Pointer<ffi.Uint64> _HighProduct,
);

typedef _dart__umul128 = int Function(
  int _Multiplier,
  int _Multiplicand,
  ffi.Pointer<ffi.Uint64> _HighProduct,
);

typedef Native___ceil = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___ceil = double Function(
  double arg0,
);

typedef Native___ceilf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___ceilf = double Function(
  double arg0,
);

typedef Native___floor = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___floor = double Function(
  double arg0,
);

typedef Native___floorf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___floorf = double Function(
  double arg0,
);

typedef Native___round = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___round = double Function(
  double arg0,
);

typedef Native___roundf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___roundf = double Function(
  double arg0,
);

typedef Native___trunc = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___trunc = double Function(
  double arg0,
);

typedef Native___truncf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___truncf = double Function(
  double arg0,
);

typedef Native___copysign = ffi.Double Function(
  ffi.Double arg0,
  ffi.Double arg1,
);

typedef _dart___copysign = double Function(
  double arg0,
  double arg1,
);

typedef Native___copysignf = ffi.Float Function(
  ffi.Float arg0,
  ffi.Float arg1,
);

typedef _dart___copysignf = double Function(
  double arg0,
  double arg1,
);

typedef Native___signbitvalue = ffi.Uint32 Function(
  ffi.Double arg0,
);

typedef _dart___signbitvalue = int Function(
  double arg0,
);

typedef Native___signbitvaluef = ffi.Uint32 Function(
  ffi.Float arg0,
);

typedef _dart___signbitvaluef = int Function(
  double arg0,
);

typedef Native__isctype_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Int32 _Type,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isctype_l = int Function(
  int _C,
  int _Type,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_isalpha = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isalpha = int Function(
  int _C,
);

typedef Native__isalpha_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isalpha_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_isupper = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isupper = int Function(
  int _C,
);

typedef Native__isupper_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isupper_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_islower = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_islower = int Function(
  int _C,
);

typedef Native__islower_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__islower_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_isdigit = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isdigit = int Function(
  int _C,
);

typedef Native__isdigit_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isdigit_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_isxdigit = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isxdigit = int Function(
  int _C,
);

typedef Native__isxdigit_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isxdigit_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_isspace = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isspace = int Function(
  int _C,
);

typedef Native__isspace_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isspace_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_ispunct = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_ispunct = int Function(
  int _C,
);

typedef Native__ispunct_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__ispunct_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_isblank = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isblank = int Function(
  int _C,
);

typedef Native__isblank_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isblank_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_isalnum = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isalnum = int Function(
  int _C,
);

typedef Native__isalnum_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isalnum_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_isprint = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isprint = int Function(
  int _C,
);

typedef Native__isprint_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isprint_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_isgraph = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isgraph = int Function(
  int _C,
);

typedef Native__isgraph_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isgraph_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_iscntrl = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_iscntrl = int Function(
  int _C,
);

typedef Native__iscntrl_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iscntrl_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native_toupper = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_toupper = int Function(
  int _C,
);

typedef Native_tolower = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_tolower = int Function(
  int _C,
);

typedef Native__tolower = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart__tolower = int Function(
  int _C,
);

typedef Native__tolower_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__tolower_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__toupper = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart__toupper = int Function(
  int _C,
);

typedef Native__toupper_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__toupper_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native___isascii = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart___isascii = int Function(
  int _C,
);

typedef Native___toascii = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart___toascii = int Function(
  int _C,
);

typedef Native___iscsymf = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart___iscsymf = int Function(
  int _C,
);

typedef Native___iscsym = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart___iscsym = int Function(
  int _C,
);

typedef Native_Cronet_Buffer_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_Buffer> self,
);

typedef _dart_Cronet_Buffer_Destroy = int Function(
  ffi.Pointer<Cronet_Buffer> self,
);

typedef Native_Cronet_Buffer_SetClientContext = ffi.Int32 Function(
  ffi.Pointer<Cronet_Buffer> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_Buffer_SetClientContext = int Function(
  ffi.Pointer<Cronet_Buffer> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef Native_Cronet_Buffer_InitWithDataAndCallback = ffi.Int32 Function(
  ffi.Pointer<Cronet_Buffer> self,
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 size,
  ffi.Pointer<Cronet_BufferCallback> callback,
);

typedef _dart_Cronet_Buffer_InitWithDataAndCallback = int Function(
  ffi.Pointer<Cronet_Buffer> self,
  ffi.Pointer<ffi.Void> data,
  int size,
  ffi.Pointer<Cronet_BufferCallback> callback,
);

typedef Native_Cronet_Buffer_InitWithAlloc = ffi.Int32 Function(
  ffi.Pointer<Cronet_Buffer> self,
  ffi.Uint64 size,
);

typedef _dart_Cronet_Buffer_InitWithAlloc = int Function(
  ffi.Pointer<Cronet_Buffer> self,
  int size,
);

typedef Native_Cronet_BufferCallback_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_BufferCallback> self,
);

typedef _dart_Cronet_BufferCallback_Destroy = int Function(
  ffi.Pointer<Cronet_BufferCallback> self,
);

typedef Native_Cronet_BufferCallback_SetClientContext = ffi.Int32 Function(
  ffi.Pointer<Cronet_BufferCallback> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_BufferCallback_SetClientContext = int Function(
  ffi.Pointer<Cronet_BufferCallback> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef Native_Cronet_BufferCallback_OnDestroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_BufferCallback> self,
  ffi.Pointer<Cronet_Buffer> buffer,
);

typedef _dart_Cronet_BufferCallback_OnDestroy = int Function(
  ffi.Pointer<Cronet_BufferCallback> self,
  ffi.Pointer<Cronet_Buffer> buffer,
);

typedef Native_Cronet_Runnable_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_Runnable> self,
);

typedef _dart_Cronet_Runnable_Destroy = int Function(
  ffi.Pointer<Cronet_Runnable> self,
);

typedef Native_Cronet_Runnable_SetClientContext = ffi.Int32 Function(
  ffi.Pointer<Cronet_Runnable> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_Runnable_SetClientContext = int Function(
  ffi.Pointer<Cronet_Runnable> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef Native_Cronet_Runnable_Run = ffi.Int32 Function(
  ffi.Pointer<Cronet_Runnable> self,
);

typedef _dart_Cronet_Runnable_Run = int Function(
  ffi.Pointer<Cronet_Runnable> self,
);

typedef Native_Cronet_Executor_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_Executor> self,
);

typedef _dart_Cronet_Executor_Destroy = int Function(
  ffi.Pointer<Cronet_Executor> self,
);

typedef Native_Cronet_Executor_SetClientContext = ffi.Int32 Function(
  ffi.Pointer<Cronet_Executor> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_Executor_SetClientContext = int Function(
  ffi.Pointer<Cronet_Executor> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef Native_Cronet_Executor_Execute = ffi.Int32 Function(
  ffi.Pointer<Cronet_Executor> self,
  ffi.Pointer<Cronet_Runnable> command,
);

typedef _dart_Cronet_Executor_Execute = int Function(
  ffi.Pointer<Cronet_Executor> self,
  ffi.Pointer<Cronet_Runnable> command,
);

typedef Native_Cronet_Engine_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef _dart_Cronet_Engine_Destroy = int Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef Native_Cronet_Engine_SetClientContext = ffi.Int32 Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_Engine_SetClientContext = int Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef Native_Cronet_Engine_StopNetLog = ffi.Int32 Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef _dart_Cronet_Engine_StopNetLog = int Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef Native_Cronet_Engine_AddRequestFinishedListener = ffi.Int32 Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<Cronet_RequestFinishedInfoListener> listener,
  ffi.Pointer<Cronet_Executor> executor,
);

typedef _dart_Cronet_Engine_AddRequestFinishedListener = int Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<Cronet_RequestFinishedInfoListener> listener,
  ffi.Pointer<Cronet_Executor> executor,
);

typedef Native_Cronet_Engine_RemoveRequestFinishedListener = ffi.Int32 Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<Cronet_RequestFinishedInfoListener> listener,
);

typedef _dart_Cronet_Engine_RemoveRequestFinishedListener = int Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<Cronet_RequestFinishedInfoListener> listener,
);

typedef Native_Cronet_UrlRequestStatusListener_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestStatusListener> self,
);

typedef _dart_Cronet_UrlRequestStatusListener_Destroy = int Function(
  ffi.Pointer<Cronet_UrlRequestStatusListener> self,
);

typedef Native_Cronet_UrlRequestStatusListener_SetClientContext = ffi.Int32
    Function(
  ffi.Pointer<Cronet_UrlRequestStatusListener> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_UrlRequestStatusListener_SetClientContext = int Function(
  ffi.Pointer<Cronet_UrlRequestStatusListener> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef Native_Cronet_UrlRequestStatusListener_OnStatus = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestStatusListener> self,
  ffi.Int32 status,
);

typedef _dart_Cronet_UrlRequestStatusListener_OnStatus = int Function(
  ffi.Pointer<Cronet_UrlRequestStatusListener> self,
  int status,
);

typedef Native_Cronet_UrlRequestCallback_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
);

typedef _dart_Cronet_UrlRequestCallback_Destroy = int Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
);

typedef Native_Cronet_UrlRequestCallback_SetClientContext = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_UrlRequestCallback_SetClientContext = int Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef Native_Cronet_UrlRequestCallback_OnRedirectReceived = ffi.Int32
    Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
  ffi.Pointer<ffi.Int8> new_location_url,
);

typedef _dart_Cronet_UrlRequestCallback_OnRedirectReceived = int Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
  ffi.Pointer<ffi.Int8> new_location_url,
);

typedef Native_Cronet_UrlRequestCallback_OnResponseStarted = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
);

typedef _dart_Cronet_UrlRequestCallback_OnResponseStarted = int Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
);

typedef Native_Cronet_UrlRequestCallback_OnReadCompleted = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
  ffi.Pointer<Cronet_Buffer> buffer,
  ffi.Uint64 bytes_read,
);

typedef _dart_Cronet_UrlRequestCallback_OnReadCompleted = int Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
  ffi.Pointer<Cronet_Buffer> buffer,
  int bytes_read,
);

typedef Native_Cronet_UrlRequestCallback_OnSucceeded = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
);

typedef _dart_Cronet_UrlRequestCallback_OnSucceeded = int Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
);

typedef Native_Cronet_UrlRequestCallback_OnFailed = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
  ffi.Pointer<Cronet_Error> error,
);

typedef _dart_Cronet_UrlRequestCallback_OnFailed = int Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
  ffi.Pointer<Cronet_Error> error,
);

typedef Native_Cronet_UrlRequestCallback_OnCanceled = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
);

typedef _dart_Cronet_UrlRequestCallback_OnCanceled = int Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
);

typedef Native_Cronet_UploadDataSink_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
);

typedef _dart_Cronet_UploadDataSink_Destroy = int Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
);

typedef Native_Cronet_UploadDataSink_SetClientContext = ffi.Int32 Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_UploadDataSink_SetClientContext = int Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef Native_Cronet_UploadDataSink_OnReadSucceeded = ffi.Int32 Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  ffi.Uint64 bytes_read,
  ffi.Int32 final_chunk,
);

typedef _dart_Cronet_UploadDataSink_OnReadSucceeded = int Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  int bytes_read,
  int final_chunk,
);

typedef Native_Cronet_UploadDataSink_OnReadError = ffi.Int32 Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  ffi.Pointer<ffi.Int8> error_message,
);

typedef _dart_Cronet_UploadDataSink_OnReadError = int Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  ffi.Pointer<ffi.Int8> error_message,
);

typedef Native_Cronet_UploadDataSink_OnRewindSucceeded = ffi.Int32 Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
);

typedef _dart_Cronet_UploadDataSink_OnRewindSucceeded = int Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
);

typedef Native_Cronet_UploadDataSink_OnRewindError = ffi.Int32 Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  ffi.Pointer<ffi.Int8> error_message,
);

typedef _dart_Cronet_UploadDataSink_OnRewindError = int Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  ffi.Pointer<ffi.Int8> error_message,
);

typedef Native_Cronet_UploadDataProvider_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
);

typedef _dart_Cronet_UploadDataProvider_Destroy = int Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
);

typedef Native_Cronet_UploadDataProvider_SetClientContext = ffi.Int32 Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_UploadDataProvider_SetClientContext = int Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef Native_Cronet_UploadDataProvider_Read = ffi.Int32 Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
  ffi.Pointer<Cronet_UploadDataSink> upload_data_sink,
  ffi.Pointer<Cronet_Buffer> buffer,
);

typedef _dart_Cronet_UploadDataProvider_Read = int Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
  ffi.Pointer<Cronet_UploadDataSink> upload_data_sink,
  ffi.Pointer<Cronet_Buffer> buffer,
);

typedef Native_Cronet_UploadDataProvider_Rewind = ffi.Int32 Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
  ffi.Pointer<Cronet_UploadDataSink> upload_data_sink,
);

typedef _dart_Cronet_UploadDataProvider_Rewind = int Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
  ffi.Pointer<Cronet_UploadDataSink> upload_data_sink,
);

typedef Native_Cronet_UploadDataProvider_Close = ffi.Int32 Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
);

typedef _dart_Cronet_UploadDataProvider_Close = int Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
);

typedef Native_Cronet_UrlRequest_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef _dart_Cronet_UrlRequest_Destroy = int Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef Native_Cronet_UrlRequest_SetClientContext = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequest> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_UrlRequest_SetClientContext = int Function(
  ffi.Pointer<Cronet_UrlRequest> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef Native_Cronet_UrlRequest_Cancel = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef _dart_Cronet_UrlRequest_Cancel = int Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef Native_Cronet_UrlRequest_GetStatus = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequest> self,
  ffi.Pointer<Cronet_UrlRequestStatusListener> listener,
);

typedef _dart_Cronet_UrlRequest_GetStatus = int Function(
  ffi.Pointer<Cronet_UrlRequest> self,
  ffi.Pointer<Cronet_UrlRequestStatusListener> listener,
);

typedef Native_Cronet_RequestFinishedInfoListener_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
);

typedef _dart_Cronet_RequestFinishedInfoListener_Destroy = int Function(
  ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
);

typedef Native_Cronet_RequestFinishedInfoListener_SetClientContext = ffi.Int32
    Function(
  ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_RequestFinishedInfoListener_SetClientContext = int
    Function(
  ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef Native_Cronet_RequestFinishedInfoListener_OnRequestFinished = ffi.Int32
    Function(
  ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
  ffi.Pointer<Cronet_RequestFinishedInfo> request_info,
  ffi.Pointer<Cronet_UrlResponseInfo> response_info,
  ffi.Pointer<Cronet_Error> error,
);

typedef _dart_Cronet_RequestFinishedInfoListener_OnRequestFinished = int
    Function(
  ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
  ffi.Pointer<Cronet_RequestFinishedInfo> request_info,
  ffi.Pointer<Cronet_UrlResponseInfo> response_info,
  ffi.Pointer<Cronet_Error> error,
);

typedef Native_Cronet_Error_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_Error> self,
);

typedef _dart_Cronet_Error_Destroy = int Function(
  ffi.Pointer<Cronet_Error> self,
);

typedef Native_Cronet_Error_error_code_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Error> self,
  ffi.Int32 error_code,
);

typedef _dart_Cronet_Error_error_code_set = int Function(
  ffi.Pointer<Cronet_Error> self,
  int error_code,
);

typedef Native_Cronet_Error_message_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Error> self,
  ffi.Pointer<ffi.Int8> message,
);

typedef _dart_Cronet_Error_message_set = int Function(
  ffi.Pointer<Cronet_Error> self,
  ffi.Pointer<ffi.Int8> message,
);

typedef Native_Cronet_Error_internal_error_code_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Error> self,
  ffi.Int32 internal_error_code,
);

typedef _dart_Cronet_Error_internal_error_code_set = int Function(
  ffi.Pointer<Cronet_Error> self,
  int internal_error_code,
);

typedef bool1 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
);

typedef Native_Cronet_Error_immediately_retryable_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Error> self,
  ffi.Pointer<ffi.NativeFunction<bool1>> immediately_retryable,
);

typedef _dart_Cronet_Error_immediately_retryable_set = int Function(
  ffi.Pointer<Cronet_Error> self,
  ffi.Pointer<ffi.NativeFunction<bool1>> immediately_retryable,
);

typedef Native_Cronet_Error_quic_detailed_error_code_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Error> self,
  ffi.Int32 quic_detailed_error_code,
);

typedef _dart_Cronet_Error_quic_detailed_error_code_set = int Function(
  ffi.Pointer<Cronet_Error> self,
  int quic_detailed_error_code,
);

typedef Native_Cronet_QuicHint_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_QuicHint> self,
);

typedef _dart_Cronet_QuicHint_Destroy = int Function(
  ffi.Pointer<Cronet_QuicHint> self,
);

typedef Native_Cronet_QuicHint_host_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_QuicHint> self,
  ffi.Pointer<ffi.Int8> host,
);

typedef _dart_Cronet_QuicHint_host_set = int Function(
  ffi.Pointer<Cronet_QuicHint> self,
  ffi.Pointer<ffi.Int8> host,
);

typedef Native_Cronet_QuicHint_port_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_QuicHint> self,
  ffi.Int32 port,
);

typedef _dart_Cronet_QuicHint_port_set = int Function(
  ffi.Pointer<Cronet_QuicHint> self,
  int port,
);

typedef Native_Cronet_QuicHint_alternate_port_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_QuicHint> self,
  ffi.Int32 alternate_port,
);

typedef _dart_Cronet_QuicHint_alternate_port_set = int Function(
  ffi.Pointer<Cronet_QuicHint> self,
  int alternate_port,
);

typedef Native_Cronet_PublicKeyPins_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef _dart_Cronet_PublicKeyPins_Destroy = int Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef Native_Cronet_PublicKeyPins_host_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  ffi.Pointer<ffi.Int8> host,
);

typedef _dart_Cronet_PublicKeyPins_host_set = int Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  ffi.Pointer<ffi.Int8> host,
);

typedef Native_Cronet_PublicKeyPins_pins_sha256_add = ffi.Int32 Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  ffi.Pointer<ffi.Int8> element,
);

typedef _dart_Cronet_PublicKeyPins_pins_sha256_add = int Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  ffi.Pointer<ffi.Int8> element,
);

typedef Native_Cronet_PublicKeyPins_include_subdomains_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  ffi.Int32 include_subdomains,
);

typedef _dart_Cronet_PublicKeyPins_include_subdomains_set = int Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  int include_subdomains,
);

typedef Native_Cronet_PublicKeyPins_expiration_date_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  ffi.Int64 expiration_date,
);

typedef _dart_Cronet_PublicKeyPins_expiration_date_set = int Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  int expiration_date,
);

typedef Native_Cronet_PublicKeyPins_pins_sha256_clear = ffi.Int32 Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef _dart_Cronet_PublicKeyPins_pins_sha256_clear = int Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef Native_Cronet_EngineParams_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_Destroy = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef Native_Cronet_EngineParams_enable_check_result_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Int32 enable_check_result,
);

typedef _dart_Cronet_EngineParams_enable_check_result_set = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int enable_check_result,
);

typedef Native_Cronet_EngineParams_user_agent_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> user_agent,
);

typedef _dart_Cronet_EngineParams_user_agent_set = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> user_agent,
);

typedef Native_Cronet_EngineParams_accept_language_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> accept_language,
);

typedef _dart_Cronet_EngineParams_accept_language_set = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> accept_language,
);

typedef Native_Cronet_EngineParams_storage_path_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> storage_path,
);

typedef _dart_Cronet_EngineParams_storage_path_set = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> storage_path,
);

typedef Native_Cronet_EngineParams_enable_quic_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Int32 enable_quic,
);

typedef _dart_Cronet_EngineParams_enable_quic_set = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int enable_quic,
);

typedef Native_Cronet_EngineParams_enable_http2_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Int32 enable_http2,
);

typedef _dart_Cronet_EngineParams_enable_http2_set = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int enable_http2,
);

typedef Native_Cronet_EngineParams_enable_brotli_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Int32 enable_brotli,
);

typedef _dart_Cronet_EngineParams_enable_brotli_set = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int enable_brotli,
);

typedef Native_Cronet_EngineParams_http_cache_mode_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Int32 http_cache_mode,
);

typedef _dart_Cronet_EngineParams_http_cache_mode_set = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int http_cache_mode,
);

typedef Native_Cronet_EngineParams_http_cache_max_size_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Int64 http_cache_max_size,
);

typedef _dart_Cronet_EngineParams_http_cache_max_size_set = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int http_cache_max_size,
);

typedef Native_Cronet_EngineParams_quic_hints_add = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<Cronet_QuicHint> element,
);

typedef _dart_Cronet_EngineParams_quic_hints_add = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<Cronet_QuicHint> element,
);

typedef Native_Cronet_EngineParams_public_key_pins_add = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<Cronet_PublicKeyPins> element,
);

typedef _dart_Cronet_EngineParams_public_key_pins_add = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<Cronet_PublicKeyPins> element,
);

typedef Native_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set
    = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Int32 enable_public_key_pinning_bypass_for_local_trust_anchors,
);

typedef _dart_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set
    = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int enable_public_key_pinning_bypass_for_local_trust_anchors,
);

typedef Native_Cronet_EngineParams_network_thread_priority_set = ffi.Int32
    Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Double network_thread_priority,
);

typedef _dart_Cronet_EngineParams_network_thread_priority_set = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
  double network_thread_priority,
);

typedef Native_Cronet_EngineParams_experimental_options_set = ffi.Int32
    Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> experimental_options,
);

typedef _dart_Cronet_EngineParams_experimental_options_set = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> experimental_options,
);

typedef Native_Cronet_EngineParams_quic_hints_clear = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_quic_hints_clear = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef Native_Cronet_EngineParams_public_key_pins_clear = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_public_key_pins_clear = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef Native_Cronet_EngineParams_network_thread_priority_get = ffi.Int32
    Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_network_thread_priority_get = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef Native_Cronet_HttpHeader_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_HttpHeader> self,
);

typedef _dart_Cronet_HttpHeader_Destroy = int Function(
  ffi.Pointer<Cronet_HttpHeader> self,
);

typedef Native_Cronet_HttpHeader_name_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_HttpHeader> self,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_Cronet_HttpHeader_name_set = int Function(
  ffi.Pointer<Cronet_HttpHeader> self,
  ffi.Pointer<ffi.Int8> name,
);

typedef Native_Cronet_HttpHeader_value_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_HttpHeader> self,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_Cronet_HttpHeader_value_set = int Function(
  ffi.Pointer<Cronet_HttpHeader> self,
  ffi.Pointer<ffi.Int8> value,
);

typedef Native_Cronet_UrlResponseInfo_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _dart_Cronet_UrlResponseInfo_Destroy = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef Native_Cronet_UrlResponseInfo_url_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> url,
);

typedef _dart_Cronet_UrlResponseInfo_url_set = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> url,
);

typedef Native_Cronet_UrlResponseInfo_url_chain_add = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> element,
);

typedef _dart_Cronet_UrlResponseInfo_url_chain_add = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> element,
);

typedef Native_Cronet_UrlResponseInfo_http_status_code_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Int32 http_status_code,
);

typedef _dart_Cronet_UrlResponseInfo_http_status_code_set = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  int http_status_code,
);

typedef Native_Cronet_UrlResponseInfo_http_status_text_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> http_status_text,
);

typedef _dart_Cronet_UrlResponseInfo_http_status_text_set = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> http_status_text,
);

typedef Native_Cronet_UrlResponseInfo_all_headers_list_add = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<Cronet_HttpHeader> element,
);

typedef _dart_Cronet_UrlResponseInfo_all_headers_list_add = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<Cronet_HttpHeader> element,
);

typedef Native_Cronet_UrlResponseInfo_was_cached_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Int32 was_cached,
);

typedef _dart_Cronet_UrlResponseInfo_was_cached_set = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  int was_cached,
);

typedef Native_Cronet_UrlResponseInfo_negotiated_protocol_set = ffi.Int32
    Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> negotiated_protocol,
);

typedef _dart_Cronet_UrlResponseInfo_negotiated_protocol_set = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> negotiated_protocol,
);

typedef Native_Cronet_UrlResponseInfo_proxy_server_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> proxy_server,
);

typedef _dart_Cronet_UrlResponseInfo_proxy_server_set = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> proxy_server,
);

typedef Native_Cronet_UrlResponseInfo_received_byte_count_set = ffi.Int32
    Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Int64 received_byte_count,
);

typedef _dart_Cronet_UrlResponseInfo_received_byte_count_set = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  int received_byte_count,
);

typedef Native_Cronet_UrlResponseInfo_url_chain_clear = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _dart_Cronet_UrlResponseInfo_url_chain_clear = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef Native_Cronet_UrlResponseInfo_all_headers_list_clear = ffi.Int32
    Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _dart_Cronet_UrlResponseInfo_all_headers_list_clear = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef Native_Cronet_UrlRequestParams_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_Destroy = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef Native_Cronet_UrlRequestParams_http_method_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<ffi.Int8> http_method,
);

typedef _dart_Cronet_UrlRequestParams_http_method_set = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<ffi.Int8> http_method,
);

typedef Native_Cronet_UrlRequestParams_request_headers_add = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_HttpHeader> element,
);

typedef _dart_Cronet_UrlRequestParams_request_headers_add = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_HttpHeader> element,
);

typedef Native_Cronet_UrlRequestParams_disable_cache_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Int32 disable_cache,
);

typedef _dart_Cronet_UrlRequestParams_disable_cache_set = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  int disable_cache,
);

typedef Native_Cronet_UrlRequestParams_priority_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Int32 priority,
);

typedef _dart_Cronet_UrlRequestParams_priority_set = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  int priority,
);

typedef Native_Cronet_UrlRequestParams_upload_data_provider_set = ffi.Int32
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_UploadDataProvider> upload_data_provider,
);

typedef _dart_Cronet_UrlRequestParams_upload_data_provider_set = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_UploadDataProvider> upload_data_provider,
);

typedef Native_Cronet_UrlRequestParams_upload_data_provider_executor_set
    = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_Executor> upload_data_provider_executor,
);

typedef _dart_Cronet_UrlRequestParams_upload_data_provider_executor_set = int
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_Executor> upload_data_provider_executor,
);

typedef Native_Cronet_UrlRequestParams_allow_direct_executor_set = ffi.Int32
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Int32 allow_direct_executor,
);

typedef _dart_Cronet_UrlRequestParams_allow_direct_executor_set = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  int allow_direct_executor,
);

typedef Native_Cronet_UrlRequestParams_annotations_add = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<ffi.Void> element,
);

typedef _dart_Cronet_UrlRequestParams_annotations_add = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<ffi.Void> element,
);

typedef Native_Cronet_UrlRequestParams_request_finished_listener_set = ffi.Int32
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_RequestFinishedInfoListener> request_finished_listener,
);

typedef _dart_Cronet_UrlRequestParams_request_finished_listener_set = int
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_RequestFinishedInfoListener> request_finished_listener,
);

typedef Native_Cronet_UrlRequestParams_request_finished_executor_set = ffi.Int32
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_Executor> request_finished_executor,
);

typedef _dart_Cronet_UrlRequestParams_request_finished_executor_set = int
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_Executor> request_finished_executor,
);

typedef Native_Cronet_UrlRequestParams_idempotency_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Int32 idempotency,
);

typedef _dart_Cronet_UrlRequestParams_idempotency_set = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  int idempotency,
);

typedef Native_Cronet_UrlRequestParams_request_headers_clear = ffi.Int32
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_request_headers_clear = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef Native_Cronet_UrlRequestParams_annotations_clear = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_annotations_clear = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef Native_Cronet_DateTime_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_DateTime> self,
);

typedef _dart_Cronet_DateTime_Destroy = int Function(
  ffi.Pointer<Cronet_DateTime> self,
);

typedef Native_Cronet_DateTime_value_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_DateTime> self,
  ffi.Int64 value,
);

typedef _dart_Cronet_DateTime_value_set = int Function(
  ffi.Pointer<Cronet_DateTime> self,
  int value,
);

typedef Native_Cronet_Metrics_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_Destroy = int Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef Native_Cronet_Metrics_request_start_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_start,
);

typedef _dart_Cronet_Metrics_request_start_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_start,
);

typedef Native_Cronet_Metrics_request_start_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_start,
);

typedef _dart_Cronet_Metrics_request_start_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_start,
);

typedef Native_Cronet_Metrics_dns_start_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_start,
);

typedef _dart_Cronet_Metrics_dns_start_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_start,
);

typedef Native_Cronet_Metrics_dns_start_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_start,
);

typedef _dart_Cronet_Metrics_dns_start_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_start,
);

typedef Native_Cronet_Metrics_dns_end_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_end,
);

typedef _dart_Cronet_Metrics_dns_end_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_end,
);

typedef Native_Cronet_Metrics_dns_end_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_end,
);

typedef _dart_Cronet_Metrics_dns_end_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_end,
);

typedef Native_Cronet_Metrics_connect_start_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_start,
);

typedef _dart_Cronet_Metrics_connect_start_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_start,
);

typedef Native_Cronet_Metrics_connect_start_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_start,
);

typedef _dart_Cronet_Metrics_connect_start_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_start,
);

typedef Native_Cronet_Metrics_connect_end_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_end,
);

typedef _dart_Cronet_Metrics_connect_end_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_end,
);

typedef Native_Cronet_Metrics_connect_end_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_end,
);

typedef _dart_Cronet_Metrics_connect_end_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_end,
);

typedef Native_Cronet_Metrics_ssl_start_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_start,
);

typedef _dart_Cronet_Metrics_ssl_start_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_start,
);

typedef Native_Cronet_Metrics_ssl_start_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_start,
);

typedef _dart_Cronet_Metrics_ssl_start_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_start,
);

typedef Native_Cronet_Metrics_ssl_end_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_end,
);

typedef _dart_Cronet_Metrics_ssl_end_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_end,
);

typedef Native_Cronet_Metrics_ssl_end_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_end,
);

typedef _dart_Cronet_Metrics_ssl_end_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_end,
);

typedef Native_Cronet_Metrics_sending_start_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_start,
);

typedef _dart_Cronet_Metrics_sending_start_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_start,
);

typedef Native_Cronet_Metrics_sending_start_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_start,
);

typedef _dart_Cronet_Metrics_sending_start_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_start,
);

typedef Native_Cronet_Metrics_sending_end_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_end,
);

typedef _dart_Cronet_Metrics_sending_end_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_end,
);

typedef Native_Cronet_Metrics_sending_end_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_end,
);

typedef _dart_Cronet_Metrics_sending_end_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_end,
);

typedef Native_Cronet_Metrics_push_start_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_start,
);

typedef _dart_Cronet_Metrics_push_start_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_start,
);

typedef Native_Cronet_Metrics_push_start_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_start,
);

typedef _dart_Cronet_Metrics_push_start_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_start,
);

typedef Native_Cronet_Metrics_push_end_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_end,
);

typedef _dart_Cronet_Metrics_push_end_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_end,
);

typedef Native_Cronet_Metrics_push_end_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_end,
);

typedef _dart_Cronet_Metrics_push_end_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_end,
);

typedef Native_Cronet_Metrics_response_start_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> response_start,
);

typedef _dart_Cronet_Metrics_response_start_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> response_start,
);

typedef Native_Cronet_Metrics_response_start_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> response_start,
);

typedef _dart_Cronet_Metrics_response_start_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> response_start,
);

typedef Native_Cronet_Metrics_request_end_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_end,
);

typedef _dart_Cronet_Metrics_request_end_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_end,
);

typedef Native_Cronet_Metrics_request_end_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_end,
);

typedef _dart_Cronet_Metrics_request_end_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_end,
);

typedef Native_Cronet_Metrics_socket_reused_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Int32 socket_reused,
);

typedef _dart_Cronet_Metrics_socket_reused_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  int socket_reused,
);

typedef Native_Cronet_Metrics_sent_byte_count_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Int64 sent_byte_count,
);

typedef _dart_Cronet_Metrics_sent_byte_count_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  int sent_byte_count,
);

typedef Native_Cronet_Metrics_received_byte_count_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Int64 received_byte_count,
);

typedef _dart_Cronet_Metrics_received_byte_count_set = int Function(
  ffi.Pointer<Cronet_Metrics> self,
  int received_byte_count,
);

typedef Native_Cronet_RequestFinishedInfo_Destroy = ffi.Int32 Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
);

typedef _dart_Cronet_RequestFinishedInfo_Destroy = int Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
);

typedef Native_Cronet_RequestFinishedInfo_metrics_set = ffi.Int32 Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ffi.Pointer<Cronet_Metrics> metrics,
);

typedef _dart_Cronet_RequestFinishedInfo_metrics_set = int Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ffi.Pointer<Cronet_Metrics> metrics,
);

typedef Native_Cronet_RequestFinishedInfo_metrics_move = ffi.Void Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ffi.Pointer<Cronet_Metrics> metrics,
);

typedef _dart_Cronet_RequestFinishedInfo_metrics_move = void Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ffi.Pointer<Cronet_Metrics> metrics,
);

typedef Native_Cronet_RequestFinishedInfo_annotations_add = ffi.Int32 Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ffi.Pointer<ffi.Void> element,
);

typedef _dart_Cronet_RequestFinishedInfo_annotations_add = int Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ffi.Pointer<ffi.Void> element,
);

typedef Native_Cronet_RequestFinishedInfo_finished_reason_set = ffi.Int32
    Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ffi.Int32 finished_reason,
);

typedef _dart_Cronet_RequestFinishedInfo_finished_reason_set = int Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  int finished_reason,
);

typedef Native_Cronet_RequestFinishedInfo_annotations_clear = ffi.Int32
    Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
);

typedef _dart_Cronet_RequestFinishedInfo_annotations_clear = int Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
);

typedef Native_Cronet_Engine_SetMockCertVerifierForTesting = ffi.Void Function(
  ffi.Int32 engine,
  ffi.Pointer<ffi.Void> raw_mock_cert_verifier,
);

typedef _dart_Cronet_Engine_SetMockCertVerifierForTesting = void Function(
  int engine,
  ffi.Pointer<ffi.Void> raw_mock_cert_verifier,
);

typedef Native_Cronet_Engine_GetStreamEngine = ffi.Pointer<stream_engine>
    Function(
  ffi.Int32 engine,
);

typedef _dart_Cronet_Engine_GetStreamEngine = ffi.Pointer<stream_engine>
    Function(
  int engine,
);

typedef Native_PerfTest = ffi.Void Function(
  ffi.Pointer<ffi.Int8> json_args,
);

typedef _dart_PerfTest = void Function(
  ffi.Pointer<ffi.Int8> json_args,
);

typedef Native___daylight = ffi.Pointer<ffi.Int32> Function();

typedef _dart___daylight = ffi.Pointer<ffi.Int32> Function();

typedef Native___dstbias = ffi.Pointer<ffi.Int64> Function();

typedef _dart___dstbias = ffi.Pointer<ffi.Int64> Function();

typedef Native___timezone = ffi.Pointer<ffi.Int64> Function();

typedef _dart___timezone = ffi.Pointer<ffi.Int64> Function();

typedef Native___tzname = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef _dart___tzname = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef Native__get_daylight = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Daylight,
);

typedef _dart__get_daylight = int Function(
  ffi.Pointer<ffi.Int32> _Daylight,
);

typedef Native__get_dstbias = ffi.Int32 Function(
  ffi.Pointer<ffi.Int64> _DaylightSavingsBias,
);

typedef _dart__get_dstbias = int Function(
  ffi.Pointer<ffi.Int64> _DaylightSavingsBias,
);

typedef Native__get_timezone = ffi.Int32 Function(
  ffi.Pointer<ffi.Int64> _TimeZone,
);

typedef _dart__get_timezone = int Function(
  ffi.Pointer<ffi.Int64> _TimeZone,
);

typedef Native__get_tzname = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _ReturnValue,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Int32 _Index,
);

typedef _dart__get_tzname = int Function(
  ffi.Pointer<ffi.Uint64> _ReturnValue,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  int _Index,
);

typedef Native_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> _Tm,
);

typedef Native_asctime_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<tm> _Tm,
);

typedef _dart_asctime_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  ffi.Pointer<tm> _Tm,
);

typedef Native_clock = ffi.Int64 Function();

typedef _dart_clock = int Function();

typedef Native__ctime32 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__ctime32 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__ctime32_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__ctime32_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__ctime64 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__ctime64 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__ctime64_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__ctime64_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__difftime32 = ffi.Double Function(
  ffi.Int64 _Time1,
  ffi.Int64 _Time2,
);

typedef _dart__difftime32 = double Function(
  int _Time1,
  int _Time2,
);

typedef Native__difftime64 = ffi.Double Function(
  ffi.Int64 _Time1,
  ffi.Int64 _Time2,
);

typedef _dart__difftime64 = double Function(
  int _Time1,
  int _Time2,
);

typedef Native__gmtime32 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__gmtime32 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__gmtime32_s = ffi.Int32 Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__gmtime32_s = int Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__gmtime64 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__gmtime64 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__gmtime64_s = ffi.Int32 Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__gmtime64_s = int Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__localtime32 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__localtime32 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__localtime32_s = ffi.Int32 Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__localtime32_s = int Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__localtime64 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__localtime64 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__localtime64_s = ffi.Int32 Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__localtime64_s = int Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__mkgmtime32 = ffi.Int64 Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart__mkgmtime32 = int Function(
  ffi.Pointer<tm> _Tm,
);

typedef Native__mkgmtime64 = ffi.Int64 Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart__mkgmtime64 = int Function(
  ffi.Pointer<tm> _Tm,
);

typedef Native__mktime32 = ffi.Int64 Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart__mktime32 = int Function(
  ffi.Pointer<tm> _Tm,
);

typedef Native__mktime64 = ffi.Int64 Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart__mktime64 = int Function(
  ffi.Pointer<tm> _Tm,
);

typedef Native_strftime = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<tm> _Tm,
);

typedef _dart_strftime = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<tm> _Tm,
);

typedef Native__strftime_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _MaxSize,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strftime_l = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _MaxSize,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native__strdate_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
);

typedef _dart__strdate_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
);

typedef Native__strdate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef _dart__strdate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef Native__strtime_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
);

typedef _dart__strtime_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
);

typedef Native__strtime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef _dart__strtime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef Native__time32 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__time32 = int Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__time64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__time64 = int Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef Native__timespec32_get = ffi.Int32 Function(
  ffi.Pointer<_timespec32> _Ts,
  ffi.Int32 _Base,
);

typedef _dart__timespec32_get = int Function(
  ffi.Pointer<_timespec32> _Ts,
  int _Base,
);

typedef Native__timespec64_get = ffi.Int32 Function(
  ffi.Pointer<_timespec64> _Ts,
  ffi.Int32 _Base,
);

typedef _dart__timespec64_get = int Function(
  ffi.Pointer<_timespec64> _Ts,
  int _Base,
);

typedef Native__tzset = ffi.Void Function();

typedef _dart__tzset = void Function();

typedef Native__getsystime = ffi.Uint32 Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart__getsystime = int Function(
  ffi.Pointer<tm> _Tm,
);

typedef Native__setsystime = ffi.Uint32 Function(
  ffi.Pointer<tm> _Tm,
  ffi.Uint32 _Milliseconds,
);

typedef _dart__setsystime = int Function(
  ffi.Pointer<tm> _Tm,
  int _Milliseconds,
);

typedef Native_tzset = ffi.Void Function();

typedef _dart_tzset = void Function();

typedef Native__cgetws_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Uint64> _SizeRead,
);

typedef _dart__cgetws_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Uint64> _SizeRead,
);

typedef Native_xtime_get = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Int32 arg1,
);

typedef _dart_xtime_get = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  int arg1,
);

typedef Native__Xtime_diff_to_millis = ffi.Int64 Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart__Xtime_diff_to_millis = int Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef Native__Xtime_diff_to_millis2 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart__Xtime_diff_to_millis2 = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef Native__Xtime_get_ticks = ffi.Int64 Function();

typedef _dart__Xtime_get_ticks = int Function();

typedef Native__Query_perf_counter = ffi.Int64 Function();

typedef _dart__Query_perf_counter = int Function();

typedef Native__Query_perf_frequency = ffi.Int64 Function();

typedef _dart__Query_perf_frequency = int Function();

typedef Native__Thrd_detach = ffi.Int32 Function();

typedef _dart__Thrd_detach = int Function();

typedef Native__Thrd_join = ffi.Int32 Function();

typedef _dart__Thrd_join = int Function();

typedef Native__Thrd_sleep = ffi.Void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart__Thrd_sleep = void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef Native__Thrd_yield = ffi.Void Function();

typedef _dart__Thrd_yield = void Function();

typedef Native__Thrd_hardware_concurrency = ffi.Uint32 Function();

typedef _dart__Thrd_hardware_concurrency = int Function();

typedef Native__Thrd_id = ffi.Int32 Function();

typedef _dart__Thrd_id = int Function();

typedef Native__Mtx_init = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Int32 arg1,
);

typedef _dart__Mtx_init = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  int arg1,
);

typedef Native__Mtx_destroy = ffi.Void Function();

typedef _dart__Mtx_destroy = void Function();

typedef Native__Mtx_init_in_situ = ffi.Void Function();

typedef _dart__Mtx_init_in_situ = void Function();

typedef Native__Mtx_destroy_in_situ = ffi.Void Function();

typedef _dart__Mtx_destroy_in_situ = void Function();

typedef Native__Mtx_current_owns = ffi.Int32 Function();

typedef _dart__Mtx_current_owns = int Function();

typedef Native__Mtx_lock = ffi.Int32 Function();

typedef _dart__Mtx_lock = int Function();

typedef Native__Mtx_trylock = ffi.Int32 Function();

typedef _dart__Mtx_trylock = int Function();

typedef Native__Mtx_timedlock = ffi.Int32 Function();

typedef _dart__Mtx_timedlock = int Function();

typedef Native__Mtx_unlock = ffi.Int32 Function();

typedef _dart__Mtx_unlock = int Function();

typedef Native__Mtx_getconcrtcs = ffi.Pointer<ffi.Void> Function();

typedef _dart__Mtx_getconcrtcs = ffi.Pointer<ffi.Void> Function();

typedef Native__Mtx_clear_owner = ffi.Void Function();

typedef _dart__Mtx_clear_owner = void Function();

typedef Native__Mtx_reset_owner = ffi.Void Function();

typedef _dart__Mtx_reset_owner = void Function();

typedef Native__Smtx_lock_exclusive = ffi.Void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart__Smtx_lock_exclusive = void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef Native__Smtx_lock_shared = ffi.Void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart__Smtx_lock_shared = void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef Native__Smtx_try_lock_exclusive = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart__Smtx_try_lock_exclusive = int Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef Native__Smtx_try_lock_shared = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart__Smtx_try_lock_shared = int Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef Native__Smtx_unlock_exclusive = ffi.Void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart__Smtx_unlock_exclusive = void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef Native__Smtx_unlock_shared = ffi.Void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart__Smtx_unlock_shared = void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef Native__Cnd_init = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart__Cnd_init = int Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef Native__Cnd_destroy = ffi.Void Function();

typedef _dart__Cnd_destroy = void Function();

typedef Native__Cnd_init_in_situ = ffi.Void Function();

typedef _dart__Cnd_init_in_situ = void Function();

typedef Native__Cnd_destroy_in_situ = ffi.Void Function();

typedef _dart__Cnd_destroy_in_situ = void Function();

typedef Native__Cnd_wait = ffi.Int32 Function();

typedef _dart__Cnd_wait = int Function();

typedef Native__Cnd_timedwait = ffi.Int32 Function();

typedef _dart__Cnd_timedwait = int Function();

typedef Native__Cnd_broadcast = ffi.Int32 Function();

typedef _dart__Cnd_broadcast = int Function();

typedef Native__Cnd_signal = ffi.Int32 Function();

typedef _dart__Cnd_signal = int Function();

typedef Native__Cnd_register_at_thread_exit = ffi.Void Function();

typedef _dart__Cnd_register_at_thread_exit = void Function();

typedef Native__Cnd_unregister_at_thread_exit = ffi.Void Function();

typedef _dart__Cnd_unregister_at_thread_exit = void Function();

typedef Native__Cnd_do_broadcast_at_thread_exit = ffi.Void Function();

typedef _dart__Cnd_do_broadcast_at_thread_exit = void Function();

typedef Native__lock_locales = ffi.Void Function();

typedef _dart__lock_locales = void Function();

typedef Native__unlock_locales = ffi.Void Function();

typedef _dart__unlock_locales = void Function();

typedef Native__configthreadlocale = ffi.Int32 Function(
  ffi.Int32 _Flag,
);

typedef _dart__configthreadlocale = int Function(
  int _Flag,
);

typedef Native_setlocale = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 _Category,
  ffi.Pointer<ffi.Int8> _Locale,
);

typedef _dart_setlocale = ffi.Pointer<ffi.Int8> Function(
  int _Category,
  ffi.Pointer<ffi.Int8> _Locale,
);

typedef Native_localeconv = ffi.Pointer<lconv> Function();

typedef _dart_localeconv = ffi.Pointer<lconv> Function();

typedef Native__get_current_locale = ffi.Pointer<__crt_locale_pointers>
    Function();

typedef _dart__get_current_locale = ffi.Pointer<__crt_locale_pointers>
    Function();

typedef Native__create_locale = ffi.Pointer<__crt_locale_pointers> Function(
  ffi.Int32 _Category,
  ffi.Pointer<ffi.Int8> _Locale,
);

typedef _dart__create_locale = ffi.Pointer<__crt_locale_pointers> Function(
  int _Category,
  ffi.Pointer<ffi.Int8> _Locale,
);

typedef Native__free_locale = ffi.Void Function(
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__free_locale = void Function(
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef Native____lc_locale_name_func = ffi.Pointer<ffi.Pointer<ffi.Uint16>>
    Function();

typedef _dart____lc_locale_name_func = ffi.Pointer<ffi.Pointer<ffi.Uint16>>
    Function();

typedef Native____lc_codepage_func = ffi.Uint32 Function();

typedef _dart____lc_codepage_func = int Function();

typedef Native____lc_collate_cp_func = ffi.Uint32 Function();

typedef _dart____lc_collate_cp_func = int Function();

typedef Native__Getdays = ffi.Pointer<ffi.Int8> Function();

typedef _dart__Getdays = ffi.Pointer<ffi.Int8> Function();

typedef Native__Getmonths = ffi.Pointer<ffi.Int8> Function();

typedef _dart__Getmonths = ffi.Pointer<ffi.Int8> Function();

typedef Native__Gettnames = ffi.Pointer<ffi.Void> Function();

typedef _dart__Gettnames = ffi.Pointer<ffi.Void> Function();

typedef Native__W_Getdays = ffi.Pointer<ffi.Uint16> Function();

typedef _dart__W_Getdays = ffi.Pointer<ffi.Uint16> Function();

typedef Native__W_Getmonths = ffi.Pointer<ffi.Uint16> Function();

typedef _dart__W_Getmonths = ffi.Pointer<ffi.Uint16> Function();

typedef Native__W_Gettnames = ffi.Pointer<ffi.Void> Function();

typedef _dart__W_Gettnames = ffi.Pointer<ffi.Void> Function();

typedef Native__Strftime = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _Max_size,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<tm> _Timeptr,
  ffi.Pointer<ffi.Void> _Lc_time_arg,
);

typedef _dart__Strftime = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Max_size,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<tm> _Timeptr,
  ffi.Pointer<ffi.Void> _Lc_time_arg,
);

typedef Native__Wcsftime = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _Max_size,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<tm> _Timeptr,
  ffi.Pointer<ffi.Void> _Lc_time_arg,
);

typedef _dart__Wcsftime = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _Max_size,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<tm> _Timeptr,
  ffi.Pointer<ffi.Void> _Lc_time_arg,
);

typedef Native__Getcoll = ffi.Int32 Function();

typedef _dart__Getcoll = int Function();

typedef Native__Getctype = _Ctypevec Function();

typedef _dart__Getctype = _Ctypevec Function();

typedef Native__Getdateorder = ffi.Int32 Function();

typedef _dart__Getdateorder = int Function();

typedef Native__Mbrtowc = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 _Max_multibyte,
  ffi.Pointer<_Mbstatet> arg3,
  ffi.Pointer<_Cvtvec> arg4,
);

typedef _dart__Mbrtowc = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int _Max_multibyte,
  ffi.Pointer<_Mbstatet> arg3,
  ffi.Pointer<_Cvtvec> arg4,
);

typedef Native__Stof = ffi.Float Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Int64 arg2,
);

typedef _dart__Stof = double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  int arg2,
);

typedef Native__Stod = ffi.Double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Int64 arg2,
);

typedef _dart__Stod = double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  int arg2,
);

typedef Native__Strcoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart__Strcoll = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef Native__Strxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _End1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart__Strxfrm = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _End1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef Native__Tolower = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<_Ctypevec> arg1,
);

typedef _dart__Tolower = int Function(
  int arg0,
  ffi.Pointer<_Ctypevec> arg1,
);

typedef Native__Toupper = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<_Ctypevec> arg1,
);

typedef _dart__Toupper = int Function(
  int arg0,
  ffi.Pointer<_Ctypevec> arg1,
);

typedef Native__Wcrtomb = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint16 arg1,
  ffi.Pointer<_Mbstatet> arg2,
  ffi.Pointer<_Cvtvec> arg3,
);

typedef _dart__Wcrtomb = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<_Mbstatet> arg2,
  ffi.Pointer<_Cvtvec> arg3,
);

typedef Native__Wcscoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> arg0,
  ffi.Pointer<ffi.Uint16> arg1,
  ffi.Pointer<ffi.Uint16> arg2,
  ffi.Pointer<ffi.Uint16> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart__Wcscoll = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
  ffi.Pointer<ffi.Uint16> arg1,
  ffi.Pointer<ffi.Uint16> arg2,
  ffi.Pointer<ffi.Uint16> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef Native__Wcsxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _End1,
  ffi.Pointer<ffi.Uint16> arg2,
  ffi.Pointer<ffi.Uint16> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart__Wcsxfrm = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _End1,
  ffi.Pointer<ffi.Uint16> arg2,
  ffi.Pointer<ffi.Uint16> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef Native__Getwctype = ffi.Int16 Function(
  ffi.Uint16 arg0,
  ffi.Pointer<_Ctypevec> arg1,
);

typedef _dart__Getwctype = int Function(
  int arg0,
  ffi.Pointer<_Ctypevec> arg1,
);

typedef Native__Getwctypes = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> arg0,
  ffi.Pointer<ffi.Uint16> arg1,
  ffi.Pointer<ffi.Int16> arg2,
  ffi.Pointer<_Ctypevec> arg3,
);

typedef _dart__Getwctypes = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> arg0,
  ffi.Pointer<ffi.Uint16> arg1,
  ffi.Pointer<ffi.Int16> arg2,
  ffi.Pointer<_Ctypevec> arg3,
);

typedef Native__Towlower = ffi.Uint16 Function(
  ffi.Uint16 arg0,
  ffi.Pointer<_Ctypevec> arg1,
);

typedef _dart__Towlower = int Function(
  int arg0,
  ffi.Pointer<_Ctypevec> arg1,
);

typedef Native__Towupper = ffi.Uint16 Function(
  ffi.Uint16 arg0,
  ffi.Pointer<_Ctypevec> arg1,
);

typedef _dart__Towupper = int Function(
  int arg0,
  ffi.Pointer<_Ctypevec> arg1,
);

typedef Native__GetLocaleForCP = ffi.Pointer<__crt_locale_pointers> Function(
  ffi.Uint32 arg0,
);

typedef _dart__GetLocaleForCP = ffi.Pointer<__crt_locale_pointers> Function(
  int arg0,
);

typedef Native__Stodx = ffi.Double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Int64 arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart__Stodx = double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef Native__Stolx = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart__Stolx = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef Native__Stoulx = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart__Stoulx = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef Native__Stollx = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart__Stollx = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef Native__Stoullx = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart__Stoullx = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef Native___vcrt_initialize = ffi.Uint8 Function();

typedef _dart___vcrt_initialize = int Function();

typedef Native___vcrt_uninitialize = ffi.Uint8 Function(
  ffi.Uint8 _Terminating,
);

typedef _dart___vcrt_uninitialize = int Function(
  int _Terminating,
);

typedef Native___vcrt_uninitialize_critical = ffi.Uint8 Function();

typedef _dart___vcrt_uninitialize_critical = int Function();

typedef Native___vcrt_thread_attach = ffi.Uint8 Function();

typedef _dart___vcrt_thread_attach = int Function();

typedef Native___vcrt_thread_detach = ffi.Uint8 Function();

typedef _dart___vcrt_thread_detach = int Function();

typedef Native___isa_available_init = ffi.Int32 Function();

typedef _dart___isa_available_init = int Function();

typedef Native__get_startup_argv_mode = ffi.Int32 Function();

typedef _dart__get_startup_argv_mode = int Function();

typedef Native__seh_filter_dll = ffi.Int32 Function(
  ffi.Uint64 _ExceptionNum,
  ffi.Pointer<_EXCEPTION_POINTERS> _ExceptionPtr,
);

typedef _dart__seh_filter_dll = int Function(
  int _ExceptionNum,
  ffi.Pointer<_EXCEPTION_POINTERS> _ExceptionPtr,
);

typedef Native__seh_filter_exe = ffi.Int32 Function(
  ffi.Uint64 _ExceptionNum,
  ffi.Pointer<_EXCEPTION_POINTERS> _ExceptionPtr,
);

typedef _dart__seh_filter_exe = int Function(
  int _ExceptionNum,
  ffi.Pointer<_EXCEPTION_POINTERS> _ExceptionPtr,
);

typedef Native__query_app_type = ffi.Int32 Function();

typedef _dart__query_app_type = int Function();

typedef Native__set_app_type = ffi.Void Function(
  ffi.Int32 _Type,
);

typedef _dart__set_app_type = void Function(
  int _Type,
);

typedef _UserMathErrorFunctionPointer = ffi.Int32 Function(
  ffi.Pointer<_exception>,
);

typedef Native___setusermatherr = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_UserMathErrorFunctionPointer>>
      _UserMathErrorFunction,
);

typedef _dart___setusermatherr = void Function(
  ffi.Pointer<ffi.NativeFunction<_UserMathErrorFunctionPointer>>
      _UserMathErrorFunction,
);

typedef Native__is_c_termination_complete = ffi.Int32 Function();

typedef _dart__is_c_termination_complete = int Function();

typedef Native__configure_narrow_argv = ffi.Int32 Function(
  ffi.Int32 mode,
);

typedef _dart__configure_narrow_argv = int Function(
  int mode,
);

typedef Native__configure_wide_argv = ffi.Int32 Function(
  ffi.Int32 mode,
);

typedef _dart__configure_wide_argv = int Function(
  int mode,
);

typedef Native__initialize_narrow_environment = ffi.Int32 Function();

typedef _dart__initialize_narrow_environment = int Function();

typedef Native__initialize_wide_environment = ffi.Int32 Function();

typedef _dart__initialize_wide_environment = int Function();

typedef Native__get_initial_narrow_environment
    = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef _dart__get_initial_narrow_environment
    = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef Native__get_initial_wide_environment
    = ffi.Pointer<ffi.Pointer<ffi.Uint16>> Function();

typedef _dart__get_initial_wide_environment
    = ffi.Pointer<ffi.Pointer<ffi.Uint16>> Function();

typedef Native__get_narrow_winmain_command_line = ffi.Pointer<ffi.Int8>
    Function();

typedef _dart__get_narrow_winmain_command_line = ffi.Pointer<ffi.Int8>
    Function();

typedef Native__get_wide_winmain_command_line = ffi.Pointer<ffi.Uint16>
    Function();

typedef _dart__get_wide_winmain_command_line = ffi.Pointer<ffi.Uint16>
    Function();

typedef Native___p__acmdln = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef _dart___p__acmdln = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef Native___p__wcmdln = ffi.Pointer<ffi.Pointer<ffi.Uint16>> Function();

typedef _dart___p__wcmdln = ffi.Pointer<ffi.Pointer<ffi.Uint16>> Function();

typedef _PVFV = ffi.Void Function();

typedef Native__initterm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_PVFV>>> _First,
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_PVFV>>> _Last,
);

typedef _dart__initterm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_PVFV>>> _First,
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_PVFV>>> _Last,
);

typedef _PIFV = ffi.Int32 Function();

typedef Native__initterm_e = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_PIFV>>> _First,
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_PIFV>>> _Last,
);

typedef _dart__initterm_e = int Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_PIFV>>> _First,
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_PIFV>>> _Last,
);

typedef Native__initialize_onexit_table = ffi.Int32 Function(
  ffi.Pointer<_onexit_table_t> _Table,
);

typedef _dart__initialize_onexit_table = int Function(
  ffi.Pointer<_onexit_table_t> _Table,
);

typedef Native__register_onexit_function = ffi.Int32 Function(
  ffi.Pointer<_onexit_table_t> _Table,
  ffi.Pointer<ffi.NativeFunction<_onexit_t>> _Function,
);

typedef _dart__register_onexit_function = int Function(
  ffi.Pointer<_onexit_table_t> _Table,
  ffi.Pointer<ffi.NativeFunction<_onexit_t>> _Function,
);

typedef Native__execute_onexit_table = ffi.Int32 Function(
  ffi.Pointer<_onexit_table_t> _Table,
);

typedef _dart__execute_onexit_table = int Function(
  ffi.Pointer<_onexit_table_t> _Table,
);

typedef Native__crt_atexit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_PVFV>> _Function,
);

typedef _dart__crt_atexit = int Function(
  ffi.Pointer<ffi.NativeFunction<_PVFV>> _Function,
);

typedef Native__crt_at_quick_exit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_PVFV>> _Function,
);

typedef _dart__crt_at_quick_exit = int Function(
  ffi.Pointer<ffi.NativeFunction<_PVFV>> _Function,
);

typedef Native___acrt_initialize = ffi.Uint8 Function();

typedef _dart___acrt_initialize = int Function();

typedef Native___acrt_uninitialize = ffi.Uint8 Function(
  ffi.Uint8 _Terminating,
);

typedef _dart___acrt_uninitialize = int Function(
  int _Terminating,
);

typedef Native___acrt_uninitialize_critical = ffi.Uint8 Function(
  ffi.Uint8 _Terminating,
);

typedef _dart___acrt_uninitialize_critical = int Function(
  int _Terminating,
);

typedef Native___acrt_thread_attach = ffi.Uint8 Function();

typedef _dart___acrt_thread_attach = int Function();

typedef Native___acrt_thread_detach = ffi.Uint8 Function();

typedef _dart___acrt_thread_detach = int Function();

typedef Native__cexit = ffi.Void Function();

typedef _dart__cexit = void Function();

typedef Native__c_exit = ffi.Void Function();

typedef _dart__c_exit = void Function();

typedef _tls_callback_type = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
);

typedef Native__register_thread_local_exe_atexit_callback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_tls_callback_type>> _Callback,
);

typedef _dart__register_thread_local_exe_atexit_callback = void Function(
  ffi.Pointer<ffi.NativeFunction<_tls_callback_type>> _Callback,
);

typedef _beginthread_proc_type = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef Native__beginthread = ffi.Uint64 Function(
  ffi.Pointer<ffi.NativeFunction<_beginthread_proc_type>> _StartAddress,
  ffi.Uint32 _StackSize,
  ffi.Pointer<ffi.Void> _ArgList,
);

typedef _dart__beginthread = int Function(
  ffi.Pointer<ffi.NativeFunction<_beginthread_proc_type>> _StartAddress,
  int _StackSize,
  ffi.Pointer<ffi.Void> _ArgList,
);

typedef Native__endthread = ffi.Void Function();

typedef _dart__endthread = void Function();

typedef _beginthreadex_proc_type = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef Native__beginthreadex = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> _Security,
  ffi.Uint32 _StackSize,
  ffi.Pointer<ffi.NativeFunction<_beginthreadex_proc_type>> _StartAddress,
  ffi.Pointer<ffi.Void> _ArgList,
  ffi.Uint32 _InitFlag,
  ffi.Pointer<ffi.Uint32> _ThrdAddr,
);

typedef _dart__beginthreadex = int Function(
  ffi.Pointer<ffi.Void> _Security,
  int _StackSize,
  ffi.Pointer<ffi.NativeFunction<_beginthreadex_proc_type>> _StartAddress,
  ffi.Pointer<ffi.Void> _ArgList,
  int _InitFlag,
  ffi.Pointer<ffi.Uint32> _ThrdAddr,
);

typedef Native__endthreadex = ffi.Void Function(
  ffi.Uint32 _ReturnCode,
);

typedef _dart__endthreadex = void Function(
  int _ReturnCode,
);

typedef Native__getpid = ffi.Int32 Function();

typedef _dart__getpid = int Function();

typedef Native__cwait = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int32> _TermStat,
  ffi.IntPtr _ProcHandle,
  ffi.Int32 _Action,
);

typedef _dart__cwait = int Function(
  ffi.Pointer<ffi.Int32> _TermStat,
  int _ProcHandle,
  int _Action,
);

typedef Native__execl = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart__execl = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native__execle = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart__execle = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native__execlp = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart__execlp = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native__execlpe = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart__execlpe = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native__execv = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef _dart__execv = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef Native__execve = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef _dart__execve = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef Native__execvp = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef _dart__execvp = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef Native__execvpe = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef _dart__execvpe = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef Native__spawnl = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart__spawnl = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native__spawnle = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart__spawnle = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native__spawnlp = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart__spawnlp = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native__spawnlpe = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart__spawnlpe = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native__spawnv = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef _dart__spawnv = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef Native__spawnve = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef _dart__spawnve = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef Native__spawnvp = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef _dart__spawnvp = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef Native__spawnvpe = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef _dart__spawnvpe = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef Native__loaddll = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
);

typedef _dart__loaddll = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
);

typedef Native__unloaddll = ffi.Int32 Function(
  ffi.IntPtr _Handle,
);

typedef _dart__unloaddll = int Function(
  int _Handle,
);

typedef _GetDllProcAddrProcType = ffi.Int32 Function();

typedef Native__getdllprocaddr
    = ffi.Pointer<ffi.NativeFunction<_GetDllProcAddrProcType>> Function(
  ffi.IntPtr _Handle,
  ffi.Pointer<ffi.Int8> _ProcedureName,
  ffi.IntPtr _Ordinal,
);

typedef _dart__getdllprocaddr
    = ffi.Pointer<ffi.NativeFunction<_GetDllProcAddrProcType>> Function(
  int _Handle,
  ffi.Pointer<ffi.Int8> _ProcedureName,
  int _Ordinal,
);

typedef Native_cwait = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int32> _TermStat,
  ffi.IntPtr _ProcHandle,
  ffi.Int32 _Action,
);

typedef _dart_cwait = int Function(
  ffi.Pointer<ffi.Int32> _TermStat,
  int _ProcHandle,
  int _Action,
);

typedef Native_execl = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart_execl = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native_execle = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart_execle = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native_execlp = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart_execlp = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native_execlpe = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart_execlpe = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native_execv = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef _dart_execv = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef Native_execve = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef _dart_execve = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef Native_execvp = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef _dart_execvp = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef Native_execvpe = ffi.IntPtr Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef _dart_execvpe = int Function(
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef Native_spawnl = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart_spawnl = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native_spawnle = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart_spawnle = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native_spawnlp = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart_spawnlp = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native_spawnlpe = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef _dart_spawnlpe = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Int8> _Arguments,
);

typedef Native_spawnv = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef _dart_spawnv = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef Native_spawnve = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef _dart_spawnve = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef Native_spawnvp = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef _dart_spawnvp = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
);

typedef Native_spawnvpe = ffi.IntPtr Function(
  ffi.Int32 _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef _dart_spawnvpe = int Function(
  int _Mode,
  ffi.Pointer<ffi.Int8> _FileName,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Arguments,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Environment,
);

typedef Native_getpid = ffi.Int32 Function();

typedef _dart_getpid = int Function();

typedef Native__setjmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Buf,
);

typedef _dart__setjmp = int Function(
  ffi.Pointer<ffi.Int32> _Buf,
);

typedef Native_longjmp = ffi.Void Function(
  ffi.Pointer<ffi.Int32> _Buf,
  ffi.Int32 _Value,
);

typedef _dart_longjmp = void Function(
  ffi.Pointer<ffi.Int32> _Buf,
  int _Value,
);

typedef Native__mm_prefetch = ffi.Void Function(
  ffi.Pointer<ffi.Int8> _A,
  ffi.Int32 _Sel,
);

typedef _dart__mm_prefetch = void Function(
  ffi.Pointer<ffi.Int8> _A,
  int _Sel,
);

typedef Native__mm_sfence = ffi.Void Function();

typedef _dart__mm_sfence = void Function();

typedef Native__mm_getcsr = ffi.Uint32 Function();

typedef _dart__mm_getcsr = int Function();

typedef Native__mm_setcsr = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart__mm_setcsr = void Function(
  int arg0,
);

typedef Native__mm_clflush = ffi.Void Function(
  ffi.Pointer<ffi.Void> _P,
);

typedef _dart__mm_clflush = void Function(
  ffi.Pointer<ffi.Void> _P,
);

typedef Native__mm_lfence = ffi.Void Function();

typedef _dart__mm_lfence = void Function();

typedef Native__mm_mfence = ffi.Void Function();

typedef _dart__mm_mfence = void Function();

typedef Native__mm_stream_si32 = ffi.Void Function(
  ffi.Pointer<ffi.Int32> _P,
  ffi.Int32 _I,
);

typedef _dart__mm_stream_si32 = void Function(
  ffi.Pointer<ffi.Int32> _P,
  int _I,
);

typedef Native__mm_pause = ffi.Void Function();

typedef _dart__mm_pause = void Function();

typedef Native__mm_monitor = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart__mm_monitor = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
  int arg2,
);

typedef Native__mm_mwait = ffi.Void Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__mm_mwait = void Function(
  int arg0,
  int arg1,
);

typedef Native__mm_popcnt_u32 = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__mm_popcnt_u32 = int Function(
  int arg0,
);

typedef Native__mm_popcnt_u64 = ffi.Int64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__mm_popcnt_u64 = int Function(
  int arg0,
);

typedef Native__mm_crc32_u8 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint8 arg1,
);

typedef _dart__mm_crc32_u8 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm_crc32_u16 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint16 arg1,
);

typedef _dart__mm_crc32_u16 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm_crc32_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__mm_crc32_u32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm_crc32_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__mm_crc32_u64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm256_zeroall = ffi.Void Function();

typedef _dart__mm256_zeroall = void Function();

typedef Native__mm256_zeroupper = ffi.Void Function();

typedef _dart__mm256_zeroupper = void Function();

typedef Native__xgetbv = ffi.Uint64 Function(
  ffi.Uint32 arg0,
);

typedef _dart__xgetbv = int Function(
  int arg0,
);

typedef Native__xsetbv = ffi.Void Function(
  ffi.Uint32 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__xsetbv = void Function(
  int arg0,
  int arg1,
);

typedef Native__xsave = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__xsave = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__xsave64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__xsave64 = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__xsaveopt = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__xsaveopt = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__xsaveopt64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__xsaveopt64 = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__xsavec = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__xsavec = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__xsavec64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__xsavec64 = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__xrstor = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__xrstor = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__xrstor64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__xrstor64 = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__xsaves = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__xsaves = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__xsaves64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__xsaves64 = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__xrstors = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__xrstors = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__xrstors64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__xrstors64 = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__fxsave = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__fxsave = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__fxsave64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__fxsave64 = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__fxrstor = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__fxrstor = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__fxrstor64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__fxrstor64 = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__rdrand16_step = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart__rdrand16_step = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef Native__rdrand32_step = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart__rdrand32_step = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef Native__rdrand64_step = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> arg0,
);

typedef _dart__rdrand64_step = int Function(
  ffi.Pointer<ffi.Uint64> arg0,
);

typedef Native__readfsbase_u32 = ffi.Uint32 Function();

typedef _dart__readfsbase_u32 = int Function();

typedef Native__readgsbase_u32 = ffi.Uint32 Function();

typedef _dart__readgsbase_u32 = int Function();

typedef Native__readfsbase_u64 = ffi.Uint64 Function();

typedef _dart__readfsbase_u64 = int Function();

typedef Native__readgsbase_u64 = ffi.Uint64 Function();

typedef _dart__readgsbase_u64 = int Function();

typedef Native__writefsbase_u32 = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart__writefsbase_u32 = void Function(
  int arg0,
);

typedef Native__writegsbase_u32 = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart__writegsbase_u32 = void Function(
  int arg0,
);

typedef Native__writefsbase_u64 = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart__writefsbase_u64 = void Function(
  int arg0,
);

typedef Native__writegsbase_u64 = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart__writegsbase_u64 = void Function(
  int arg0,
);

typedef Native__bextr_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart__bextr_u32 = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef Native__bextr2_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__bextr2_u32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__blsi_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__blsi_u32 = int Function(
  int arg0,
);

typedef Native__blsmsk_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__blsmsk_u32 = int Function(
  int arg0,
);

typedef Native__blsr_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__blsr_u32 = int Function(
  int arg0,
);

typedef Native__bzhi_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__bzhi_u32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mulx_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _dart__mulx_u32 = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef Native__pdep_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__pdep_u32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__pext_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__pext_u32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__rorx_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__rorx_u32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__sarx_i32 = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__sarx_i32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__shlx_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__shlx_u32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__shrx_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__shrx_u32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__bextr_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart__bextr_u64 = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef Native__bextr2_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__bextr2_u64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__blsi_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__blsi_u64 = int Function(
  int arg0,
);

typedef Native__blsmsk_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__blsmsk_u64 = int Function(
  int arg0,
);

typedef Native__blsr_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__blsr_u64 = int Function(
  int arg0,
);

typedef Native__bzhi_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__bzhi_u64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mulx_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _dart__mulx_u64 = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef Native__pdep_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__pdep_u64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__pext_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__pext_u64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__rorx_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__rorx_u64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__sarx_i64 = ffi.Int64 Function(
  ffi.Int64 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__sarx_i64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__shlx_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__shlx_u64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__shrx_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__shrx_u64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__lzcnt_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__lzcnt_u32 = int Function(
  int arg0,
);

typedef Native__lzcnt_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__lzcnt_u64 = int Function(
  int arg0,
);

typedef Native__tzcnt_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__tzcnt_u32 = int Function(
  int arg0,
);

typedef Native__tzcnt_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__tzcnt_u64 = int Function(
  int arg0,
);

typedef Native__invpcid = ffi.Void Function(
  ffi.Uint32 arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart__invpcid = void Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef Native__Store_HLERelease = ffi.Void Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__Store_HLERelease = void Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__StorePointer_HLERelease = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart__StorePointer_HLERelease = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef Native__InterlockedExchange_HLEAcquire = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedExchange_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedExchange_HLERelease = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedExchange_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedExchangePointer_HLEAcquire = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart__InterlockedExchangePointer_HLEAcquire = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef Native__InterlockedExchangePointer_HLERelease = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart__InterlockedExchangePointer_HLERelease = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef Native__InterlockedCompareExchange_HLEAcquire = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
  ffi.Int64 arg2,
);

typedef _dart__InterlockedCompareExchange_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
  int arg2,
);

typedef Native__InterlockedCompareExchange_HLERelease = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
  ffi.Int64 arg2,
);

typedef _dart__InterlockedCompareExchange_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
  int arg2,
);

typedef Native__InterlockedCompareExchange64_HLEAcquire = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
  ffi.Int64 arg2,
);

typedef _dart__InterlockedCompareExchange64_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
  int arg2,
);

typedef Native__InterlockedCompareExchange64_HLERelease = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
  ffi.Int64 arg2,
);

typedef _dart__InterlockedCompareExchange64_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
  int arg2,
);

typedef Native__InterlockedCompareExchangePointer_HLEAcquire
    = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef _dart__InterlockedCompareExchangePointer_HLEAcquire
    = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef Native__InterlockedCompareExchangePointer_HLERelease
    = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef _dart__InterlockedCompareExchangePointer_HLERelease
    = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef Native__InterlockedExchangeAdd_HLEAcquire = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedExchangeAdd_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedExchangeAdd_HLERelease = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedExchangeAdd_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedAnd_HLEAcquire = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedAnd_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedAnd_HLERelease = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedAnd_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedOr_HLEAcquire = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedOr_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedOr_HLERelease = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedOr_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedXor_HLEAcquire = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedXor_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedXor_HLERelease = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedXor_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__interlockedbittestandset_HLEAcquire = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__interlockedbittestandset_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__interlockedbittestandset_HLERelease = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__interlockedbittestandset_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__interlockedbittestandreset_HLEAcquire = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__interlockedbittestandreset_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__interlockedbittestandreset_HLERelease = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__interlockedbittestandreset_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__Store64_HLERelease = ffi.Void Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__Store64_HLERelease = void Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedExchange64_HLEAcquire = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedExchange64_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedExchange64_HLERelease = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedExchange64_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedExchangeAdd64_HLEAcquire = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedExchangeAdd64_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedExchangeAdd64_HLERelease = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedExchangeAdd64_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedAnd64_HLEAcquire = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedAnd64_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedAnd64_HLERelease = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedAnd64_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedOr64_HLEAcquire = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedOr64_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedOr64_HLERelease = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedOr64_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedXor64_HLEAcquire = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedXor64_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__InterlockedXor64_HLERelease = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__InterlockedXor64_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__interlockedbittestandset64_HLEAcquire = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__interlockedbittestandset64_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__interlockedbittestandset64_HLERelease = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__interlockedbittestandset64_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__interlockedbittestandreset64_HLEAcquire = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__interlockedbittestandreset64_HLEAcquire = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__interlockedbittestandreset64_HLERelease = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__interlockedbittestandreset64_HLERelease = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__xbegin = ffi.Uint32 Function();

typedef _dart__xbegin = int Function();

typedef Native__xend = ffi.Void Function();

typedef _dart__xend = void Function();

typedef Native__xabort = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart__xabort = void Function(
  int arg0,
);

typedef Native__xtest = ffi.Uint8 Function();

typedef _dart__xtest = int Function();

typedef Native__rdseed16_step = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart__rdseed16_step = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef Native__rdseed32_step = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart__rdseed32_step = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef Native__rdseed64_step = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> arg0,
);

typedef _dart__rdseed64_step = int Function(
  ffi.Pointer<ffi.Uint64> arg0,
);

typedef Native__addcarryx_u32 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<ffi.Uint32> arg3,
);

typedef _dart__addcarryx_u32 = int Function(
  int arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint32> arg3,
);

typedef Native__addcarryx_u64 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Uint64> arg3,
);

typedef _dart__addcarryx_u64 = int Function(
  int arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint64> arg3,
);

typedef Native__load_be_u16 = ffi.Uint16 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__load_be_u16 = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__load_be_u32 = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__load_be_u32 = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__load_be_u64 = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__load_be_u64 = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__store_be_u16 = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint16 arg1,
);

typedef _dart__store_be_u16 = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__store_be_u32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint32 arg1,
);

typedef _dart__store_be_u32 = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__store_be_u64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__store_be_u64 = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__bnd_set_ptr_bounds = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__bnd_set_ptr_bounds = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__bnd_narrow_ptr_bounds = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Uint64 arg2,
);

typedef _dart__bnd_narrow_ptr_bounds = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef Native__bnd_copy_ptr_bounds = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart__bnd_copy_ptr_bounds = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef Native__bnd_init_ptr_bounds = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__bnd_init_ptr_bounds = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__bnd_store_ptr_bounds = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart__bnd_store_ptr_bounds = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef Native__bnd_chk_ptr_lbounds = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__bnd_chk_ptr_lbounds = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__bnd_chk_ptr_ubounds = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__bnd_chk_ptr_ubounds = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__bnd_chk_ptr_bounds = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__bnd_chk_ptr_bounds = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__bnd_load_ptr_bounds = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart__bnd_load_ptr_bounds = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef Native__bnd_get_ptr_lbound = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__bnd_get_ptr_lbound = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__bnd_get_ptr_ubound = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__bnd_get_ptr_ubound = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__rdpid_u32 = ffi.Uint32 Function();

typedef _dart__rdpid_u32 = int Function();

typedef Native__ptwrite32 = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart__ptwrite32 = void Function(
  int arg0,
);

typedef Native__ptwrite64 = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart__ptwrite64 = void Function(
  int arg0,
);

typedef Native__pconfig_u32 = ffi.Uint32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint64> __data,
);

typedef _dart__pconfig_u32 = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint64> __data,
);

typedef Native__wbnoinvd = ffi.Void Function();

typedef _dart__wbnoinvd = void Function();

typedef Native__encls_u32 = ffi.Uint32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint64> __data,
);

typedef _dart__encls_u32 = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint64> __data,
);

typedef Native__enclu_u32 = ffi.Uint32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint64> __data,
);

typedef _dart__enclu_u32 = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint64> __data,
);

typedef Native__enclv_u32 = ffi.Uint32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint64> __data,
);

typedef _dart__enclv_u32 = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint64> __data,
);

typedef Native__udiv128 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Uint64> arg3,
);

typedef _dart__udiv128 = int Function(
  int arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint64> arg3,
);

typedef Native__div128 = ffi.Int64 Function(
  ffi.Int64 arg0,
  ffi.Int64 arg1,
  ffi.Int64 arg2,
  ffi.Pointer<ffi.Int64> arg3,
);

typedef _dart__div128 = int Function(
  int arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int64> arg3,
);

typedef Native__udiv64 = ffi.Uint32 Function(
  ffi.Uint64 arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _dart__udiv64 = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef Native__div64 = ffi.Int32 Function(
  ffi.Int64 arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart__div64 = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef Native__rdpkru_u32 = ffi.Uint32 Function();

typedef _dart__rdpkru_u32 = int Function();

typedef Native__wrpkru = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart__wrpkru = void Function(
  int arg0,
);

typedef Native__enqcmd = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart__enqcmd = int Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef Native__enqcmds = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart__enqcmds = int Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef Native__incsspd = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart__incsspd = void Function(
  int arg0,
);

typedef Native__rdsspd = ffi.Uint32 Function();

typedef _dart__rdsspd = int Function();

typedef Native__saveprevssp = ffi.Void Function();

typedef _dart__saveprevssp = void Function();

typedef Native__rstorssp = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__rstorssp = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__wrssd = ffi.Void Function(
  ffi.Uint32 arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart__wrssd = void Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef Native__wrussd = ffi.Void Function(
  ffi.Uint32 arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart__wrussd = void Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef Native__setssbsy = ffi.Void Function();

typedef _dart__setssbsy = void Function();

typedef Native__clrssbsy = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__clrssbsy = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__switchssp = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__switchssp = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__incsspq = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart__incsspq = void Function(
  int arg0,
);

typedef Native__rdsspq = ffi.Uint64 Function();

typedef _dart__rdsspq = int Function();

typedef Native__wrssq = ffi.Void Function(
  ffi.Uint64 arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart__wrssq = void Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef Native__wrussq = ffi.Void Function(
  ffi.Uint64 arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart__wrussq = void Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef Native__mm_cldemote = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__mm_cldemote = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__directstoreu_u32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint32 arg1,
);

typedef _dart__directstoreu_u32 = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__directstoreu_u64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__directstoreu_u64 = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native__movdir64b = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart__movdir64b = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef Native__serialize = ffi.Void Function();

typedef _dart__serialize = void Function();

typedef Native__xsusldtrk = ffi.Void Function();

typedef _dart__xsusldtrk = void Function();

typedef Native__xresldtrk = ffi.Void Function();

typedef _dart__xresldtrk = void Function();

typedef Native__umonitor = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__umonitor = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__umwait = ffi.Uint8 Function(
  ffi.Uint32 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__umwait = int Function(
  int arg0,
  int arg1,
);

typedef Native__tpause = ffi.Uint8 Function(
  ffi.Uint32 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__tpause = int Function(
  int arg0,
  int arg1,
);

typedef Native__clui = ffi.Void Function();

typedef _dart__clui = void Function();

typedef Native__stui = ffi.Void Function();

typedef _dart__stui = void Function();

typedef Native__testui = ffi.Uint8 Function();

typedef _dart__testui = int Function();

typedef Native__senduipi = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart__senduipi = void Function(
  int arg0,
);

typedef Native__hreset = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart__hreset = void Function(
  int arg0,
);

typedef Native__mm512_kunpackb = ffi.Uint16 Function(
  ffi.Uint16 arg0,
  ffi.Uint16 arg1,
);

typedef _dart__mm512_kunpackb = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_kunpackw = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__mm512_kunpackw = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_kunpackd = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__mm512_kunpackd = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_and_mask8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint8 arg1,
);

typedef _dart__mm512_testz_and_mask8 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_and_mask16 = ffi.Uint8 Function(
  ffi.Uint16 arg0,
  ffi.Uint16 arg1,
);

typedef _dart__mm512_testz_and_mask16 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_and_mask32 = ffi.Uint8 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__mm512_testz_and_mask32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_and_mask64 = ffi.Uint8 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__mm512_testz_and_mask64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_andn_mask8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint8 arg1,
);

typedef _dart__mm512_testz_andn_mask8 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_andn_mask16 = ffi.Uint8 Function(
  ffi.Uint16 arg0,
  ffi.Uint16 arg1,
);

typedef _dart__mm512_testz_andn_mask16 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_andn_mask32 = ffi.Uint8 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__mm512_testz_andn_mask32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_andn_mask64 = ffi.Uint8 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__mm512_testz_andn_mask64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_or_mask8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint8 arg1,
);

typedef _dart__mm512_testz_or_mask8 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_or_mask16 = ffi.Uint8 Function(
  ffi.Uint16 arg0,
  ffi.Uint16 arg1,
);

typedef _dart__mm512_testz_or_mask16 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_or_mask32 = ffi.Uint8 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__mm512_testz_or_mask32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_or_mask64 = ffi.Uint8 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__mm512_testz_or_mask64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_nor_mask8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint8 arg1,
);

typedef _dart__mm512_testz_nor_mask8 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_nor_mask16 = ffi.Uint8 Function(
  ffi.Uint16 arg0,
  ffi.Uint16 arg1,
);

typedef _dart__mm512_testz_nor_mask16 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_nor_mask32 = ffi.Uint8 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__mm512_testz_nor_mask32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__mm512_testz_nor_mask64 = ffi.Uint8 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__mm512_testz_nor_mask64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kadd_mask8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint8 arg1,
);

typedef _dart__kadd_mask8 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kadd_mask16 = ffi.Uint16 Function(
  ffi.Uint16 arg0,
  ffi.Uint16 arg1,
);

typedef _dart__kadd_mask16 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kadd_mask32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__kadd_mask32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kadd_mask64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__kadd_mask64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kand_mask8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint8 arg1,
);

typedef _dart__kand_mask8 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kand_mask16 = ffi.Uint16 Function(
  ffi.Uint16 arg0,
  ffi.Uint16 arg1,
);

typedef _dart__kand_mask16 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kand_mask32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__kand_mask32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kand_mask64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__kand_mask64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kandn_mask8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint8 arg1,
);

typedef _dart__kandn_mask8 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kandn_mask16 = ffi.Uint16 Function(
  ffi.Uint16 arg0,
  ffi.Uint16 arg1,
);

typedef _dart__kandn_mask16 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kandn_mask32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__kandn_mask32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kandn_mask64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__kandn_mask64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__knot_mask8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
);

typedef _dart__knot_mask8 = int Function(
  int arg0,
);

typedef Native__knot_mask16 = ffi.Uint16 Function(
  ffi.Uint16 arg0,
);

typedef _dart__knot_mask16 = int Function(
  int arg0,
);

typedef Native__knot_mask32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__knot_mask32 = int Function(
  int arg0,
);

typedef Native__knot_mask64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__knot_mask64 = int Function(
  int arg0,
);

typedef Native__kor_mask8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint8 arg1,
);

typedef _dart__kor_mask8 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kor_mask16 = ffi.Uint16 Function(
  ffi.Uint16 arg0,
  ffi.Uint16 arg1,
);

typedef _dart__kor_mask16 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kor_mask32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__kor_mask32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kor_mask64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__kor_mask64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kxnor_mask8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint8 arg1,
);

typedef _dart__kxnor_mask8 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kxnor_mask16 = ffi.Uint16 Function(
  ffi.Uint16 arg0,
  ffi.Uint16 arg1,
);

typedef _dart__kxnor_mask16 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kxnor_mask32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__kxnor_mask32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kxnor_mask64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__kxnor_mask64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kxor_mask8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint8 arg1,
);

typedef _dart__kxor_mask8 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kxor_mask16 = ffi.Uint16 Function(
  ffi.Uint16 arg0,
  ffi.Uint16 arg1,
);

typedef _dart__kxor_mask16 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kxor_mask32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__kxor_mask32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kxor_mask64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__kxor_mask64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kshiftli_mask8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__kshiftli_mask8 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kshiftli_mask16 = ffi.Uint16 Function(
  ffi.Uint16 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__kshiftli_mask16 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kshiftli_mask32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__kshiftli_mask32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kshiftli_mask64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__kshiftli_mask64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kshiftri_mask8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__kshiftri_mask8 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kshiftri_mask16 = ffi.Uint16 Function(
  ffi.Uint16 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__kshiftri_mask16 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kshiftri_mask32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__kshiftri_mask32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__kshiftri_mask64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__kshiftri_mask64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__load_mask8 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint8> arg0,
);

typedef _dart__load_mask8 = int Function(
  ffi.Pointer<ffi.Uint8> arg0,
);

typedef Native__load_mask16 = ffi.Uint16 Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart__load_mask16 = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef Native__load_mask32 = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart__load_mask32 = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef Native__load_mask64 = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint64> arg0,
);

typedef _dart__load_mask64 = int Function(
  ffi.Pointer<ffi.Uint64> arg0,
);

typedef Native__store_mask8 = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> arg0,
  ffi.Uint8 arg1,
);

typedef _dart__store_mask8 = void Function(
  ffi.Pointer<ffi.Uint8> arg0,
  int arg1,
);

typedef Native__store_mask16 = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> arg0,
  ffi.Uint16 arg1,
);

typedef _dart__store_mask16 = void Function(
  ffi.Pointer<ffi.Uint16> arg0,
  int arg1,
);

typedef Native__store_mask32 = ffi.Void Function(
  ffi.Pointer<ffi.Uint32> arg0,
  ffi.Uint32 arg1,
);

typedef _dart__store_mask32 = void Function(
  ffi.Pointer<ffi.Uint32> arg0,
  int arg1,
);

typedef Native__store_mask64 = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__store_mask64 = void Function(
  ffi.Pointer<ffi.Uint64> arg0,
  int arg1,
);

typedef Native__cvtmask8_u32 = ffi.Uint32 Function(
  ffi.Uint8 arg0,
);

typedef _dart__cvtmask8_u32 = int Function(
  int arg0,
);

typedef Native__cvtmask16_u32 = ffi.Uint32 Function(
  ffi.Uint16 arg0,
);

typedef _dart__cvtmask16_u32 = int Function(
  int arg0,
);

typedef Native__cvtmask32_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__cvtmask32_u32 = int Function(
  int arg0,
);

typedef Native__cvtmask64_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__cvtmask64_u64 = int Function(
  int arg0,
);

typedef Native__cvtu32_mask8 = ffi.Uint8 Function(
  ffi.Uint32 arg0,
);

typedef _dart__cvtu32_mask8 = int Function(
  int arg0,
);

typedef Native__cvtu32_mask16 = ffi.Uint16 Function(
  ffi.Uint32 arg0,
);

typedef _dart__cvtu32_mask16 = int Function(
  int arg0,
);

typedef Native__cvtu32_mask32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__cvtu32_mask32 = int Function(
  int arg0,
);

typedef Native__cvtu64_mask64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__cvtu64_mask64 = int Function(
  int arg0,
);

typedef Native__mm512_kmov = ffi.Uint16 Function(
  ffi.Uint16 arg0,
);

typedef _dart__mm512_kmov = int Function(
  int arg0,
);

typedef Native__kortest_mask8_u8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint8 arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef _dart__kortest_mask8_u8 = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef Native__kortest_mask16_u8 = ffi.Uint8 Function(
  ffi.Uint16 arg0,
  ffi.Uint16 arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef _dart__kortest_mask16_u8 = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef Native__kortest_mask32_u8 = ffi.Uint8 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef _dart__kortest_mask32_u8 = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef Native__kortest_mask64_u8 = ffi.Uint8 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef _dart__kortest_mask64_u8 = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef Native__ktest_mask8_u8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint8 arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef _dart__ktest_mask8_u8 = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef Native__ktest_mask16_u8 = ffi.Uint8 Function(
  ffi.Uint16 arg0,
  ffi.Uint16 arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef _dart__ktest_mask16_u8 = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef Native__ktest_mask32_u8 = ffi.Uint8 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef _dart__ktest_mask32_u8 = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef Native__ktest_mask64_u8 = ffi.Uint8 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef _dart__ktest_mask64_u8 = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef Native__tile_loadconfig = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__tile_loadconfig = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__tile_storeconfig = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__tile_storeconfig = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__tile_release = ffi.Void Function();

typedef _dart__tile_release = void Function();

typedef Native__tile_loadd = ffi.Void Function(
  ffi.Int32 dst,
  ffi.Pointer<ffi.Void> base,
  ffi.Int32 stride,
);

typedef _dart__tile_loadd = void Function(
  int dst,
  ffi.Pointer<ffi.Void> base,
  int stride,
);

typedef Native__tile_stream_loadd = ffi.Void Function(
  ffi.Int32 dst,
  ffi.Pointer<ffi.Void> base,
  ffi.Int32 stride,
);

typedef _dart__tile_stream_loadd = void Function(
  int dst,
  ffi.Pointer<ffi.Void> base,
  int stride,
);

typedef Native__tile_stored = ffi.Void Function(
  ffi.Int32 src,
  ffi.Pointer<ffi.Void> base,
  ffi.Int32 stride,
);

typedef _dart__tile_stored = void Function(
  int src,
  ffi.Pointer<ffi.Void> base,
  int stride,
);

typedef Native__tile_zero = ffi.Void Function(
  ffi.Int32 dst,
);

typedef _dart__tile_zero = void Function(
  int dst,
);

typedef Native__tile_dpbf16ps = ffi.Void Function(
  ffi.Int32 dst,
  ffi.Int32 src1,
  ffi.Int32 src2,
);

typedef _dart__tile_dpbf16ps = void Function(
  int dst,
  int src1,
  int src2,
);

typedef Native__tile_dpbssd = ffi.Void Function(
  ffi.Int32 dst,
  ffi.Int32 src1,
  ffi.Int32 src2,
);

typedef _dart__tile_dpbssd = void Function(
  int dst,
  int src1,
  int src2,
);

typedef Native__tile_dpbsud = ffi.Void Function(
  ffi.Int32 dst,
  ffi.Int32 src1,
  ffi.Int32 src2,
);

typedef _dart__tile_dpbsud = void Function(
  int dst,
  int src1,
  int src2,
);

typedef Native__tile_dpbusd = ffi.Void Function(
  ffi.Int32 dst,
  ffi.Int32 src1,
  ffi.Int32 src2,
);

typedef _dart__tile_dpbusd = void Function(
  int dst,
  int src1,
  int src2,
);

typedef Native__tile_dpbuud = ffi.Void Function(
  ffi.Int32 dst,
  ffi.Int32 src1,
  ffi.Int32 src2,
);

typedef _dart__tile_dpbuud = void Function(
  int dst,
  int src1,
  int src2,
);

typedef Native___llwpcb = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart___llwpcb = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native___slwpcb = ffi.Pointer<ffi.Void> Function();

typedef _dart___slwpcb = ffi.Pointer<ffi.Void> Function();

typedef Native___lwpval32 = ffi.Void Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart___lwpval32 = void Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef Native___lwpins32 = ffi.Uint8 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart___lwpins32 = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef Native___lwpval64 = ffi.Void Function(
  ffi.Uint64 arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart___lwpval64 = void Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef Native___lwpins64 = ffi.Uint8 Function(
  ffi.Uint64 arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart___lwpins64 = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef Native__andn_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__andn_u32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__andn_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart__andn_u64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__bextri_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__bextri_u32 = int Function(
  int arg0,
  int arg1,
);

typedef Native__blcfill_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__blcfill_u32 = int Function(
  int arg0,
);

typedef Native__blsfill_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__blsfill_u32 = int Function(
  int arg0,
);

typedef Native__blcs_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__blcs_u32 = int Function(
  int arg0,
);

typedef Native__tzmsk_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__tzmsk_u32 = int Function(
  int arg0,
);

typedef Native__blcic_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__blcic_u32 = int Function(
  int arg0,
);

typedef Native__blsic_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__blsic_u32 = int Function(
  int arg0,
);

typedef Native__t1mskc_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__t1mskc_u32 = int Function(
  int arg0,
);

typedef Native__blcmsk_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__blcmsk_u32 = int Function(
  int arg0,
);

typedef Native__blci_u32 = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart__blci_u32 = int Function(
  int arg0,
);

typedef Native__bextri_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint32 arg1,
);

typedef _dart__bextri_u64 = int Function(
  int arg0,
  int arg1,
);

typedef Native__blcfill_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__blcfill_u64 = int Function(
  int arg0,
);

typedef Native__blsfill_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__blsfill_u64 = int Function(
  int arg0,
);

typedef Native__blcs_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__blcs_u64 = int Function(
  int arg0,
);

typedef Native__tzmsk_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__tzmsk_u64 = int Function(
  int arg0,
);

typedef Native__blcic_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__blcic_u64 = int Function(
  int arg0,
);

typedef Native__blsic_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__blsic_u64 = int Function(
  int arg0,
);

typedef Native__t1mskc_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__t1mskc_u64 = int Function(
  int arg0,
);

typedef Native__blcmsk_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__blcmsk_u64 = int Function(
  int arg0,
);

typedef Native__blci_u64 = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart__blci_u64 = int Function(
  int arg0,
);

typedef Native__mm_monitorx = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart__mm_monitorx = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
  int arg2,
);

typedef Native__mm_mwaitx = ffi.Void Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart__mm_mwaitx = void Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef Native__mm_clzero = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__mm_clzero = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native___rmpupdate = ffi.Uint32 Function(
  ffi.Uint64 arg0,
  ffi.Pointer<rmp_seg> arg1,
  ffi.Int32 arg2,
);

typedef _dart___rmpupdate = int Function(
  int arg0,
  ffi.Pointer<rmp_seg> arg1,
  int arg2,
);

typedef Native___pvalidate = ffi.Uint32 Function(
  ffi.Uint64 arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart___pvalidate = int Function(
  int arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef Native___psmash = ffi.Uint32 Function(
  ffi.Uint64 arg0,
);

typedef _dart___psmash = int Function(
  int arg0,
);

typedef Native___rmpadjust = ffi.Uint32 Function(
  ffi.Uint64 arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart___rmpadjust = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef Native___svm_invlpgb = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Int32 arg1,
);

typedef _dart___svm_invlpgb = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native___svm_tlbsync = ffi.Void Function();

typedef _dart___svm_tlbsync = void Function();

typedef Native__AddressOfReturnAddress = ffi.Pointer<ffi.Void> Function();

typedef _dart__AddressOfReturnAddress = ffi.Pointer<ffi.Void> Function();

typedef Native__InterlockedAnd16_np = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Value,
  ffi.Int16 _Mask,
);

typedef _dart__InterlockedAnd16_np = int Function(
  ffi.Pointer<ffi.Int16> _Value,
  int _Mask,
);

typedef Native__InterlockedAnd64_np = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Value,
  ffi.Int64 _Mask,
);

typedef _dart__InterlockedAnd64_np = int Function(
  ffi.Pointer<ffi.Int64> _Value,
  int _Mask,
);

typedef Native__InterlockedAnd8_np = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> _Value,
  ffi.Int8 _Mask,
);

typedef _dart__InterlockedAnd8_np = int Function(
  ffi.Pointer<ffi.Int8> _Value,
  int _Mask,
);

typedef Native__InterlockedAnd_np = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Value,
  ffi.Int64 _Mask,
);

typedef _dart__InterlockedAnd_np = int Function(
  ffi.Pointer<ffi.Int64> _Value,
  int _Mask,
);

typedef Native__InterlockedCompareExchange128_np = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> _Destination,
  ffi.Int64 _ExchangeHigh,
  ffi.Int64 _ExchangeLow,
  ffi.Pointer<ffi.Int64> _ComparandResult,
);

typedef _dart__InterlockedCompareExchange128_np = int Function(
  ffi.Pointer<ffi.Int64> _Destination,
  int _ExchangeHigh,
  int _ExchangeLow,
  ffi.Pointer<ffi.Int64> _ComparandResult,
);

typedef Native__InterlockedCompareExchange16_np = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Destination,
  ffi.Int16 _Exchange,
  ffi.Int16 _Comparand,
);

typedef _dart__InterlockedCompareExchange16_np = int Function(
  ffi.Pointer<ffi.Int16> _Destination,
  int _Exchange,
  int _Comparand,
);

typedef Native__InterlockedCompareExchange64_np = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Destination,
  ffi.Int64 _Exchange,
  ffi.Int64 _Comparand,
);

typedef _dart__InterlockedCompareExchange64_np = int Function(
  ffi.Pointer<ffi.Int64> _Destination,
  int _Exchange,
  int _Comparand,
);

typedef Native__InterlockedCompareExchangePointer = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _Destination,
  ffi.Pointer<ffi.Void> _Exchange,
  ffi.Pointer<ffi.Void> _Comparand,
);

typedef _dart__InterlockedCompareExchangePointer = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _Destination,
  ffi.Pointer<ffi.Void> _Exchange,
  ffi.Pointer<ffi.Void> _Comparand,
);

typedef Native__InterlockedCompareExchangePointer_np = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _Destination,
  ffi.Pointer<ffi.Void> _Exchange,
  ffi.Pointer<ffi.Void> _Comparand,
);

typedef _dart__InterlockedCompareExchangePointer_np = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _Destination,
  ffi.Pointer<ffi.Void> _Exchange,
  ffi.Pointer<ffi.Void> _Comparand,
);

typedef Native__InterlockedCompareExchange_np = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Destination,
  ffi.Int64 _Exchange,
  ffi.Int64 _Comparand,
);

typedef _dart__InterlockedCompareExchange_np = int Function(
  ffi.Pointer<ffi.Int64> _Destination,
  int _Exchange,
  int _Comparand,
);

typedef Native__InterlockedExchangePointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _Target,
  ffi.Pointer<ffi.Void> _Value,
);

typedef _dart__InterlockedExchangePointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _Target,
  ffi.Pointer<ffi.Void> _Value,
);

typedef Native__InterlockedOr16_np = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Value,
  ffi.Int16 _Mask,
);

typedef _dart__InterlockedOr16_np = int Function(
  ffi.Pointer<ffi.Int16> _Value,
  int _Mask,
);

typedef Native__InterlockedOr64_np = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Value,
  ffi.Int64 _Mask,
);

typedef _dart__InterlockedOr64_np = int Function(
  ffi.Pointer<ffi.Int64> _Value,
  int _Mask,
);

typedef Native__InterlockedOr8_np = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> _Value,
  ffi.Int8 _Mask,
);

typedef _dart__InterlockedOr8_np = int Function(
  ffi.Pointer<ffi.Int8> _Value,
  int _Mask,
);

typedef Native__InterlockedOr_np = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Value,
  ffi.Int64 _Mask,
);

typedef _dart__InterlockedOr_np = int Function(
  ffi.Pointer<ffi.Int64> _Value,
  int _Mask,
);

typedef Native__InterlockedXor16_np = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Value,
  ffi.Int16 _Mask,
);

typedef _dart__InterlockedXor16_np = int Function(
  ffi.Pointer<ffi.Int16> _Value,
  int _Mask,
);

typedef Native__InterlockedXor64_np = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Value,
  ffi.Int64 _Mask,
);

typedef _dart__InterlockedXor64_np = int Function(
  ffi.Pointer<ffi.Int64> _Value,
  int _Mask,
);

typedef Native__InterlockedXor8_np = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> _Value,
  ffi.Int8 _Mask,
);

typedef _dart__InterlockedXor8_np = int Function(
  ffi.Pointer<ffi.Int8> _Value,
  int _Mask,
);

typedef Native__InterlockedXor_np = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Value,
  ffi.Int64 _Mask,
);

typedef _dart__InterlockedXor_np = int Function(
  ffi.Pointer<ffi.Int64> _Value,
  int _Mask,
);

typedef Native__ReadBarrier = ffi.Void Function();

typedef _dart__ReadBarrier = void Function();

typedef Native__ReturnAddress = ffi.Pointer<ffi.Void> Function();

typedef _dart__ReturnAddress = ffi.Pointer<ffi.Void> Function();

typedef Native__WriteBarrier = ffi.Void Function();

typedef _dart__WriteBarrier = void Function();

typedef Native___addgsbyte = ffi.Void Function(
  ffi.Uint64 arg0,
  ffi.Uint8 arg1,
);

typedef _dart___addgsbyte = void Function(
  int arg0,
  int arg1,
);

typedef Native___addgsdword = ffi.Void Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart___addgsdword = void Function(
  int arg0,
  int arg1,
);

typedef Native___addgsqword = ffi.Void Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart___addgsqword = void Function(
  int arg0,
  int arg1,
);

typedef Native___addgsword = ffi.Void Function(
  ffi.Uint64 arg0,
  ffi.Uint16 arg1,
);

typedef _dart___addgsword = void Function(
  int arg0,
  int arg1,
);

typedef Native___clts = ffi.Void Function();

typedef _dart___clts = void Function();

typedef Native___code_seg = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart___code_seg = void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef Native___cpuid = ffi.Void Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Int32 arg1,
);

typedef _dart___cpuid = void Function(
  ffi.Pointer<ffi.Int32> arg0,
  int arg1,
);

typedef Native___cpuidex = ffi.Void Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart___cpuidex = void Function(
  ffi.Pointer<ffi.Int32> arg0,
  int arg1,
  int arg2,
);

typedef Native___debugbreak = ffi.Void Function();

typedef _dart___debugbreak = void Function();

typedef Native___emul = ffi.Int64 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart___emul = int Function(
  int arg0,
  int arg1,
);

typedef Native___emulu = ffi.Uint64 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart___emulu = int Function(
  int arg0,
  int arg1,
);

typedef Native___fastfail = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart___fastfail = void Function(
  int arg0,
);

typedef Native___faststorefence = ffi.Void Function();

typedef _dart___faststorefence = void Function();

typedef Native___getcallerseflags = ffi.Uint32 Function();

typedef _dart___getcallerseflags = int Function();

typedef Native___halt = ffi.Void Function();

typedef _dart___halt = void Function();

typedef Native___inbyte = ffi.Uint8 Function(
  ffi.Uint16 arg0,
);

typedef _dart___inbyte = int Function(
  int arg0,
);

typedef Native___inbytestring = ffi.Void Function(
  ffi.Uint16 arg0,
  ffi.Pointer<ffi.Uint8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart___inbytestring = void Function(
  int arg0,
  ffi.Pointer<ffi.Uint8> arg1,
  int arg2,
);

typedef Native___incgsbyte = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart___incgsbyte = void Function(
  int arg0,
);

typedef Native___incgsdword = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart___incgsdword = void Function(
  int arg0,
);

typedef Native___incgsqword = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart___incgsqword = void Function(
  int arg0,
);

typedef Native___incgsword = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart___incgsword = void Function(
  int arg0,
);

typedef Native___indword = ffi.Uint64 Function(
  ffi.Uint16 arg0,
);

typedef _dart___indword = int Function(
  int arg0,
);

typedef Native___indwordstring = ffi.Void Function(
  ffi.Uint16 arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Uint64 arg2,
);

typedef _dart___indwordstring = void Function(
  int arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  int arg2,
);

typedef Native___int2c = ffi.Void Function();

typedef _dart___int2c = void Function();

typedef Native___invlpg = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart___invlpg = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native___inword = ffi.Uint16 Function(
  ffi.Uint16 arg0,
);

typedef _dart___inword = int Function(
  int arg0,
);

typedef Native___inwordstring = ffi.Void Function(
  ffi.Uint16 arg0,
  ffi.Pointer<ffi.Uint16> arg1,
  ffi.Uint64 arg2,
);

typedef _dart___inwordstring = void Function(
  int arg0,
  ffi.Pointer<ffi.Uint16> arg1,
  int arg2,
);

typedef Native___lidt = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart___lidt = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native___ll_lshift = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Int32 arg1,
);

typedef _dart___ll_lshift = int Function(
  int arg0,
  int arg1,
);

typedef Native___ll_rshift = ffi.Int64 Function(
  ffi.Int64 arg0,
  ffi.Int32 arg1,
);

typedef _dart___ll_rshift = int Function(
  int arg0,
  int arg1,
);

typedef Native___movsb = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart___movsb = void Function(
  ffi.Pointer<ffi.Uint8> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
  int arg2,
);

typedef Native___movsd = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Uint64 arg2,
);

typedef _dart___movsd = void Function(
  ffi.Pointer<ffi.Uint64> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  int arg2,
);

typedef Native___movsq = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Uint64 arg2,
);

typedef _dart___movsq = void Function(
  ffi.Pointer<ffi.Uint64> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  int arg2,
);

typedef Native___movsw = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> arg0,
  ffi.Pointer<ffi.Uint16> arg1,
  ffi.Uint64 arg2,
);

typedef _dart___movsw = void Function(
  ffi.Pointer<ffi.Uint16> arg0,
  ffi.Pointer<ffi.Uint16> arg1,
  int arg2,
);

typedef Native___mulh = ffi.Int64 Function(
  ffi.Int64 arg0,
  ffi.Int64 arg1,
);

typedef _dart___mulh = int Function(
  int arg0,
  int arg1,
);

typedef Native___nop = ffi.Void Function();

typedef _dart___nop = void Function();

typedef Native___nvreg_restore_fence = ffi.Void Function();

typedef _dart___nvreg_restore_fence = void Function();

typedef Native___nvreg_save_fence = ffi.Void Function();

typedef _dart___nvreg_save_fence = void Function();

typedef Native___outbyte = ffi.Void Function(
  ffi.Uint16 arg0,
  ffi.Uint8 arg1,
);

typedef _dart___outbyte = void Function(
  int arg0,
  int arg1,
);

typedef Native___outbytestring = ffi.Void Function(
  ffi.Uint16 arg0,
  ffi.Pointer<ffi.Uint8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart___outbytestring = void Function(
  int arg0,
  ffi.Pointer<ffi.Uint8> arg1,
  int arg2,
);

typedef Native___outdword = ffi.Void Function(
  ffi.Uint16 arg0,
  ffi.Uint64 arg1,
);

typedef _dart___outdword = void Function(
  int arg0,
  int arg1,
);

typedef Native___outdwordstring = ffi.Void Function(
  ffi.Uint16 arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Uint64 arg2,
);

typedef _dart___outdwordstring = void Function(
  int arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  int arg2,
);

typedef Native___outword = ffi.Void Function(
  ffi.Uint16 arg0,
  ffi.Uint16 arg1,
);

typedef _dart___outword = void Function(
  int arg0,
  int arg1,
);

typedef Native___outwordstring = ffi.Void Function(
  ffi.Uint16 arg0,
  ffi.Pointer<ffi.Uint16> arg1,
  ffi.Uint64 arg2,
);

typedef _dart___outwordstring = void Function(
  int arg0,
  ffi.Pointer<ffi.Uint16> arg1,
  int arg2,
);

typedef Native___rdtsc = ffi.Uint64 Function();

typedef _dart___rdtsc = int Function();

typedef Native___rdtscp = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart___rdtscp = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef Native___readcr0 = ffi.Uint64 Function();

typedef _dart___readcr0 = int Function();

typedef Native___readcr2 = ffi.Uint64 Function();

typedef _dart___readcr2 = int Function();

typedef Native___readcr3 = ffi.Uint64 Function();

typedef _dart___readcr3 = int Function();

typedef Native___readcr4 = ffi.Uint64 Function();

typedef _dart___readcr4 = int Function();

typedef Native___readcr8 = ffi.Uint64 Function();

typedef _dart___readcr8 = int Function();

typedef Native___readdr = ffi.Uint64 Function(
  ffi.Uint32 arg0,
);

typedef _dart___readdr = int Function(
  int arg0,
);

typedef Native___readeflags = ffi.Uint64 Function();

typedef _dart___readeflags = int Function();

typedef Native___readgsbyte = ffi.Uint8 Function(
  ffi.Uint64 arg0,
);

typedef _dart___readgsbyte = int Function(
  int arg0,
);

typedef Native___readgsdword = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart___readgsdword = int Function(
  int arg0,
);

typedef Native___readgsqword = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart___readgsqword = int Function(
  int arg0,
);

typedef Native___readgsword = ffi.Uint16 Function(
  ffi.Uint64 arg0,
);

typedef _dart___readgsword = int Function(
  int arg0,
);

typedef Native___readmsr = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart___readmsr = int Function(
  int arg0,
);

typedef Native___readpmc = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart___readpmc = int Function(
  int arg0,
);

typedef Native___segmentlimit = ffi.Uint64 Function(
  ffi.Uint64 arg0,
);

typedef _dart___segmentlimit = int Function(
  int arg0,
);

typedef Native___shiftleft128 = ffi.Uint64 Function(
  ffi.Uint64 _LowPart,
  ffi.Uint64 _HighPart,
  ffi.Uint8 _Shift,
);

typedef _dart___shiftleft128 = int Function(
  int _LowPart,
  int _HighPart,
  int _Shift,
);

typedef Native___sidt = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart___sidt = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native___stosb = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> arg0,
  ffi.Uint8 arg1,
  ffi.Uint64 arg2,
);

typedef _dart___stosb = void Function(
  ffi.Pointer<ffi.Uint8> arg0,
  int arg1,
  int arg2,
);

typedef Native___stosd = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart___stosd = void Function(
  ffi.Pointer<ffi.Uint64> arg0,
  int arg1,
  int arg2,
);

typedef Native___stosq = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart___stosq = void Function(
  ffi.Pointer<ffi.Uint64> arg0,
  int arg1,
  int arg2,
);

typedef Native___stosw = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> arg0,
  ffi.Uint16 arg1,
  ffi.Uint64 arg2,
);

typedef _dart___stosw = void Function(
  ffi.Pointer<ffi.Uint16> arg0,
  int arg1,
  int arg2,
);

typedef Native___svm_clgi = ffi.Void Function();

typedef _dart___svm_clgi = void Function();

typedef Native___svm_invlpga = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Int32 arg1,
);

typedef _dart___svm_invlpga = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef Native___svm_skinit = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart___svm_skinit = void Function(
  int arg0,
);

typedef Native___svm_stgi = ffi.Void Function();

typedef _dart___svm_stgi = void Function();

typedef Native___svm_vmload = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart___svm_vmload = void Function(
  int arg0,
);

typedef Native___svm_vmrun = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart___svm_vmrun = void Function(
  int arg0,
);

typedef Native___svm_vmsave = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart___svm_vmsave = void Function(
  int arg0,
);

typedef Native___ud2 = ffi.Void Function();

typedef _dart___ud2 = void Function();

typedef Native___ull_rshift = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Int32 arg1,
);

typedef _dart___ull_rshift = int Function(
  int arg0,
  int arg1,
);

typedef Native___umulh = ffi.Uint64 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart___umulh = int Function(
  int arg0,
  int arg1,
);

typedef Native___vmx_off = ffi.Void Function();

typedef _dart___vmx_off = void Function();

typedef Native___vmx_on = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint64> arg0,
);

typedef _dart___vmx_on = int Function(
  ffi.Pointer<ffi.Uint64> arg0,
);

typedef Native___vmx_vmclear = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint64> arg0,
);

typedef _dart___vmx_vmclear = int Function(
  ffi.Pointer<ffi.Uint64> arg0,
);

typedef Native___vmx_vmlaunch = ffi.Uint8 Function();

typedef _dart___vmx_vmlaunch = int Function();

typedef Native___vmx_vmptrld = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint64> arg0,
);

typedef _dart___vmx_vmptrld = int Function(
  ffi.Pointer<ffi.Uint64> arg0,
);

typedef Native___vmx_vmptrst = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> arg0,
);

typedef _dart___vmx_vmptrst = void Function(
  ffi.Pointer<ffi.Uint64> arg0,
);

typedef Native___vmx_vmread = ffi.Uint8 Function(
  ffi.Uint64 arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _dart___vmx_vmread = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef Native___vmx_vmresume = ffi.Uint8 Function();

typedef _dart___vmx_vmresume = int Function();

typedef Native___vmx_vmwrite = ffi.Uint8 Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart___vmx_vmwrite = int Function(
  int arg0,
  int arg1,
);

typedef Native___wbinvd = ffi.Void Function();

typedef _dart___wbinvd = void Function();

typedef Native___writecr0 = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart___writecr0 = void Function(
  int arg0,
);

typedef Native___writecr2 = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart___writecr2 = void Function(
  int arg0,
);

typedef Native___writecr3 = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart___writecr3 = void Function(
  int arg0,
);

typedef Native___writecr4 = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart___writecr4 = void Function(
  int arg0,
);

typedef Native___writecr8 = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart___writecr8 = void Function(
  int arg0,
);

typedef Native___writedr = ffi.Void Function(
  ffi.Uint32 arg0,
  ffi.Uint64 arg1,
);

typedef _dart___writedr = void Function(
  int arg0,
  int arg1,
);

typedef Native___writeeflags = ffi.Void Function(
  ffi.Uint64 arg0,
);

typedef _dart___writeeflags = void Function(
  int arg0,
);

typedef Native___writegsbyte = ffi.Void Function(
  ffi.Uint64 arg0,
  ffi.Uint8 arg1,
);

typedef _dart___writegsbyte = void Function(
  int arg0,
  int arg1,
);

typedef Native___writegsdword = ffi.Void Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart___writegsdword = void Function(
  int arg0,
  int arg1,
);

typedef Native___writegsqword = ffi.Void Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart___writegsqword = void Function(
  int arg0,
  int arg1,
);

typedef Native___writegsword = ffi.Void Function(
  ffi.Uint64 arg0,
  ffi.Uint16 arg1,
);

typedef _dart___writegsword = void Function(
  int arg0,
  int arg1,
);

typedef Native___writemsr = ffi.Void Function(
  ffi.Uint64 arg0,
  ffi.Uint64 arg1,
);

typedef _dart___writemsr = void Function(
  int arg0,
  int arg1,
);

typedef Native__bittest64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__bittest64 = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__bittestandcomplement = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__bittestandcomplement = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__bittestandcomplement64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__bittestandcomplement64 = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__bittestandreset = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__bittestandreset = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__bittestandreset64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__bittestandreset64 = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__bittestandset = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__bittestandset = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__bittestandset64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__bittestandset64 = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__disable = ffi.Void Function();

typedef _dart__disable = void Function();

typedef Native__enable = ffi.Void Function();

typedef _dart__enable = void Function();

typedef Native__interlockedbittestandreset = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__interlockedbittestandreset = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__interlockedbittestandreset64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__interlockedbittestandreset64 = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__interlockedbittestandset64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__interlockedbittestandset64 = int Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__m_prefetch = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__m_prefetch = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__m_prefetchw = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__m_prefetchw = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__mm_clflushopt = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__mm_clflushopt = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__mm_clwb = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__mm_clwb = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__mm_stream_si64x = ffi.Void Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int64 arg1,
);

typedef _dart__mm_stream_si64x = void Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef Native__mul128 = ffi.Int64 Function(
  ffi.Int64 _Multiplier,
  ffi.Int64 _Multiplicand,
  ffi.Pointer<ffi.Int64> _HighProduct,
);

typedef _dart__mul128 = int Function(
  int _Multiplier,
  int _Multiplicand,
  ffi.Pointer<ffi.Int64> _HighProduct,
);

typedef Native__rotl16 = ffi.Uint16 Function(
  ffi.Uint16 _Value,
  ffi.Uint8 _Shift,
);

typedef _dart__rotl16 = int Function(
  int _Value,
  int _Shift,
);

typedef Native__rotl8 = ffi.Uint8 Function(
  ffi.Uint8 _Value,
  ffi.Uint8 _Shift,
);

typedef _dart__rotl8 = int Function(
  int _Value,
  int _Shift,
);

typedef Native__rotr16 = ffi.Uint16 Function(
  ffi.Uint16 _Value,
  ffi.Uint8 _Shift,
);

typedef _dart__rotr16 = int Function(
  int _Value,
  int _Shift,
);

typedef Native__rotr8 = ffi.Uint8 Function(
  ffi.Uint8 _Value,
  ffi.Uint8 _Shift,
);

typedef _dart__rotr8 = int Function(
  int _Value,
  int _Shift,
);

typedef Native__setjmpex = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart__setjmpex = int Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef Native__rsm = ffi.Void Function();

typedef _dart__rsm = void Function();

typedef Native__lgdt = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__lgdt = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__sgdt = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart__sgdt = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef Native__clac = ffi.Void Function();

typedef _dart__clac = void Function();

typedef Native__stac = ffi.Void Function();

typedef _dart__stac = void Function();

typedef Native__addcarry_u8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint8 arg1,
  ffi.Uint8 arg2,
  ffi.Pointer<ffi.Uint8> arg3,
);

typedef _dart__addcarry_u8 = int Function(
  int arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint8> arg3,
);

typedef Native__subborrow_u8 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint8 arg1,
  ffi.Uint8 arg2,
  ffi.Pointer<ffi.Uint8> arg3,
);

typedef _dart__subborrow_u8 = int Function(
  int arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint8> arg3,
);

typedef Native__addcarry_u16 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint16 arg1,
  ffi.Uint16 arg2,
  ffi.Pointer<ffi.Uint16> arg3,
);

typedef _dart__addcarry_u16 = int Function(
  int arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint16> arg3,
);

typedef Native__subborrow_u16 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint16 arg1,
  ffi.Uint16 arg2,
  ffi.Pointer<ffi.Uint16> arg3,
);

typedef _dart__subborrow_u16 = int Function(
  int arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint16> arg3,
);

typedef Native__addcarry_u32 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<ffi.Uint32> arg3,
);

typedef _dart__addcarry_u32 = int Function(
  int arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint32> arg3,
);

typedef Native__subborrow_u32 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<ffi.Uint32> arg3,
);

typedef _dart__subborrow_u32 = int Function(
  int arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint32> arg3,
);

typedef Native__addcarry_u64 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Uint64> arg3,
);

typedef _dart__addcarry_u64 = int Function(
  int arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint64> arg3,
);

typedef Native__subborrow_u64 = ffi.Uint8 Function(
  ffi.Uint8 arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Uint64> arg3,
);

typedef _dart__subborrow_u64 = int Function(
  int arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint64> arg3,
);
